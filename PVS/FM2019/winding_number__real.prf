(winding_number__real
 (winding_number_rec_real_div_4_TCC1 0
  (winding_number_rec_real_div_4_TCC1-1 nil 3748090188
   ("" (subtype-tcc) nil nil) nil nil))
 (winding_number_rec_real_div_4 0
  (winding_number_rec_real_div_4-1 nil 3748090228
   ("" (skeep)
    (("" (rewrite "winding_number_rec__real.polycarp_eq")
      (("" (use "winding_number_rec4") nil nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (polycarp_eq formula-decl nil winding_number_rec__real nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (polygon_2D type-eq-decl nil acceptable_polygon "PolyCARP/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (winding_number_rec4 formula-decl nil polygon_contain "PolyCARP/"))
   shostak))
 (winding_number_rec_real_div_4_j 0
  (winding_number_rec_real_div_4_j-1 nil 3748090188
   ("" (skeep)
    (("" (use "winding_number_rec_real_div_4") (("" (grind) nil nil))
      nil))
    nil)
   ((winding_number_rec_real_div_4 formula-decl nil
     winding_number__real nil)
    (polygon_2D type-eq-decl nil acceptable_polygon "PolyCARP/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (divides const-decl "bool" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   nil))
 (polycarp_eq 0
  (polycarp_eq-1 nil 3748090364
   ("" (skeep)
    (("" (expand "winding_number_real")
      (("" (expand "winding_number")
        (("" (rewrite "winding_number_rec__real.polycarp_eq") nil nil))
        nil))
      nil))
    nil)
   ((winding_number_real const-decl "int" winding_number__real nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (polycarp_eq formula-decl nil winding_number_rec__real nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (polygon_2D type-eq-decl nil acceptable_polygon "PolyCARP/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (winding_number const-decl
     "{ii: int | ii = winding_number_rec(N, p, s, N - 1) / 4}"
     polygon_contain "PolyCARP/"))
   shostak)))

