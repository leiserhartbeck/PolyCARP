(quadrant_int_post
 (goal 0
  (goal-2
   "This proof does not depend on polycarp_analysis (the PVS transformed functions)"
   3764510052
   (""
    (with-labels
     (case "FORALL(X: unb_double,Y:unb_double | DtoR(Y) >= 0): NOT (X <= Dneg(Y) AND Y < X)")
     (("not le neg gt pos") nil))
    (("1" (hide "not le neg gt pos")
      (("1"
        (with-labels
         (case "FORALL(X: unb_double,Y:unb_double | DtoR(Y) >= 0): NOT (X < Dneg(Y) AND Y <= X)")
         (("not lt neg ge pos") nil))
        (("1" (hide "not lt neg ge pos")
          (("1" (assert)
            (("1" (skeep*)
              (("1" (name-replace "X" "i_1")
                (("1" (name-replace "Y" "i")
                  (("1" (name-replace "r_X" "r_1")
                    (("1" (name-replace "r_Y" "r")
                      (("1" (name-replace "e_Y" "i_2")
                        (("1" (name-replace "e_X" "i_3")
                          (("1" (expand "le_float64")
                            (("1" (expand "lt_float64")
                              (("1"
                                (expand "abs_real")
                                (("1"
                                  (expand "restrict")
                                  (("1"
                                    (expand "opp_float64")
                                    (("1"
                                      (expand "of_float64")
                                      (("1"
                                        (split -10)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (lemma "fp_ge_re_r_ge_0")
                                            (("1"
                                              (inst -1 "e_X" "X" "r_X")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "<=" -1 1)
                                                  (("1"
                                                    (expand
                                                     "L_quadrant")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -3)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (lemma
                                                             "fp_ge_re_r_ge_0")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "e_Y"
                                                               "Y"
                                                               "r_Y")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "<="
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (split
                                                                 -3)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (reveal
                                                                     "not le neg gt pos")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "X"
                                                                       "e_X")
                                                                      (("1"
                                                                        (expand
                                                                         "<"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "<="
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (lift-if
                                                                     4)
                                                                    (("2"
                                                                      (split
                                                                       4)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (lemma
                                                                           "fp_lt_neg_re_r_lt_0")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "e_Y"
                                                                             "Y"
                                                                             "r_Y")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "<"
                                                                                 1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split
                                                                           2)
                                                                          (("1"
                                                                            (flatten)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (lemma
                                                                               "fp_le_neg_re_r_le_0")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "e_X"
                                                                                 "X"
                                                                                 "r_X")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "<="
                                                                                     1)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (lift-if
                                                                   4)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split
                                                                       4)
                                                                      (("1"
                                                                        (split
                                                                         -3)
                                                                        (("1"
                                                                          (lemma
                                                                           "fp_lt_neg_re_r_lt_0")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "e_Y"
                                                                             "Y"
                                                                             "r_Y")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "<"
                                                                                 1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           "FltCorrect"
                                                                           -1)
                                                                          (("2"
                                                                            (rewrite
                                                                             "FleCorrect"
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split
                                                                           2)
                                                                          (("1"
                                                                            (lemma
                                                                             "fp_gt_re_r_gt_0")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "e_X"
                                                                               "X"
                                                                               "r_X")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "<"
                                                                                   1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (split -2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace
                                                         -2
                                                         :dir
                                                         rl
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (expand
                                                           "L_quadrant")
                                                          (("1"
                                                            (lift-if 3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 3)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (lemma
                                                                     "fp_lt_neg_re_r_lt_0")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "e_X"
                                                                       "X"
                                                                       "r_X")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "<"
                                                                           1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split
                                                                         2)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (lift-if
                                                                             1)
                                                                            (("1"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "fp_ge_re_r_ge_0")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "e_Y"
                                                                                     "Y"
                                                                                     "r_Y")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "<="
                                                                                         1)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "fp_le_neg_re_r_le_0")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "e_X"
                                                                             "X"
                                                                             "r_X")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "<="
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (reveal
                                                         "not lt neg ge pos")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "Y"
                                                           "e_Y")
                                                          (("1"
                                                            (expand
                                                             "<"
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "<="
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split -2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (rewrite
                                                         "FltCorrect"
                                                         -1)
                                                        (("1"
                                                          (rewrite
                                                           "FleCorrect"
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "L_quadrant")
                                                        (("2"
                                                          (replace
                                                           -2
                                                           :hide?
                                                           t
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (lift-if 5)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split
                                                                 5)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (lemma
                                                                     "fp_lt_neg_re_r_lt_0")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "e_Y"
                                                                       "Y"
                                                                       "r_Y")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "<"
                                                                           1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (lemma
                                                                         "fp_lt_neg_re_r_lt_0")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "e_Y"
                                                                           "Y"
                                                                           "r_Y")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "<"
                                                                               1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split
                                                                         2)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (lift-if
                                                                             1)
                                                                            (("1"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "fp_lt_neg_re_r_lt_0")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "e_Y"
                                                                                     "Y"
                                                                                     "r_Y")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "fp_le_neg_re_r_le_0")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "e_X"
                                                                             "X"
                                                                             "r_X")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "<="
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (rewrite
                                                 "FltCorrect"
                                                 -2)
                                                (("2"
                                                  (rewrite
                                                   "FleCorrect"
                                                   2)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (skeep :preds? t)
            (("2" (expand "<")
              (("2" (expand "<=")
                (("2" (rewrite "FleCorrect" -5)
                  (("2" (rewrite "FltCorrect" -4)
                    (("2" (use "Dneg_correct")
                      (("2" (expand "DtoR") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but 1)
      (("2" (skeep :preds? t)
        (("2" (expand "<=")
          (("2" (expand "<")
            (("2" (rewrite "FleCorrect" -4)
              (("2" (rewrite "FltCorrect" -5)
                (("2" (use "Dneg_correct")
                  (("2" (expand "DtoR") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Dneg_correct formula-decl nil ieee754dp_neg "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (lt_float64 const-decl "[ieee_float64, ieee_float64 -> bool]"
     cfloat "./framac_wp/")
    (restrict const-decl "R" restrict nil)
    (of_float64 const-decl "[ieee_float64 -> real]" cfloat
     "./framac_wp/")
    (e_Y skolem-const-decl "ieee_float64" quadrant_int_post nil)
    (FltCorrect formula-decl nil float "float/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (FleCorrect formula-decl nil float "float/")
    (fp_gt_re_r_gt_0 formula-decl nil roundoff_error_props nil)
    (fp_lt_neg_re_r_lt_0 formula-decl nil roundoff_error_props nil)
    (fp_le_neg_re_r_le_0 formula-decl nil roundoff_error_props nil)
    (L_quadrant const-decl "int" A_real_function_quadrant nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fp_ge_re_r_ge_0 formula-decl nil roundoff_error_props nil)
    (opp_float64 const-decl "[ieee_float64 -> ieee_float64]" cfloat
     "./framac_wp/")
    (abs_real const-decl "real" cmath "./framac_wp/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (le_float64 const-decl "[ieee_float64, ieee_float64 -> bool]"
     cfloat "./framac_wp/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ieee_float64 type-eq-decl nil cfloat "./framac_wp/")
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" float "float/")
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Dneg const-decl
     "{f: unb_double | closest_double?(-(DtoR(f1)))(f)}" ieee754dp_neg
     "float/")
    (< const-decl "bool" float "float/"))
   shostak)
  (goal-1 nil 3764090799
   ("" (assert)
    (("" (skeep*)
      (("" (name-replace "X" "i_1")
        (("" (name-replace "Y" "i")
          (("" (name-replace "r_X" "r_1")
            (("" (name-replace "r_Y" "r")
              (("" (name-replace "e_Y" "i_2")
                (("" (name-replace "e_X" "i_3")
                  ((""
                    (case "quadrant_trans(of_float64(e_X),of_float64(e_Y))(X,Y) = S8_maybeInt__to__maybe_int(m)")
                    (("1" (hide -11)
                      (("1" (rewrite "L_quadrant__quadrant_real__eq")
                        (("1"
                          (lemma
                           "quadrant_trans_no_warning_implies_stability_on_the_original")
                          (("1" (inst? -1 :where -2)
                            (("1" (expand "of_float64")
                              (("1"
                                (inst -1 "r_X" "r_Y")
                                (("1"
                                  (expand "abs_real")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand
                                           "S8_maybeInt__to__maybe_int")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "frama_c_bool_false")
                                              (("1"
                                                (expand "=")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (replace
                                                     -5
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1 :hide? t)
                                        (("2"
                                          (expand
                                           "S8_maybeInt__to__maybe_int")
                                          (("2"
                                            (expand
                                             "frama_c_bool_false")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil)
                             ("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 3)
                      (("2" (expand "le_float64")
                        (("2" (expand "restrict")
                          (("2" (expand "opp_float64")
                            (("2" (expand "S8_maybeInt__to__maybe_int")
                              (("2"
                                (expand "frama_c_bool_false")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "quadrant_trans")
                                    (("2"
                                      (expand "trans_fp_guard1")
                                      (("2"
                                        (expand "trans_fp_guard2")
                                        (("2"
                                          (expand "trans_fp_guard3")
                                          (("2"
                                            (expand "trans_fp_guard4")
                                            (("2"
                                              (expand "<=" 1)
                                              (("2"
                                                (expand "<" 1)
                                                (("2"
                                                  (expand "of_float64")
                                                  (("2"
                                                    (rewrite
                                                     "smallest_fp_ge_dtor"
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (rewrite
                                                       "smallest_fp_ge_dtor"
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (rewrite
                                                         "Dneg_correct"
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (rewrite
                                                           "Dneg_correct"
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (rewrite
                                                             "greatest_fp_le_dtor"
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (rewrite
                                                               "greatest_fp_le_dtor"
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (expand
                                                                 "lt_float64")
                                                                (("2"
                                                                  (expand
                                                                   "restrict")
                                                                  (("2"
                                                                    (split
                                                                     -10)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       -3)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -2)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -3)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           -)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split
                                                                                 -2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       -2)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -2)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -2)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 -3)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (assert) nil nil) ("4" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (restrict const-decl "R" restrict nil)
    (trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (trans_fp_guard3 const-decl "bool" quadrant__trans nil)
    (lt_float64 const-decl "[ieee_float64, ieee_float64 -> bool]"
     cfloat "./framac_wp/")
    (greatest_fp_le_dtor formula-decl nil quadrant__trans nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (Dneg const-decl
     "{f: unb_double | closest_double?(-(DtoR(f1)))(f)}" ieee754dp_neg
     "float/")
    (Dneg_correct formula-decl nil ieee754dp_neg "float/")
    (smallest_fp_ge_dtor formula-decl nil quadrant__trans nil)
    (trans_fp_guard4 const-decl "bool" quadrant__trans nil)
    (trans_fp_guard2 const-decl "bool" quadrant__trans nil)
    (opp_float64 const-decl "[ieee_float64 -> ieee_float64]" cfloat
     "./framac_wp/")
    (le_float64 const-decl "[ieee_float64, ieee_float64 -> bool]"
     cfloat "./framac_wp/")
    (quadrant_trans_no_warning_implies_stability_on_the_original
     formula-decl nil quadrant__trans_props nil)
    (abs_real const-decl "real" cmath "./framac_wp/")
    (frama_c_bool_false const-decl "int" interface nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (orig_r_guard3 const-decl "bool" quadrant__real nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (L_quadrant__quadrant_real__eq formula-decl nil interface nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (Maybe type-decl nil Maybe "structures/")
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (quadrant_trans const-decl "Maybe[int]" quadrant__trans nil)
    (of_float64 const-decl "[ieee_float64 -> real]" cfloat
     "./framac_wp/")
    (S8_maybeInt type-eq-decl nil S8_maybeInt nil)
    (S8_maybeInt__to__maybe_int const-decl "Maybe[int]" interface nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (ieee_float64 type-eq-decl nil cfloat "./framac_wp/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil))
   nil)))

