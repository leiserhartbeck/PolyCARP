(winding_number__real_for
 (winding_number_rec_real_body_TCC1 0
  (winding_number_rec_real_body_TCC1-1 nil 3759600132
   ("" (subtype-tcc) nil nil) nil nil
   (winding_number_rec_real_body subtype "winding_number__real_for.i"
    "naturalnumbers.below(winding_number__real_for.N)")))
 (winding_number_rec_real_body_TCC2 0
  (winding_number_rec_real_body_TCC2-1 nil 3759600132
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (winding_number_rec_real_body subtype
    "(number_fields.+)(winding_number__real_for.i, 1)"
    "naturalnumbers.below(winding_number__real_for.N)")))
 (winding_number_rec_real_body_TCC3 0
  (winding_number_rec_real_body_TCC3-1 nil 3759600132
   ("" (subtype-tcc) nil nil) nil nil
   (winding_number_rec_real_body subtype "winding_number__real_for.i"
    "naturalnumbers.below(winding_number__real_for.N)")))
 (winding_number_rec_real_body_TCC4 0
  (winding_number_rec_real_body_TCC4-1 nil 3764079316
   ("" (subtype-tcc) nil nil) nil nil
   (winding_number_rec_real_body subtype "0"
    "naturalnumbers.below(winding_number__real_for.N)")))
 (winding_number_real_for_inv_TCC1 0
  (winding_number_real_for_inv_TCC1-1 nil 3759600132
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (winding_number_real_for_inv subtype
    "(number_fields.-)(winding_number__real_for.i, 1)"
    "naturalnumbers.below(winding_number__real_for.N)")))
 (winding_number_real_for_post_TCC1 0
  (winding_number_real_for_post_TCC1-1 nil 3759600132
   ("" (subtype-tcc) nil nil) nil nil
   (winding_number_real_for_post subtype
    "(number_fields.-)(winding_number__real_for.N, 1)"
    "naturalnumbers.below(winding_number__real_for.N)")))
 (winding_number_real_for_sound 0
  (winding_number_real_for_sound-2 "" 3764428868
   ("" (skeep)
    (("" (expand "winding_number_real_for")
      (("" (lemma "for_invariant[int]")
        (("" (inst?)
          (("1" (inst -1 "winding_number_real_for_inv(N,p,s)")
            (("1" (assert)
              (("1" (hide 2)
                (("1" (skeep :preds? t)
                  (("1" (assert)
                    (("1" (expand "winding_number_rec_real" 1)
                      (("1" (lift-if 1)
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (replace -5 :hide? t)
                                (("1"
                                  (lift-if 1)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten) (("2" (grind-reals) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind-reals) nil nil))
            nil)
           ("2" (hide 2) (("2" (grind-reals) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((winding_number_real_for const-decl "int" winding_number__real_for
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (N skolem-const-decl "posnat" winding_number__real_for nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (ForBody type-eq-decl nil for_iterate structures)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (winding_number_contrib_real const-decl "int"
     winding_number_contrib__real nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (polygon_2D type-eq-decl nil acceptable_polygon PolyCARP)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (winding_number_rec_real def-decl "int" winding_number_rec__real
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (for_invariant formula-decl nil for_iterate structures)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil))
   shostak)
  (winding_number_real_for_sound-1 nil 3759600264
   ("" (skeep)
    (("" (expand "winding_number_real_for")
      (("" (lemma "for_invariant[int]")
        (("" (inst?)
          (("1" (inst -1 "winding_number_real_for_inv(N,p,s)")
            (("1" (assert)
              (("1" (hide 2)
                (("1" (skeep :preds? t)
                  (("1" (assert)
                    (("1" (expand "winding_number_rec_real" 1)
                      (("1" (lift-if 1)
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (replace -5 :hide? t)
                                (("1"
                                  (lift-if 1)
                                  (("1"
                                    (split 1)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten) (("2" (grind-reals) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (grind-reals) nil nil)) nil)
           ("3" (hide 2) (("3" (grind-reals) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((ForBody type-eq-decl nil for_iterate structures)
    (winding_number_contrib_real const-decl "int"
     winding_number_contrib__real nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (polygon_2D type-eq-decl nil acceptable_polygon PolyCARP)
    (winding_number_rec_real def-decl "int" winding_number_rec__real
     nil)
    (for_invariant formula-decl nil for_iterate structures))
   shostak))
 (winding_number_real_for_div4_j 0
  (winding_number_real_for_div4_j-1 nil 3759668199
   ("" (skeep :preds? t)
    (("" (use "winding_number_real_for_sound")
      (("" (expand "winding_number_real_for_logic")
        (("" (replace -1 :hide? t)
          (("" (assert)
            (("" (use "winding_number_rec_real_div_4_j") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((winding_number_real_for_sound formula-decl nil
     winding_number__real_for nil)
    (polygon_2D type-eq-decl nil acceptable_polygon PolyCARP)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (winding_number_rec_real_div_4_j judgement-tcc nil
     winding_number__real nil))
   nil
   (winding_number_real_for_div4_j subtype
    "number_fields./(winding_number__real_for.winding_number_real_for(winding_number__real_for.N, winding_number__real_for.p, winding_number__real_for.s), 4)"
    "int")))
 (winding_number_it_real_sound 0
  (winding_number_it_real_sound-1 nil 3759668284
   ("" (skeep :preds? t)
    (("" (expand "winding_number_it_real_logic")
      (("" (expand "winding_number_it_real")
        (("" (expand "winding_number_real")
          (("" (use "winding_number_real_for_sound")
            (("" (assert)
              (("" (expand "winding_number_real_for_logic")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((winding_number_it_real const-decl "int" winding_number__real_for
     nil)
    (winding_number_real_for_sound formula-decl nil
     winding_number__real_for nil)
    (polygon_2D type-eq-decl nil acceptable_polygon PolyCARP)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (winding_number_real const-decl "int" winding_number__real nil))
   shostak))
 (polycarp_eq 0
  (polycarp_eq-1 nil 3759668618
   ("" (skeep :preds? t)
    (("" (use "winding_number_it_real_sound")
      (("" (replace -1 :hide? t)
        (("" (use "winding_number__real.polycarp_eq") nil nil)) nil))
      nil))
    nil)
   ((winding_number_it_real_sound formula-decl nil
     winding_number__real_for nil)
    (polygon_2D type-eq-decl nil acceptable_polygon PolyCARP)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (polycarp_eq formula-decl nil winding_number__real nil))
   shostak)))

