(winding_number_rec__real
 (winding_number_rec_real_TCC1 0
  (winding_number_rec_real_TCC1-1 nil 3747304721
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (winding_number_rec_real_TCC2 0
  (winding_number_rec_real_TCC2-1 nil 3747304721
   ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (winding_number_rec_real_TCC3 0
  (winding_number_rec_real_TCC3-1 nil 3747304721
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (winding_number_rec_real_TCC4 0
  (winding_number_rec_real_TCC4-1 nil 3747304721
   ("" (subtype-tcc) nil nil) nil nil))
 (polycarp_eq 0
  (polycarp_eq-1 nil 3747860655
   ("" (skeep :but "i")
    (("" (induct "i")
      (("1" (flatten)
        (("1" (expand "winding_number_rec_real")
          (("1" (lift-if 1)
            (("1" (split 1)
              (("1" (flatten)
                (("1" (expand "winding_number_rec")
                  (("1" (assert)
                    (("1" (expand "winding_number_contrib_real")
                      (("1" (rewrite "quadrant__real.polycarp_eq")
                        (("1" (rewrite "quadrant__real.polycarp_eq")
                          (("1" (expand "-")
                            (("1" (expand "wn_r_guard1")
                              (("1"
                                (lift-if 1)
                                (("1"
                                  (split 1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "wn_r_guard2")
                                      (("2"
                                        (split 2)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (expand "wn_r_guard3")
                                            (("2"
                                              (split 2)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand
                                                   "wn_r_guard4")
                                                  (("2"
                                                    (expand "det")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "winding_number_rec")
                  (("2" (assert)
                    (("2" (expand "winding_number_contrib_real")
                      (("2" (expand "wn_r_guard1")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "winding_number_rec_real" 1)
          (("2" (lift-if 1)
            (("2" (split 1)
              (("1" (flatten)
                (("1" (expand "winding_number_rec" 1)
                  (("1" (assert)
                    (("1" (replace -3 :hide? t)
                      (("1" (expand "winding_number_contrib_real" 1)
                        (("1" (rewrite "quadrant__real.polycarp_eq")
                          (("1" (rewrite "quadrant__real.polycarp_eq")
                            (("1" (expand "-")
                              (("1"
                                (expand "wn_r_guard1")
                                (("1"
                                  (lift-if 1)
                                  (("1"
                                    (split 1)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "wn_r_guard2")
                                        (("2"
                                          (split 2)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "wn_r_guard3")
                                              (("2"
                                                (split 2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "wn_r_guard4")
                                                    (("2"
                                                      (expand "det")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "winding_number_rec" 2)
                  (("2" (assert)
                    (("2" (replace -2 :hide? t)
                      (("2" (expand "winding_number_contrib_real" 2)
                        (("2" (rewrite "quadrant__real.polycarp_eq")
                          (("2" (rewrite "quadrant__real.polycarp_eq")
                            (("2" (expand "-")
                              (("2"
                                (expand "wn_r_guard1")
                                (("2"
                                  (lift-if 2)
                                  (("2"
                                    (split 2)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "wn_r_guard2")
                                        (("2"
                                          (split 2)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "wn_r_guard3")
                                              (("2"
                                                (split 2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "wn_r_guard4")
                                                    (("2"
                                                      (expand "det")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (polygon_2D type-eq-decl nil acceptable_polygon "PolyCARP/")
    (winding_number_rec_real def-decl "int" winding_number_rec__real
     nil)
    (winding_number_rec def-decl "int" polygon_contain "PolyCARP/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (winding_number_contrib_real const-decl "int"
     winding_number_contrib__real nil)
    (wn_r_guard1 const-decl "bool" winding_number_contrib__real nil)
    (wn_r_guard2 const-decl "bool" winding_number_contrib__real nil)
    (wn_r_guard4 const-decl "bool" winding_number_contrib__real nil)
    (det const-decl "real" det_2D "vectors/")
    (wn_r_guard3 const-decl "bool" winding_number_contrib__real nil)
    (- const-decl "Vector" vectors_2D "vectors/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polycarp_eq formula-decl nil quadrant__real nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak)))

