(winding_number_contrib__trans_props
 (winding_number_contrib_stable_1 0
  (winding_number_contrib_stable_1-1 nil 3747131774
   ("" (skeep)
    (("" (skoletin*)
      ((""
        (with-labels (flatten)
         (("e_this_x" "e_this_y" "e_next_x" "e_next_y" "current path"
           nil "UNKNOWN")))
        (("" (expand "wn_trans_path1")
          (("" (expand "wn_trans_guard0")
            (("" (expand "wn_trans_guard1")
              ((""
                (with-labels (flatten)
                 (("qt this not warning" "qt next not warning"
                   "qt this = qt next" "UNKNOWN")))
                ((""
                  (lemma
                   "quadrant_trans_no_warning_implies_stability_on_the_original")
                  (("" (inst? -1 :where "qt this not warning")
                    (("" (inst? -1 :where "e_this_x")
                      (("" (inst? -1 :where "e_this_y")
                        (("" (assert)
                          (("" (assert)
                            (("" (flatten)
                              ((""
                                (lemma
                                 "quadrant_trans_no_warning_implies_stability_on_the_original")
                                ((""
                                  (inst?
                                   -1
                                   :where
                                   "qt next not warning")
                                  ((""
                                    (inst? -1 :where "e_next_x")
                                    ((""
                                      (inst? -1 :where "e_next_y")
                                      ((""
                                        (assert)
                                        ((""
                                          (flatten)
                                          ((""
                                            (expand "wn_r_path1")
                                            ((""
                                              (expand "wn_r_guard1")
                                              ((""
                                                (expand "wn_fp_path1")
                                                ((""
                                                  (expand
                                                   "wn_fp_guard1")
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (expand "=")
                                                      ((""
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FtoR const-decl "real" float "float/")
    (Dsub const-decl
     "{f: unb_double | closest_double?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754dp_sub "float/")
    (quadrant const-decl "int" quadrant nil)
    (wn_fp_path1 const-decl "bool" winding_number_contrib nil)
    (quadrant_real const-decl "int" quadrant__real nil)
    (wn_r_path1 const-decl "bool" winding_number_contrib__real nil)
    (quadrant_trans const-decl "Maybe[int]" quadrant__trans nil)
    (wn_trans_path1 const-decl "bool" winding_number_contrib__trans
     nil)
    (Maybe type-decl nil Maybe "structures/")
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wn_trans_guard1 const-decl "bool" winding_number_contrib__trans
     nil)
    (quadrant_trans_no_warning_implies_stability_on_the_original
     formula-decl nil quadrant__trans_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (orig_r_guard3 const-decl "bool" quadrant__real nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (wn_r_guard1 const-decl "bool" winding_number_contrib__real nil)
    (wn_fp_guard1 const-decl "bool" winding_number_contrib nil)
    (= const-decl "bool" quadrant__trans nil)
    (wn_trans_guard0 const-decl "bool" winding_number_contrib__trans
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (winding_number_contrib_stable_2 0
  (winding_number_contrib_stable_2-1 nil 3747131801
   ("" (skeep)
    (("" (skoletin*)
      (("" (hide -)
        ((""
          (with-labels (flatten)
           (("this_x error" "this_y error" "next_x error"
             "next_y error" nil "real path2 and fp paht2 are valid"
             "UNKNOWN")))
          (("" (expand "wn_trans_path2")
            (("" (expand "wn_trans_guard0")
              (("" (expand "wn_trans_guard1")
                (("" (expand "wn_trans_guard2")
                  (("" (flatten)
                    ((""
                      (lemma
                       "quadrant_trans_no_warning_implies_stability_on_the_original")
                      (("" (inst? -1 :where "this_x error")
                        (("" (inst? -1 :where "this_y error")
                          (("" (beta)
                            (("" (split -1)
                              (("1"
                                (lemma
                                 "quadrant_trans_no_warning_implies_stability_on_the_original")
                                (("1"
                                  (inst? -1 :where "next_x error")
                                  (("1"
                                    (inst? -1 :where "next_y error")
                                    (("1"
                                      (beta)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (with-labels
                                             (split
                                              "real path2 and fp paht2 are valid")
                                             (("real path2 is valid")
                                              ("fp paht2 is valid")))
                                            (("1"
                                              (expand "wn_r_path2")
                                              (("1"
                                                (split
                                                 "real path2 is valid")
                                                (("1"
                                                  (expand
                                                   "wn_r_guard2")
                                                  (("1"
                                                    (expand "=")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "wn_r_guard1")
                                                  (("2"
                                                    (expand "=")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (use
                                                         "Maybe_Some_extensionality[int]")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "wn_fp_path2")
                                              (("2"
                                                (split
                                                 "fp paht2 is valid")
                                                (("1"
                                                  (expand
                                                   "wn_fp_guard2")
                                                  (("1"
                                                    (expand "=")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "wn_fp_guard1")
                                                  (("2"
                                                    (expand "=")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (use
                                                         "Maybe_Some_extensionality[int]")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3" (propax) nil nil)
                                         ("4" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil)
                               ("3" (propax) nil nil)
                               ("4" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FtoR const-decl "real" float "float/")
    (Dsub const-decl
     "{f: unb_double | closest_double?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754dp_sub "float/")
    (quadrant const-decl "int" quadrant nil)
    (wn_fp_path2 const-decl "bool" winding_number_contrib nil)
    (quadrant_real const-decl "int" quadrant__real nil)
    (wn_r_path2 const-decl "bool" winding_number_contrib__real nil)
    (quadrant_trans const-decl "Maybe[int]" quadrant__trans nil)
    (wn_trans_path2 const-decl "bool" winding_number_contrib__trans
     nil)
    (Maybe type-decl nil Maybe "structures/")
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wn_trans_guard0 const-decl "bool" winding_number_contrib__trans
     nil)
    (wn_trans_guard2 const-decl "bool" winding_number_contrib__trans
     nil)
    (quadrant_trans_no_warning_implies_stability_on_the_original
     formula-decl nil quadrant__trans_props nil)
    (wn_fp_guard1 const-decl "bool" winding_number_contrib nil)
    (wn_fp_guard2 const-decl "bool" winding_number_contrib nil)
    (wn_r_guard1 const-decl "bool" winding_number_contrib__real nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe_Some_extensionality formula-decl nil Maybe "structures/")
    (wn_r_guard2 const-decl "bool" winding_number_contrib__real nil)
    (orig_r_guard3 const-decl "bool" quadrant__real nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (nil application-judgement "below(m)" mod nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "bool" quadrant__trans nil)
    (wn_trans_guard1 const-decl "bool" winding_number_contrib__trans
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (winding_number_contrib_stable_3 0
  (winding_number_contrib_stable_3-1 nil 3747132162
   ("" (skeep)
    (("" (skoletin*)
      (("" (hide -)
        ((""
          (with-labels (flatten)
           (("this_x error" "this_y error" "next_x error"
             "next_y error" nil "real path3 and fp paht3 are valid"
             "UNKNOWN")))
          (("" (expand "wn_trans_path3")
            (("" (expand "wn_trans_guard0")
              (("" (expand "wn_trans_guard1")
                (("" (expand "wn_trans_guard2")
                  (("" (expand "wn_trans_guard3")
                    (("" (flatten)
                      ((""
                        (lemma
                         "quadrant_trans_no_warning_implies_stability_on_the_original")
                        (("" (inst? -1 :where "this_x error")
                          (("" (inst? -1 :where "this_y error")
                            (("" (beta)
                              ((""
                                (split -1)
                                (("1"
                                  (lemma
                                   "quadrant_trans_no_warning_implies_stability_on_the_original")
                                  (("1"
                                    (inst? -1 :where "next_x error")
                                    (("1"
                                      (inst? -1 :where "next_y error")
                                      (("1"
                                        (beta)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (with-labels
                                               (split
                                                "real path3 and fp paht3 are valid")
                                               (("real path3 is valid")
                                                ("fp paht3 is valid")))
                                              (("1"
                                                (expand "wn_r_path3")
                                                (("1"
                                                  (split
                                                   "real path3 is valid")
                                                  (("1"
                                                    (expand
                                                     "wn_r_guard3")
                                                    (("1"
                                                      (expand "=")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "wn_r_guard2")
                                                    (("2"
                                                      (expand "=")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand
                                                     "wn_r_guard1")
                                                    (("3"
                                                      (expand "=")
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (use
                                                           "Maybe_Some_extensionality[int]")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "wn_fp_path3")
                                                (("2"
                                                  (split
                                                   "fp paht3 is valid")
                                                  (("1"
                                                    (expand
                                                     "wn_fp_guard3")
                                                    (("1"
                                                      (expand "=")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "wn_fp_guard2")
                                                    (("2"
                                                      (expand "=")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand
                                                     "wn_fp_guard1")
                                                    (("3"
                                                      (expand "=")
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (use
                                                           "Maybe_Some_extensionality[int]")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3" (propax) nil nil)
                                           ("4" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil)
                                 ("3" (propax) nil nil)
                                 ("4" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FtoR const-decl "real" float "float/")
    (Dsub const-decl
     "{f: unb_double | closest_double?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754dp_sub "float/")
    (quadrant const-decl "int" quadrant nil)
    (wn_fp_path3 const-decl "bool" winding_number_contrib nil)
    (quadrant_real const-decl "int" quadrant__real nil)
    (wn_r_path3 const-decl "bool" winding_number_contrib__real nil)
    (quadrant_trans const-decl "Maybe[int]" quadrant__trans nil)
    (wn_trans_path3 const-decl "bool" winding_number_contrib__trans
     nil)
    (Maybe type-decl nil Maybe "structures/")
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wn_trans_guard0 const-decl "bool" winding_number_contrib__trans
     nil)
    (wn_trans_guard2 const-decl "bool" winding_number_contrib__trans
     nil)
    (= const-decl "bool" quadrant__trans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "below(m)" mod nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (orig_r_guard3 const-decl "bool" quadrant__real nil)
    (wn_r_guard3 const-decl "bool" winding_number_contrib__real nil)
    (wn_r_guard2 const-decl "bool" winding_number_contrib__real nil)
    (Maybe_Some_extensionality formula-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (wn_r_guard1 const-decl "bool" winding_number_contrib__real nil)
    (wn_fp_guard3 const-decl "bool" winding_number_contrib nil)
    (wn_fp_guard2 const-decl "bool" winding_number_contrib nil)
    (wn_fp_guard1 const-decl "bool" winding_number_contrib nil)
    (quadrant_trans_no_warning_implies_stability_on_the_original
     formula-decl nil quadrant__trans_props nil)
    (wn_trans_guard3 const-decl "bool" winding_number_contrib__trans
     nil)
    (wn_trans_guard1 const-decl "bool" winding_number_contrib__trans
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (winding_number_contrib_stable_4 0
  (winding_number_contrib_stable_4-1 nil 3747133399
   ("" (skeep)
    (("" (skoletin*)
      (("" (hide -)
        ((""
          (with-labels (flatten)
           (("this_x error" "this_y error" "next_x error"
             "next_y error" "det error" nil
             "real path4 and fp paht4 are valid" "UNKNOWN")))
          (("" (expand "wn_trans_path4")
            (("" (expand "wn_trans_guard0")
              (("" (expand "wn_trans_guard1")
                (("" (expand "wn_trans_guard2")
                  (("" (expand "wn_trans_guard3")
                    (("" (expand "wn_trans_guard4")
                      ((""
                        (with-labels (flatten)
                         ((nil nil nil nil nil
                           "det_fp is at most -e_det" "UNKNOWN")))
                        ((""
                          (lemma
                           "quadrant_trans_no_warning_implies_stability_on_the_original")
                          (("" (inst? -1 :where "this_x error")
                            (("" (inst? -1 :where "this_y error")
                              ((""
                                (beta)
                                ((""
                                  (split -1)
                                  (("1"
                                    (lemma
                                     "quadrant_trans_no_warning_implies_stability_on_the_original")
                                    (("1"
                                      (inst? -1 :where "next_x error")
                                      (("1"
                                        (inst?
                                         -1
                                         :where
                                         "next_y error")
                                        (("1"
                                          (beta)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (with-labels
                                                 (split
                                                  "real path4 and fp paht4 are valid")
                                                 (("real path4 is valid")
                                                  ("fp paht4 is valid")))
                                                (("1"
                                                  (expand "wn_r_path4")
                                                  (("1"
                                                    (split
                                                     "real path4 is valid")
                                                    (("1"
                                                      (expand
                                                       "wn_r_guard4")
                                                      (("1"
                                                        (hide-all-but
                                                         ("det error"
                                                          "det_fp is at most -e_det"
                                                          "real path4 is valid"))
                                                        (("1"
                                                          (use
                                                           "var_le_0_trans_real")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "wn_r_guard3")
                                                      (("2"
                                                        (expand "=")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (use
                                                             "Maybe_Some_extensionality[int]")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "wn_r_guard2")
                                                      (("3"
                                                        (expand "=")
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (use
                                                             "Maybe_Some_extensionality[int]")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (expand
                                                       "wn_r_guard1")
                                                      (("4"
                                                        (expand "=")
                                                        (("4"
                                                          (flatten)
                                                          (("4"
                                                            (use
                                                             "Maybe_Some_extensionality[int]")
                                                            (("4"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "wn_fp_path4")
                                                  (("2"
                                                    (split
                                                     "fp paht4 is valid")
                                                    (("1"
                                                      (expand
                                                       "wn_fp_guard4")
                                                      (("1"
                                                        (hide-all-but
                                                         ("fp paht4 is valid"
                                                          "det_fp is at most -e_det"))
                                                        (("1"
                                                          (use
                                                           "greatest_fp_le_nonpos_is_nonpos")
                                                          (("1"
                                                            (apply-transitivity
                                                             1
                                                             -1
                                                             -2)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "wn_fp_guard3")
                                                      (("2"
                                                        (expand "=")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "wn_fp_guard2")
                                                      (("3"
                                                        (expand "=")
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (use
                                                             "Maybe_Some_extensionality[int]")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (expand
                                                       "wn_fp_guard1")
                                                      (("4"
                                                        (expand "=")
                                                        (("4"
                                                          (flatten)
                                                          (("4"
                                                            (use
                                                             "Maybe_Some_extensionality[int]")
                                                            (("4"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3" (propax) nil nil)
                                             ("4" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil)
                                   ("3" (propax) nil nil)
                                   ("4" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FtoR const-decl "real" float "float/")
    (Dsub const-decl
     "{f: unb_double | closest_double?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754dp_sub "float/")
    (quadrant const-decl "int" quadrant nil)
    (wn_fp_path4 const-decl "bool" winding_number_contrib nil)
    (quadrant_real const-decl "int" quadrant__real nil)
    (wn_r_path4 const-decl "bool" winding_number_contrib__real nil)
    (quadrant_trans const-decl "Maybe[int]" quadrant__trans nil)
    (wn_trans_path4 const-decl "bool" winding_number_contrib__trans
     nil)
    (Maybe type-decl nil Maybe "structures/")
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (wn_trans_guard0 const-decl "bool" winding_number_contrib__trans
     nil)
    (wn_trans_guard2 const-decl "bool" winding_number_contrib__trans
     nil)
    (wn_trans_guard4 const-decl "bool" winding_number_contrib__trans
     nil)
    (quadrant_trans_no_warning_implies_stability_on_the_original
     formula-decl nil quadrant__trans_props nil)
    (wn_fp_guard1 const-decl "bool" winding_number_contrib nil)
    (wn_fp_guard2 const-decl "bool" winding_number_contrib nil)
    (wn_fp_guard3 const-decl "bool" winding_number_contrib nil)
    (wn_fp_guard4 const-decl "bool" winding_number_contrib nil)
    (greatest_fp_le_nonpos_is_nonpos formula-decl nil
     roundoff_error_props "float/")
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (Fle_transitive formula-decl nil float "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (greatest_fp_le const-decl "{X: unb_double |
         DtoR(X) <= x AND
          (FORALL Y: DtoR(Y) <= x IMPLIES DtoR(Y) <= DtoR(X))}"
     roundoff_error_props "float/")
    (transitive? const-decl "bool" relations nil)
    (wn_r_guard1 const-decl "bool" winding_number_contrib__real nil)
    (wn_r_guard2 const-decl "bool" winding_number_contrib__real nil)
    (wn_r_guard3 const-decl "bool" winding_number_contrib__real nil)
    (orig_r_guard3 const-decl "bool" quadrant__real nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (nil application-judgement "below(m)" mod nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe_Some_extensionality formula-decl nil Maybe "structures/")
    (= const-decl "bool" quadrant__trans nil)
    (wn_r_guard4 const-decl "bool" winding_number_contrib__real nil)
    (var_le_0_trans_real formula-decl nil roundoff_error_props
     "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (wn_trans_guard3 const-decl "bool" winding_number_contrib__trans
     nil)
    (wn_trans_guard1 const-decl "bool" winding_number_contrib__trans
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (winding_number_contrib_stable_5 0
  (winding_number_contrib_stable_5-1 nil 3747133948
   ("" (skeep)
    (("" (skoletin*)
      (("" (hide -)
        ((""
          (with-labels (flatten)
           (("this_x error" "this_y error" "next_x error"
             "next_y error" "det error" nil
             "real path5 and fp paht5 are valid" "UNKNOWN")))
          (("" (expand "wn_trans_path5")
            (("" (expand "wn_trans_guard0")
              (("" (expand "wn_trans_guard1")
                (("" (expand "wn_trans_guard2")
                  (("" (expand "wn_trans_guard3")
                    (("" (expand "wn_trans_guard4")
                      (("" (expand "wn_trans_guard5")
                        ((""
                          (with-labels (flatten)
                           ((nil nil nil nil nil
                             "det_fp is greater than -e_det"
                             "det_fp is greater than e_det"
                             "UNKNOWN")))
                          ((""
                            (lemma
                             "quadrant_trans_no_warning_implies_stability_on_the_original")
                            (("" (inst? -1 :where "this_x error")
                              ((""
                                (hide "this_x error")
                                ((""
                                  (inst? -1 :where "this_y error")
                                  ((""
                                    (hide "this_y error")
                                    ((""
                                      (beta)
                                      ((""
                                        (split -1)
                                        (("1"
                                          (lemma
                                           "quadrant_trans_no_warning_implies_stability_on_the_original")
                                          (("1"
                                            (inst?
                                             -1
                                             :where
                                             "next_x error")
                                            (("1"
                                              (hide "next_x error")
                                              (("1"
                                                (inst?
                                                 -1
                                                 :where
                                                 "next_y error")
                                                (("1"
                                                  (hide "next_y error")
                                                  (("1"
                                                    (beta)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (with-labels
                                                           (split
                                                            "real path5 and fp paht5 are valid")
                                                           (("real path5 is valid")
                                                            ("fp paht5 is valid")))
                                                          (("1"
                                                            (expand
                                                             "wn_r_path5")
                                                            (("1"
                                                              (split
                                                               "real path5 is valid")
                                                              (("1"
                                                                (expand
                                                                 "wn_r_guard4")
                                                                (("1"
                                                                  (hide-all-but
                                                                   ("det_fp is greater than e_det"
                                                                    "det error"
                                                                    "real path5 is valid"))
                                                                  (("1"
                                                                    (use
                                                                     "var_gt_error__var_r_gt_0")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "wn_r_guard3")
                                                                (("2"
                                                                  (expand
                                                                   "=")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (use
                                                                       "Maybe_Some_extensionality[int]")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "wn_r_guard2")
                                                                (("3"
                                                                  (expand
                                                                   "=")
                                                                  (("3"
                                                                    (flatten)
                                                                    (("3"
                                                                      (use
                                                                       "Maybe_Some_extensionality[int]")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (expand
                                                                 "wn_r_guard1")
                                                                (("4"
                                                                  (expand
                                                                   "=")
                                                                  (("4"
                                                                    (flatten)
                                                                    (("4"
                                                                      (use
                                                                       "Maybe_Some_extensionality[int]")
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "wn_fp_path5")
                                                            (("2"
                                                              (split
                                                               "fp paht5 is valid")
                                                              (("1"
                                                                (expand
                                                                 "wn_fp_guard4")
                                                                (("1"
                                                                  (hide-all-but
                                                                   ("fp paht5 is valid"
                                                                    "det_fp is greater than e_det"))
                                                                  (("1"
                                                                    (use
                                                                     "smallest_fp_ge_nonneg_is_nonneg")
                                                                    (("1"
                                                                      (rewrite
                                                                       "leq_def")
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (use
                                                                           "Flt_transitive")
                                                                          (("1"
                                                                            (expand
                                                                             "transitive?")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "RtoD(0)"
                                                                               "smallest_fp_ge(e_DET)"
                                                                               "DET_1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (use
                                                                                   "Fle_neg_Flt")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -1
                                                                           :dir
                                                                           rl
                                                                           :hide?
                                                                           r)
                                                                          (("2"
                                                                            (rewrite
                                                                             "Fle_neg_Flt")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "wn_fp_guard3")
                                                                (("2"
                                                                  (expand
                                                                   "=")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (use
                                                                       "Maybe_Some_extensionality[int]")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "wn_fp_guard2")
                                                                (("3"
                                                                  (expand
                                                                   "=")
                                                                  (("3"
                                                                    (flatten)
                                                                    (("3"
                                                                      (use
                                                                       "Maybe_Some_extensionality[int]")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (expand
                                                                 "wn_fp_guard1")
                                                                (("4"
                                                                  (expand
                                                                   "=")
                                                                  (("4"
                                                                    (flatten)
                                                                    (("4"
                                                                      (use
                                                                       "Maybe_Some_extensionality[int]")
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (reveal
                                                         "next_x error")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (reveal
                                                         "next_y error")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (reveal "this_x error")
                                          (("2" (propax) nil nil))
                                          nil)
                                         ("3"
                                          (reveal "this_y error")
                                          (("3" (propax) nil nil))
                                          nil)
                                         ("4" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FtoR const-decl "real" float "float/")
    (Dsub const-decl
     "{f: unb_double | closest_double?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754dp_sub "float/")
    (quadrant const-decl "int" quadrant nil)
    (wn_fp_path5 const-decl "bool" winding_number_contrib nil)
    (quadrant_real const-decl "int" quadrant__real nil)
    (wn_r_path5 const-decl "bool" winding_number_contrib__real nil)
    (quadrant_trans const-decl "Maybe[int]" quadrant__trans nil)
    (wn_trans_path5 const-decl "bool" winding_number_contrib__trans
     nil)
    (Maybe type-decl nil Maybe "structures/")
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (wn_trans_guard0 const-decl "bool" winding_number_contrib__trans
     nil)
    (wn_trans_guard2 const-decl "bool" winding_number_contrib__trans
     nil)
    (wn_trans_guard4 const-decl "bool" winding_number_contrib__trans
     nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (var_gt_error__var_r_gt_0 formula-decl nil roundoff_error_props
     "float/")
    (wn_r_guard4 const-decl "bool" winding_number_contrib__real nil)
    (= const-decl "bool" quadrant__trans nil)
    (Maybe_Some_extensionality formula-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "below(m)" mod nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (orig_r_guard3 const-decl "bool" quadrant__real nil)
    (wn_r_guard3 const-decl "bool" winding_number_contrib__real nil)
    (wn_r_guard2 const-decl "bool" winding_number_contrib__real nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (wn_r_guard1 const-decl "bool" winding_number_contrib__real nil)
    (smallest_fp_ge const-decl "{X: unb_double |
         x <= DtoR(X) AND
          (FORALL Y: x <= DtoR(Y) IMPLIES DtoR(X) <= DtoR(Y))}"
     roundoff_error_props "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (leq_def formula-decl nil ieee754dp "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (Flt_transitive formula-decl nil float "float/")
    (Fle_neg_Flt formula-decl nil float "float/")
    (transitive? const-decl "bool" relations nil)
    (smallest_fp_ge_nonneg_is_nonneg formula-decl nil
     roundoff_error_props "float/")
    (wn_fp_guard4 const-decl "bool" winding_number_contrib nil)
    (wn_fp_guard3 const-decl "bool" winding_number_contrib nil)
    (wn_fp_guard2 const-decl "bool" winding_number_contrib nil)
    (wn_fp_guard1 const-decl "bool" winding_number_contrib nil)
    (quadrant_trans_no_warning_implies_stability_on_the_original
     formula-decl nil quadrant__trans_props nil)
    (wn_trans_guard5 const-decl "bool" winding_number_contrib__trans
     nil)
    (wn_trans_guard3 const-decl "bool" winding_number_contrib__trans
     nil)
    (wn_trans_guard1 const-decl "bool" winding_number_contrib__trans
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (winding_number_contrib_trans_no_warning_implies_stability_on_the_original
  0
  (winding_number_contrib_trans_no_warning_implies_stability_on_the_original-2
   nil 3747131841
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (expand "winding_number_contrib_trans")
          (("" (lift-if -6)
            (("" (split -6)
              (("1" (flatten)
                (("1" (split -2)
                  (("1" (flatten)
                    (("1" (lemma "winding_number_contrib_stable_1")
                      (("1" (inst? -1 :where -2)
                        (("1" (insteep -1)
                          (("1" (assert)
                            (("1" (assert)
                              (("1"
                                (expand "wn_trans_path1")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "wn_r_path1")
                                    (("1"
                                      (expand "wn_fp_path1")
                                      (("1"
                                        (expand
                                         "winding_number_contrib")
                                        (("1"
                                          (expand
                                           "winding_number_contrib_real")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (lemma "winding_number_contrib_stable_2")
                          (("1" (insteep -1)
                            (("1" (assert)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "wn_trans_path2")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "wn_r_path2")
                                      (("1"
                                        (expand "wn_fp_path2")
                                        (("1"
                                          (expand
                                           "winding_number_contrib")
                                          (("1"
                                            (expand
                                             "winding_number_contrib_real")
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1"
                              (lemma "winding_number_contrib_stable_3")
                              (("1"
                                (insteep -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "wn_trans_path3")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "wn_r_path3")
                                          (("1"
                                            (expand "wn_fp_path3")
                                            (("1"
                                              (expand
                                               "winding_number_contrib")
                                              (("1"
                                                (expand
                                                 "winding_number_contrib_real")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma
                                   "winding_number_contrib_stable_4")
                                  (("1"
                                    (insteep -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "wn_trans_guard4")
                                          (("1"
                                            (expand "wn_trans_path4")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "wn_r_path4")
                                                (("1"
                                                  (expand
                                                   "wn_fp_path4")
                                                  (("1"
                                                    (expand
                                                     "winding_number_contrib")
                                                    (("1"
                                                      (expand
                                                       "winding_number_contrib_real")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (lemma
                                       "winding_number_contrib_stable_5")
                                      (("1"
                                        (insteep -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "wn_trans_guard5")
                                              (("1"
                                                (expand
                                                 "wn_trans_path5")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "wn_r_path5")
                                                    (("1"
                                                      (expand
                                                       "wn_fp_path5")
                                                      (("1"
                                                        (expand
                                                         "winding_number_contrib")
                                                        (("1"
                                                          (expand
                                                           "winding_number_contrib_real")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (winding_number_contrib_trans const-decl "Maybe[int]"
     winding_number_contrib__trans nil)
    (winding_number_contrib_stable_1 formula-decl nil
     winding_number_contrib__trans_props nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (wn_fp_path1 const-decl "bool" winding_number_contrib nil)
    (winding_number_contrib_real const-decl "int"
     winding_number_contrib__real nil)
    (maybe_int_id_int_l formula-decl nil quadrant__trans nil)
    (winding_number_contrib const-decl "int" winding_number_contrib
     nil)
    (wn_r_path1 const-decl "bool" winding_number_contrib__real nil)
    (wn_trans_path1 const-decl "bool" winding_number_contrib__trans
     nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (orig_r_guard3 const-decl "bool" quadrant__real nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (winding_number_contrib_stable_2 formula-decl nil
     winding_number_contrib__trans_props nil)
    (wn_trans_path2 const-decl "bool" winding_number_contrib__trans
     nil)
    (wn_r_path2 const-decl "bool" winding_number_contrib__real nil)
    (wn_fp_path2 const-decl "bool" winding_number_contrib nil)
    (winding_number_contrib_stable_3 formula-decl nil
     winding_number_contrib__trans_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (wn_trans_path3 const-decl "bool" winding_number_contrib__trans
     nil)
    (wn_r_path3 const-decl "bool" winding_number_contrib__real nil)
    (wn_fp_path3 const-decl "bool" winding_number_contrib nil)
    (winding_number_contrib_stable_4 formula-decl nil
     winding_number_contrib__trans_props nil)
    (wn_trans_guard4 const-decl "bool" winding_number_contrib__trans
     nil)
    (wn_fp_path4 const-decl "bool" winding_number_contrib nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (wn_r_path4 const-decl "bool" winding_number_contrib__real nil)
    (wn_trans_path4 const-decl "bool" winding_number_contrib__trans
     nil)
    (winding_number_contrib_stable_5 formula-decl nil
     winding_number_contrib__trans_props nil)
    (wn_trans_guard5 const-decl "bool" winding_number_contrib__trans
     nil)
    (wn_fp_path5 const-decl "bool" winding_number_contrib nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (wn_r_path5 const-decl "bool" winding_number_contrib__real nil)
    (wn_trans_path5 const-decl "bool" winding_number_contrib__trans
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (winding_number_contrib_trans_no_warning_implies_stability_on_the_original-1
   nil 3747045912
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (expand "winding_number_contrib_trans")
          (("" (replace -20 :dir rl)
            (("" (replace -18 :dir rl)
              (("" (replace -16 :dir rl)
                (("" (replace -14 :dir rl)
                  (("" (replace -12 :dir rl)
                    (("" (replace -10 :dir rl)
                      (("" (replace -8 :dir rl)
                        (("" (lift-if -6)
                          (("" (split -6)
                            (("1" (flatten)
                              (("1"
                                (split -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma "quadrant_stable_1")
                                    (("1"
                                      (inst? -1 :where -2)
                                      (("1"
                                        (insteep -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "wn_trans_path1")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "wn_r_path1")
                                                  (("1"
                                                    (expand
                                                     "wn_fp_path1")
                                                    (("1"
                                                      (expand
                                                       "winding_number_contrib")
                                                      (("1"
                                                        (expand
                                                         "winding_number_contrib_real")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1" (postpone) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1" (postpone) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (postpone)
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (wn_unstability_on_the_original_implies_warning_on_the_transformed 0
  (wn_unstability_on_the_original_implies_warning_on_the_transformed-1
   nil 3747156983
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (expand "winding_number_contrib_trans")
          (("" (lift-if 2)
            (("" (split 2)
              (("1" (flatten)
                (("1" (expand "wn_trans_guard0")
                  (("1"
                    (with-labels (flatten)
                     (("quadrant_trans_is_not_warning THIS"
                       "quadrant_trans_is_not_warning NEXT")))
                    (("1" (label "wn_trans" 1)
                      (("1" (hide "wn_trans" 1)
                        (("1" (replace -21 :dir rl)
                          (("1" (replace -19 :dir rl)
                            (("1" (replace -17 :dir rl)
                              (("1"
                                (replace -15 :dir rl)
                                (("1"
                                  (case
                                   "quadrant_trans(e_THIS_x, e_THIS_y)(THIS_x_1, THIS_y_1)::int = quadrant(THIS_x_1, THIS_y_1) AND quadrant_trans(e_THIS_x, e_THIS_y)(THIS_x_1, THIS_y_1)::int = quadrant_real(r_THIS_x_1, r_THIS_y_1)")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide
                                       "quadrant_trans_is_not_warning THIS")
                                      (("1"
                                        (case
                                         "quadrant_trans(e_NEXT_x, e_NEXT_y)(NEXT_x_1, NEXT_y_1)::int = quadrant(NEXT_x_1, NEXT_y_1) AND quadrant_trans(e_NEXT_x, e_NEXT_y)(NEXT_x_1, NEXT_y_1)::int = quadrant_real(r_NEXT_x_1, r_NEXT_y_1)")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide
                                             "quadrant_trans_is_not_warning NEXT")
                                            (("1"
                                              (expand
                                               "winding_number_contrib")
                                              (("1"
                                                (lift-if 1)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "winding_number_contrib_real")
                                                      (("1"
                                                        (lift-if 1)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split 2)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "wn_r_guard1")
                                                                  (("1"
                                                                    (expand
                                                                     "wn_fp_guard1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split
                                                                   2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "wn_fp_guard1")
                                                                      (("1"
                                                                        (expand
                                                                         "wn_r_guard1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       2)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "wn_r_guard1")
                                                                          (("1"
                                                                            (expand
                                                                             "wn_fp_guard1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "wn_fp_guard1")
                                                                          (("2"
                                                                            (expand
                                                                             "wn_r_guard1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "winding_number_contrib_real")
                                                          (("1"
                                                            (lift-if 1)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "wn_r_guard1")
                                                                  (("1"
                                                                    (expand
                                                                     "wn_fp_guard1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split
                                                                   2)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       2)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "wn_fp_guard2")
                                                                          (("1"
                                                                            (expand
                                                                             "wn_r_guard2")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split
                                                                           2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (expand
                                                                               "wn_fp_guard2")
                                                                              (("1"
                                                                                (expand
                                                                                 "wn_r_guard2")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "wn_r_guard2")
                                                                              (("2"
                                                                                (expand
                                                                                 "wn_fp_guard2")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "winding_number_contrib_real")
                                                              (("1"
                                                                (lift-if
                                                                 1)
                                                                (("1"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "wn_r_guard1")
                                                                      (("1"
                                                                        (expand
                                                                         "wn_fp_guard1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (split
                                                                       2)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "wn_r_guard2")
                                                                          (("1"
                                                                            (expand
                                                                             "wn_fp_guard2")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split
                                                                           2)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               2)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "wn_fp_guard3")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "wn_r_guard3")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "wn_r_guard3")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "wn_fp_guard3")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "winding_number_contrib_real"
                                                               :assert?
                                                               none)
                                                              (("2"
                                                                (beta
                                                                 2)
                                                                (("2"
                                                                  (reveal
                                                                   "wn_trans")
                                                                  (("2"
                                                                    (replace
                                                                     -23
                                                                     :dir
                                                                     rl
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (replace
                                                                       -22
                                                                       :dir
                                                                       rl
                                                                       :hide?
                                                                       t)
                                                                      (("2"
                                                                        (replace
                                                                         -21
                                                                         :dir
                                                                         rl
                                                                         :hide?
                                                                         t)
                                                                        (("2"
                                                                          (replace
                                                                           -20
                                                                           :dir
                                                                           rl
                                                                           :hide?
                                                                           t)
                                                                          (("2"
                                                                            (replace
                                                                             -19
                                                                             :dir
                                                                             rl
                                                                             :hide?
                                                                             t)
                                                                            (("2"
                                                                              (replace
                                                                               -18
                                                                               :dir
                                                                               rl
                                                                               :hide?
                                                                               t)
                                                                              (("2"
                                                                                (replace
                                                                                 -17
                                                                                 :dir
                                                                                 rl
                                                                                 :hide?
                                                                                 t)
                                                                                (("2"
                                                                                  (replace
                                                                                   -16
                                                                                   :dir
                                                                                   rl
                                                                                   :hide?
                                                                                   t)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -15
                                                                                     :dir
                                                                                     rl
                                                                                     :hide?
                                                                                     t)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -14
                                                                                       :dir
                                                                                       rl
                                                                                       :hide?
                                                                                       t)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -13
                                                                                         :dir
                                                                                         rl
                                                                                         :hide?
                                                                                         t)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -12
                                                                                           :dir
                                                                                           rl
                                                                                           :hide?
                                                                                           t)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -11
                                                                                             :dir
                                                                                             rl
                                                                                             :hide?
                                                                                             t)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -10
                                                                                               :dir
                                                                                               rl
                                                                                               :hide?
                                                                                               t)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 "wn_trans")
                                                                                                (("2"
                                                                                                  (lift-if
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "wn_r_guard1")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "wn_fp_guard1")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "wn_r_guard2")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "wn_fp_guard2")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "wn_fp_guard3")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "wn_r_guard3")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (reveal
                                                                                                                         "wn_trans")
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "wn_trans_guard1")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "wn_fp_guard1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 2)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "wn_trans_guard2")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "wn_fp_guard2")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "wn_trans_guard3")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "wn_r_guard3")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "wn_trans_guard4")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "wn_fp_guard4")
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "wn_r_guard4")
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "var_le_0_trans_real")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?
                                                                                                                                                     -1
                                                                                                                                                     :where
                                                                                                                                                     -12)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (split
                                                                                                                                             2)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "wn_trans_guard5")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "wn_fp_guard4")
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "var_fp_gt_err__var_fp_gt_0")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?
                                                                                                                                                       -1
                                                                                                                                                       :where
                                                                                                                                                       -12)
                                                                                                                                                      (("1"
                                                                                                                                                        (split
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (rewrite
                                                                                                                                                           "Fle_neg_Flt")
                                                                                                                                                          nil
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (propax)
                                                                                                                                                          nil
                                                                                                                                                          nil)
                                                                                                                                                         ("3"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "wn_r_guard1")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "wn_fp_guard1")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (lift-if
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "wn_r_guard1")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "wn_fp_guard1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "wn_r_guard2")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "wn_fp_guard2")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "wn_fp_guard3")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "wn_r_guard3")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (reveal
                                                                                                                           "wn_trans")
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "wn_trans_guard1")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "wn_fp_guard1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (split
                                                                                                                                   2)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "wn_trans_guard2")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "wn_fp_guard2")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (split
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "wn_trans_guard3")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "wn_r_guard3")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (flatten)
                                                                                                                                        (("2"
                                                                                                                                          (split
                                                                                                                                           2)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "wn_trans_guard4")
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "wn_fp_guard4")
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "var_le_0_trans_implies_var_not_lt_0_orig")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?
                                                                                                                                                     -1
                                                                                                                                                     :where
                                                                                                                                                     -12)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (rewrite
                                                                                                                                                         "Fle_neg_Flt"
                                                                                                                                                         10
                                                                                                                                                         :dir
                                                                                                                                                         rl)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (split
                                                                                                                                               2)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "wn_trans_guard5")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "wn_fp_guard4")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "wn_r_guard4")
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "var_gt_error__var_r_gt_0")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?
                                                                                                                                                           -1
                                                                                                                                                           :where
                                                                                                                                                           -12)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (flatten)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           "unstability_on_the_original_implies_warning_on_the_transformed")
                                          (("2"
                                            (inst?
                                             -1
                                             :where
                                             "quadrant_trans_is_not_warning NEXT")
                                            (("2"
                                              (inst
                                               -1
                                               "r_NEXT_x_1"
                                               "r_NEXT_y_1")
                                              (("2"
                                                (lemma
                                                 "quadrant_trans_no_warning_implies_stability_on_the_original")
                                                (("2"
                                                  (inst?
                                                   -1
                                                   :where
                                                   "quadrant_trans_is_not_warning NEXT")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "r_NEXT_x_1"
                                                     "r_NEXT_y_1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "=")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (assert) nil nil)
                                         ("4" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "quadrant_trans_no_warning_implies_stability_on_the_original")
                                    (("2"
                                      (inst?
                                       -1
                                       :where
                                       "quadrant_trans_is_not_warning THIS")
                                      (("2"
                                        (inst
                                         -1
                                         "r_THIS_x_1"
                                         "r_THIS_y_1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "=")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (assert) nil nil)
                                   ("4" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FtoR const-decl "real" float "float/")
    (Dsub const-decl
     "{f: unb_double | closest_double?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754dp_sub "float/")
    (winding_number_contrib_trans const-decl "Maybe[int]"
     winding_number_contrib__trans nil)
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (Maybe type-decl nil Maybe "structures/")
    (winding_number_contrib_real const-decl "int"
     winding_number_contrib__real nil)
    (winding_number_contrib const-decl "int" winding_number_contrib
     nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/= const-decl "boolean" notequal nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (wn_trans_guard0 const-decl "bool" winding_number_contrib__trans
     nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (quadrant_trans const-decl "Maybe[int]" quadrant__trans nil)
    (quadrant const-decl "int" quadrant nil)
    (quadrant_real const-decl "int" quadrant__real nil)
    (unstability_on_the_original_implies_warning_on_the_transformed
     formula-decl nil quadrant__trans_props nil)
    (= const-decl "bool" quadrant__trans nil)
    (quadrant_trans_no_warning_implies_stability_on_the_original
     formula-decl nil quadrant__trans_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (wn_r_guard1 const-decl "bool" winding_number_contrib__real nil)
    (orig_r_guard3 const-decl "bool" quadrant__real nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (wn_fp_guard1 const-decl "bool" winding_number_contrib nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (wn_fp_guard2 const-decl "bool" winding_number_contrib nil)
    (nil application-judgement "below(m)" mod nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wn_r_guard2 const-decl "bool" winding_number_contrib__real nil)
    (wn_fp_guard3 const-decl "bool" winding_number_contrib nil)
    (wn_r_guard3 const-decl "bool" winding_number_contrib__real nil)
    (var_le_0_trans_implies_var_not_lt_0_orig formula-decl nil
     roundoff_error_props "float/")
    (var_gt_error__var_r_gt_0 formula-decl nil roundoff_error_props
     "float/")
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (Fle_neg_Flt formula-decl nil float "float/")
    (var_fp_gt_err__var_fp_gt_0 formula-decl nil roundoff_error_props
     "float/")
    (wn_trans_guard5 const-decl "bool" winding_number_contrib__trans
     nil)
    (wn_fp_guard4 const-decl "bool" winding_number_contrib nil)
    (var_le_0_trans_real formula-decl nil roundoff_error_props
     "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (wn_r_guard4 const-decl "bool" winding_number_contrib__real nil)
    (wn_trans_guard4 const-decl "bool" winding_number_contrib__trans
     nil)
    (wn_trans_guard3 const-decl "bool" winding_number_contrib__trans
     nil)
    (wn_trans_guard2 const-decl "bool" winding_number_contrib__trans
     nil)
    (wn_trans_guard1 const-decl "bool" winding_number_contrib__trans
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)))

