(winding_number_int_post
 (goal 0
  (goal-1 nil 3766768154
   ("" (skeep*)
    (("" (beta)
      (("" (flatten)
        (("" (expand "L_winding_number")
          (("" (case "i_1 = i")
            (("1" (replace -1 :hide? t)
              (("1" (assert)
                (("1" (inst? -26 :where 3)
                  (("1" (assert)
                    (("1" (split -26)
                      (("1" (flatten) (("1" (assert) nil nil)) nil)
                       ("2" (skeep 1)
                        (("2" (split 1)
                          (("1" (flatten)
                            (("1" (inst -27 "i_8")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (flatten)
                            (("2" (inst -27 "i_8")
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (flatten)
                            (("3" (inst -27 "i_8")
                              (("3" (assert) nil nil)) nil))
                            nil)
                           ("4" (flatten)
                            (("4" (inst -27 "i_8")
                              (("4" (assert) nil nil)) nil))
                            nil)
                           ("5" (flatten)
                            (("5" (inst -27 "i_8")
                              (("5" (assert) nil nil)) nil))
                            nil)
                           ("6" (flatten)
                            (("6" (inst -27 "i_8")
                              (("6" (assert) nil nil)) nil))
                            nil)
                           ("7" (flatten)
                            (("7" (inst -27 "i_8")
                              (("7" (assert) nil nil)) nil))
                            nil)
                           ("8" (flatten)
                            (("8" (inst -27 "i_8")
                              (("8" (assert) nil nil)) nil))
                            nil)
                           ("9" (flatten)
                            (("9" (inst -27 "i_8")
                              (("9" (assert) nil nil)) nil))
                            nil)
                           ("10" (flatten)
                            (("10" (inst -27 "i_8")
                              (("10" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (L_winding_number const-decl "int" A_real_function_winding_number
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak)))

