(quadrant__trans_props
 (quadrant_stable_1 0
  (quadrant_stable_1-1 nil 3746532635
   ("" (assert)
    (("" (expand "orig_fp_guard1")
      (("" (skeep)
        (("" (split 1)
          (("1" (use "var_ge_0_trans_real") (("1" (assert) nil nil))
            nil)
           ("2" (lemma "var_ge_0_trans_real")
            (("2" (inst? -1 :where 1)
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil)
           ("3" (lemma "var_ge_0_trans_fp")
            (("3" (inst? -1 :where 1)
              (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
            nil)
           ("4" (lemma "var_ge_0_trans_fp")
            (("4" (inst? -1 :where 1)
              (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((orig_fp_guard1 const-decl "bool" quadrant nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (var_ge_0_trans_real formula-decl nil roundoff_error_props
     "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (var_ge_0_trans_fp formula-decl nil roundoff_error_props "float/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil))
   shostak))
 (quadrant_stable_2 0
  (quadrant_stable_2-3 nil 3746959349
   ("" (assert)
    (("" (skeep)
      (("" (expand "orig_fp_guard2")
        (("" (expand "orig_fp_guard1")
          (("" (split 2)
            (("1" (lemma "var_le_0_trans_real")
              (("1" (inst? -1 :where 1)
                (("1" (inst? -1 :where -2) (("1" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "var_ge_0_trans_real")
              (("2" (inst? -1 :where 1)
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil)
             ("3" (assert)
              (("3" (split -6)
                (("1" (flatten)
                  (("1" (lemma "var_lt_0_trans_real")
                    (("1" (inst? -1 :where -5) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "var_lt_0_trans_implies_var_not_le_eX")
                  (("2" (inst? -1 :where -5) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (hide-all-but (1 -3))
              (("4" (lemma "greatest_fp_le_nonpos_is_nonpos")
                (("4" (inst? -1)
                  (("4" (lemma "Fle_transitive")
                    (("4" (expand "transitive?")
                      (("4" (inst? -1 :where 1)
                        (("4" (inst? -1 :where -3)
                          (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (lemma "var_ge_0_trans_fp")
              (("5" (inst? -1 :where 1)
                (("5" (inst?) (("5" (assert) nil nil)) nil)) nil))
              nil)
             ("6" (flatten)
              (("6" (split -7)
                (("1"
                  (lemma "var_lt_0_trans_implies_var_not_le_0_orig")
                  (("1" (inst? -1 :where -5) (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2"
                  (lemma "var_lt_0_trans_implies_var_not_le_0_orig")
                  (("2" (inst? -1 :where -6) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (orig_fp_guard1 const-decl "bool" quadrant nil)
    (var_lt_0_trans_implies_var_not_le_0_orig formula-decl nil
     roundoff_error_props "float/")
    (var_ge_0_trans_fp formula-decl nil roundoff_error_props "float/")
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (transitive? const-decl "bool" relations nil)
    (greatest_fp_le const-decl "{X: unb_double |
         DtoR(X) <= x AND
          (FORALL Y: DtoR(Y) <= x IMPLIES DtoR(Y) <= DtoR(X))}"
     roundoff_error_props "float/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (Fle_transitive formula-decl nil float "float/")
    (greatest_fp_le_nonpos_is_nonpos formula-decl nil
     roundoff_error_props "float/")
    (var_lt_0_trans_implies_var_not_le_eX formula-decl nil
     roundoff_error_props "float/")
    (var_lt_0_trans_real formula-decl nil roundoff_error_props
     "float/")
    (var_ge_0_trans_real formula-decl nil roundoff_error_props
     "float/")
    (var_le_0_trans_real formula-decl nil roundoff_error_props
     "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (orig_fp_guard2 const-decl "bool" quadrant nil)
    (trans_fp_guard2 const-decl "bool" quadrant__trans nil)
    (trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil))
   nil)
  (quadrant_stable_2-2 nil 3746698358
   ("" (assert)
    (("" (skeep)
      (("" (expand "orig_fp_guard2")
        (("" (expand "orig_fp_guard1")
          (("" (split 2)
            (("1" (lemma "var_le_0_trans_real")
              (("1" (inst? -1 :where 1)
                (("1" (inst? -1 :where -2) (("1" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "var_ge_0_trans_real")
              (("2" (inst? -1 :where 1)
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil)
             ("3" (assert)
              (("3" (split -6)
                (("1" (flatten)
                  (("1" (lemma "var_lt_0_trans_real")
                    (("1" (inst? -1 :where -5) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "var_lt_0_trans_implies_var_not_le_eX")
                  (("2" (inst? -1 :where -5) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (hide-all-but (1 -3))
              (("4" (lemma "greatest_fp_le_nonneg_j")
                (("4" (inst? -1)
                  (("4" (lemma "Fle_transitive")
                    (("4" (expand "transitive?")
                      (("4" (inst? -1 :where 1)
                        (("4" (inst? -1 :where -3)
                          (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (lemma "var_ge_0_trans_fp")
              (("5" (inst? -1 :where 1)
                (("5" (inst?) (("5" (assert) nil nil)) nil)) nil))
              nil)
             ("6" (flatten)
              (("6" (split -7)
                (("1"
                  (lemma "var_lt_0_trans_implies_var_not_le_0_orig")
                  (("1" (inst? -1 :where -5) (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2"
                  (lemma "var_lt_0_trans_implies_var_not_le_0_orig")
                  (("2" (inst? -1 :where -6) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DtoR const-decl "real" ieee754dp "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (Fle_transitive formula-decl nil float "float/")
    (float type-eq-decl nil float "float/")
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/"))
   nil)
  (quadrant_stable_2-1 nil 3746558019
   ("" (skeep)
    (("" (split 2)
      (("1" (lemma "var_le_0_trans_real")
        (("1" (inst? -1 :where 1)
          (("1" (inst? -1 :where -2) (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma "var_ge_0_trans_real")
        (("2" (inst? -1 :where 1)
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (assert)
        (("3" (split -6)
          (("1" (flatten)
            (("1" (lemma "var_lt_0_trans_real")
              (("1" (inst? -1 :where -5) (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (lemma "var_lt_0_trans_implies_var_not_le_eX")
            (("2" (inst? -1 :where -5) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("4" (hide-all-but (1 -3))
        (("4" (lemma "greatest_fp_le_nonneg_j")
          (("4" (inst? -1)
            (("4" (lemma "Fle_transitive")
              (("4" (expand "transitive?")
                (("4" (inst? -1 :where 1)
                  (("4" (inst? -1 :where -3) (("4" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (lemma "var_ge_0_trans_fp")
        (("5" (inst? -1 :where 1)
          (("5" (inst?) (("5" (assert) nil nil)) nil)) nil))
        nil)
       ("6" (flatten)
        (("6" (split -7)
          (("1" (lemma "var_lt_0_trans_implies_var_not_le_0_orig")
            (("1" (inst? -1 :where -5) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (lemma "var_lt_0_trans_implies_var_not_le_0_orig")
            (("2" (inst? -1 :where -6) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (float type-eq-decl nil float "float/")
    (Fle_transitive formula-decl nil float "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (DtoR const-decl "real" ieee754dp "float/"))
   shostak))
 (quadrant_stable_3 0
  (quadrant_stable_3-1 nil 3746899476
   ("" (skeep)
    ((""
      (case "(X <= greatest_fp_le(-e_X) AND Y < greatest_fp_le(-e_Y))")
      (("1" (hide -4 1 2)
        (("1" (use "orig_r_case3_simplification")
          (("1" (replace -1 1 :hide? t)
            (("1" (use "orig_fp_case3_simplification")
              (("1" (replace -1 1 :hide? t)
                (("1" (flatten)
                  (("1" (split 1)
                    (("1" (use "var_le_0_trans_real")
                      (("1" (assert) nil nil)) nil)
                     ("2" (lemma "var_lt_0_trans_real")
                      (("2" (inst? -1 :where -5)
                        (("2" (assert) nil nil)) nil))
                      nil)
                     ("3"
                      (use "var_le_0_trans_implies_var_not_lt_0_orig")
                      (("3" (assert)
                        (("3" (rewrite "Fle_neg_Flt" :dir rl) nil nil))
                        nil))
                      nil)
                     ("4"
                      (lemma
                       "var_lt_0_trans_implies_var_not_le_0_orig")
                      (("4" (inst? -1 :where -5)
                        (("4" (assert)
                          (("4" (rewrite "Fle_neg_Flt" :dir rl) nil
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "trans_fp_case3_simplification")
        (("2" (replace -1 1 :hide? t :dir rl)
          (("2" (split 1)
            (("1" (propax) nil nil) ("2" (propax) nil nil)
             ("3" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" float "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (greatest_fp_le const-decl "{X: unb_double |
         DtoR(X) <= x AND
          (FORALL Y: DtoR(Y) <= x IMPLIES DtoR(Y) <= DtoR(X))}"
     roundoff_error_props "float/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (orig_r_case3_simplification formula-decl nil quadrant__real nil)
    (orig_fp_case3_simplification formula-decl nil quadrant nil)
    (var_lt_0_trans_implies_var_not_le_0_orig formula-decl nil
     roundoff_error_props "float/")
    (var_le_0_trans_implies_var_not_lt_0_orig formula-decl nil
     roundoff_error_props "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (Fle_neg_Flt formula-decl nil float "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (var_lt_0_trans_real formula-decl nil roundoff_error_props
     "float/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (var_le_0_trans_real formula-decl nil roundoff_error_props
     "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (trans_fp_case3_simplification formula-decl nil quadrant__trans
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (quadrant_stable_4 0
  (quadrant_stable_4-1 nil 3746904398
   ("" (skeep)
    ((""
      (case "(Y < greatest_fp_le(-e_Y) AND smallest_fp_ge(e_X) < X)")
      (("1" (hide -4 1 2 3)
        (("1" (rewrite "orig_r_case4_simplification")
          (("1" (rewrite "orig_fp_case4_simplification")
            (("1" (flatten)
              (("1" (split 1)
                (("1" (lemma "var_lt_0_trans_real")
                  (("1" (inst? -1 :where -5) (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (use "var_gt_error__var_r_gt_0")
                  (("2" (assert) nil nil)) nil)
                 ("3"
                  (lemma "var_lt_0_trans_implies_var_not_le_0_orig")
                  (("3" (inst? -1 :where -5)
                    (("3" (assert)
                      (("3" (rewrite "Fle_neg_Flt" :dir rl) nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (use "var_fp_gt_err__var_fp_gt_0")
                  (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "trans_fp_case4_simplification")
        (("2" (replace -1 1 :hide? t :dir rl)
          (("2" (split 1)
            (("1" (propax) nil nil) ("2" (propax) nil nil)
             ("3" (propax) nil nil) ("4" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((smallest_fp_ge const-decl "{X: unb_double |
         x <= DtoR(X) AND
          (FORALL Y: x <= DtoR(Y) IMPLIES DtoR(X) <= DtoR(Y))}"
     roundoff_error_props "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (greatest_fp_le const-decl "{X: unb_double |
         DtoR(X) <= x AND
          (FORALL Y: DtoR(Y) <= x IMPLIES DtoR(Y) <= DtoR(X))}"
     roundoff_error_props "float/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (orig_r_case4_simplification formula-decl nil quadrant__real nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (var_fp_gt_err__var_fp_gt_0 formula-decl nil roundoff_error_props
     "float/")
    (var_lt_0_trans_implies_var_not_le_0_orig formula-decl nil
     roundoff_error_props "float/")
    (Fle_neg_Flt formula-decl nil float "float/")
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (var_gt_error__var_r_gt_0 formula-decl nil roundoff_error_props
     "float/")
    (var_lt_0_trans_real formula-decl nil roundoff_error_props
     "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (orig_fp_case4_simplification formula-decl nil quadrant nil)
    (trans_fp_case4_simplification formula-decl nil quadrant__trans
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (quadrant_trans_no_warning_implies_stability_on_the_original 0
  (quadrant_trans_no_warning_implies_stability_on_the_original-1 nil
   3746965400
   ("" (skeep)
    (("" (with-labels (skoletin) ((nil "qt result" "UNKNOWN")))
      ((""
        (with-labels (flatten)
         ((nil nil "qt is not warning" nil "UNKNOWN")))
        (("" (expand "quadrant_trans" "qt result")
          (("" (lift-if "qt result")
            (("" (split "qt result")
              (("1"
                (with-labels (flatten)
                 (("current guard" "qt result" "UNKNOWN")))
                (("1" (use "quadrant_stable_1")
                  (("1" (split -1)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (replace "qt result")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil) ("3" (propax) nil nil)
                     ("4" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split "qt result")
                  (("1"
                    (with-labels (flatten)
                     (("current guard" "qt result" "UNKNOWN")))
                    (("1" (use "quadrant_stable_2")
                      (("1" (split -1)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (replace "qt result")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil) ("3" (propax) nil nil)
                         ("4" (propax) nil nil) ("5" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1"
                        (with-labels (flatten)
                         (("current guard" "qt result" "UNKNOWN")))
                        (("1" (use "quadrant_stable_3")
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (replace "qt result")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil)
                             ("4" (propax) nil nil)
                             ("5" (propax) nil nil)
                             ("6" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -1)
                          (("1"
                            (with-labels (flatten)
                             (("current guard" "qt result" "UNKNOWN")))
                            (("1" (use "quadrant_stable_4")
                              (("1"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace "qt result")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil)
                                 ("3" (propax) nil nil)
                                 ("4" (propax) nil nil)
                                 ("5" (propax) nil nil)
                                 ("6" (propax) nil nil)
                                 ("7" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Maybe type-decl nil Maybe "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (quadrant_trans const-decl "Maybe[int]" quadrant__trans nil)
    (quadrant_real const-decl "int" quadrant__real nil)
    (quadrant const-decl "int" quadrant nil)
    (= const-decl "bool" quadrant__trans nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (DtoR const-decl "real" ieee754dp "float/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (quadrant_stable_1 formula-decl nil quadrant__trans_props nil)
    (maybe_int_id_int_l formula-decl nil quadrant__trans nil)
    (quadrant_real_control_flow_path_1 formula-decl nil quadrant__real
     nil)
    (orig_r_guard3 const-decl "bool" quadrant__real nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (quadrant_control_flow_path_1 formula-decl nil quadrant nil)
    (trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (quadrant_stable_2 formula-decl nil quadrant__trans_props nil)
    (quadrant_real_control_flow_path_2 formula-decl nil quadrant__real
     nil)
    (quadrant_control_flow_path_2 formula-decl nil quadrant nil)
    (trans_fp_guard2 const-decl "bool" quadrant__trans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (quadrant_stable_3 formula-decl nil quadrant__trans_props nil)
    (quadrant_real_control_flow_path_3 formula-decl nil quadrant__real
     nil)
    (quadrant_control_flow_path_3 formula-decl nil quadrant nil)
    (trans_fp_guard3 const-decl "bool" quadrant__trans nil)
    (quadrant_stable_4 formula-decl nil quadrant__trans_props nil)
    (quadrant_real_control_flow_path_4 formula-decl nil quadrant__real
     nil)
    (quadrant_control_flow_path_4 formula-decl nil quadrant nil)
    (trans_fp_guard4 const-decl "bool" quadrant__trans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (fp_ge_0_and_r_lt_0_implies_fp_lt_err 0
  (fp_ge_0_and_r_lt_0_implies_fp_lt_err-1 nil 3746613184
   ("" (skeep)
    (("" (case "DtoR(X) - e_X <= r_X")
      (("1" (use "smallest_fp_ge_is_ge")
        (("1" (rewrite "DtoR_inc") (("1" (assert) nil nil)) nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (DtoR_inc formula-decl nil ieee754dp "float/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (smallest_fp_ge const-decl "{X: unb_double |
         x <= DtoR(X) AND
          (FORALL Y: x <= DtoR(Y) IMPLIES DtoR(X) <= DtoR(Y))}"
     roundoff_error_props "float/")
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (smallest_fp_ge_is_ge formula-decl nil roundoff_error_props
     "float/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (r_le_0_implies_fp_le_err 0
  (r_le_0_implies_fp_le_err-1 nil 3746813242
   ("" (skeep)
    (("" (case "DtoR(X) - e_X <= r_X")
      (("1" (use "smallest_fp_ge_is_ge")
        (("1" (rewrite "DtoR_strictly_increasing")
          (("1" (assert) nil nil)) nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (DtoR_strictly_increasing formula-decl nil ieee754dp "float/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (smallest_fp_ge const-decl "{X: unb_double |
         x <= DtoR(X) AND
          (FORALL Y: x <= DtoR(Y) IMPLIES DtoR(X) <= DtoR(Y))}"
     roundoff_error_props "float/")
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (smallest_fp_ge_is_ge formula-decl nil roundoff_error_props
     "float/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (fp_lt_0_and_r_ge_0_implies_fp_ge_err 0
  (fp_lt_0_and_r_ge_0_implies_fp_ge_err-1 nil 3746883975
   ("" (skeep)
    (("" (use "greatest_fp_le_is_le")
      (("" (rewrite "DtoR_strictly_increasing") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((greatest_fp_le_is_le formula-decl nil roundoff_error_props
     "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (greatest_fp_le const-decl "{X: unb_double |
         DtoR(X) <= x AND
          (FORALL Y: DtoR(Y) <= x IMPLIES DtoR(Y) <= DtoR(X))}"
     roundoff_error_props "float/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (DtoR_strictly_increasing formula-decl nil ieee754dp "float/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (r_gt_0_implies_fp_not_le_err 0
  (r_gt_0_implies_fp_not_le_err-1 nil 3746884054
   ("" (skeep)
    (("" (use "greatest_fp_le_is_le")
      (("" (rewrite "DtoR_inc") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((greatest_fp_le_is_le formula-decl nil roundoff_error_props
     "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (greatest_fp_le const-decl "{X: unb_double |
         DtoR(X) <= x AND
          (FORALL Y: DtoR(Y) <= x IMPLIES DtoR(Y) <= DtoR(X))}"
     roundoff_error_props "float/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (DtoR_inc formula-decl nil ieee754dp "float/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (fp_x_ge_0_and_r_x_lt_0_not_trans_fp_guard1 0
  (fp_x_ge_0_and_r_x_lt_0_not_trans_fp_guard1-1 nil 3746699392
   ("" (skeep)
    (("" (expand "trans_fp_guard1")
      (("" (flatten)
        (("" (use "fp_ge_0_and_r_lt_0_implies_fp_lt_err")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (fp_ge_0_and_r_lt_0_implies_fp_lt_err formula-decl nil
     quadrant__trans_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard1 0
  (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard1-1 nil 3746699460
   ("" (skeep)
    (("" (expand "trans_fp_guard1")
      (("" (flatten)
        (("" (use "fp_ge_0_and_r_lt_0_implies_fp_lt_err")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (fp_ge_0_and_r_lt_0_implies_fp_lt_err formula-decl nil
     quadrant__trans_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard2 0
  (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard2-1 nil 3746700194
   ("" (skeep)
    (("" (expand "trans_fp_guard2")
      (("" (flatten)
        (("" (use "fp_ge_0_and_r_lt_0_implies_fp_lt_err")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((trans_fp_guard2 const-decl "bool" quadrant__trans nil)
    (fp_ge_0_and_r_lt_0_implies_fp_lt_err formula-decl nil
     quadrant__trans_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard3 0
  (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard3-1 nil 3746702159
   ("" (skeep)
    (("" (rewrite "trans_fp_guard3_simplification")
      (("" (flatten)
        (("" (use "var_lt_0_trans_implies_var_not_le_0_orig")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((trans_fp_guard3_simplification formula-decl nil quadrant__trans
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (var_lt_0_trans_implies_var_not_le_0_orig formula-decl nil
     roundoff_error_props "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard4 0
  (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard4-1 nil 3746785748
   ("" (skeep)
    (("" (rewrite "trans_fp_guard4_simplification")
      (("" (flatten)
        (("" (lemma "var_lt_0_trans_implies_var_not_le_0_orig")
          (("" (inst? -1 :where -2) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((trans_fp_guard4_simplification formula-decl nil quadrant__trans
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (var_lt_0_trans_implies_var_not_le_0_orig formula-decl nil
     roundoff_error_props "float/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (fp_x_lt_0_not_trans_fp_guard1 0
  (fp_x_lt_0_not_trans_fp_guard1-1 nil 3746798876
   ("" (skeep)
    (("" (expand "trans_fp_guard1")
      (("" (flatten)
        (("" (use "var_ge_0_trans_fp")
          (("" (assert) (("" (rewrite "Fle_neg_Flt") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (var_ge_0_trans_fp formula-decl nil roundoff_error_props "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (Fle_neg_Flt formula-decl nil float "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (fp_y_lt_0_not_trans_fp_guard1 0
  (fp_y_lt_0_not_trans_fp_guard1-1 nil 3746806429
   ("" (skeep)
    (("" (expand "trans_fp_guard1")
      (("" (flatten)
        (("" (use "var_ge_0_trans_fp")
          (("" (assert) (("" (rewrite "Fle_neg_Flt") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (var_ge_0_trans_fp formula-decl nil roundoff_error_props "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (Fle_neg_Flt formula-decl nil float "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (fp_y_lt_0_not_trans_fp_guard2 0
  (fp_y_lt_0_not_trans_fp_guard2-1 nil 3746807913
   ("" (skeep)
    (("" (rewrite "trans_fp_guard2_simplification")
      (("" (flatten)
        (("" (use "var_ge_0_trans_fp")
          (("" (assert) (("" (rewrite "Fle_neg_Flt") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((trans_fp_guard2_simplification formula-decl nil quadrant__trans
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (var_ge_0_trans_fp formula-decl nil roundoff_error_props "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (Fle_neg_Flt formula-decl nil float "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (r_x_ge_0_not_trans_fp_guard2 0
  (r_x_ge_0_not_trans_fp_guard2-1 nil 3746803276
   ("" (skeep)
    (("" (rewrite "trans_fp_guard2_simplification")
      (("" (flatten)
        (("" (use "fp_lt_0_and_r_ge_0_implies_fp_ge_err")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((trans_fp_guard2_simplification formula-decl nil quadrant__trans
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (fp_lt_0_and_r_ge_0_implies_fp_ge_err formula-decl nil
     quadrant__trans_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (r_y_ge_0_not_trans_fp_guard3 0
  (r_y_ge_0_not_trans_fp_guard3-1 nil 3746803297
   ("" (skeep)
    (("" (rewrite "trans_fp_guard3_simplification")
      (("" (flatten)
        (("" (use "fp_lt_0_and_r_ge_0_implies_fp_ge_err")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((trans_fp_guard3_simplification formula-decl nil quadrant__trans
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (fp_lt_0_and_r_ge_0_implies_fp_ge_err formula-decl nil
     quadrant__trans_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (r_x_gt_0_not_trans_fp_guard3 0
  (r_x_gt_0_not_trans_fp_guard3-1 nil 3746810893
   ("" (skeep)
    (("" (rewrite "trans_fp_guard3_simplification")
      (("" (flatten)
        (("" (use "r_gt_0_implies_fp_not_le_err")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((trans_fp_guard3_simplification formula-decl nil quadrant__trans
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (r_gt_0_implies_fp_not_le_err formula-decl nil
     quadrant__trans_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (fp_x_gt_0_not_trans_fp_guard3 0
  (fp_x_gt_0_not_trans_fp_guard3-1 nil 3746813803
   ("" (skeep)
    (("" (rewrite "trans_fp_guard3_simplification")
      (("" (flatten)
        (("" (use "var_le_0_trans_implies_var_not_lt_0_orig")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((trans_fp_guard3_simplification formula-decl nil quadrant__trans
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (var_le_0_trans_implies_var_not_lt_0_orig formula-decl nil
     roundoff_error_props "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (r_y_ge_0_not_trans_fp_guard4 0
  (r_y_ge_0_not_trans_fp_guard4-1 nil 3746803625
   ("" (skeep)
    (("" (rewrite "trans_fp_guard4_simplification")
      (("" (flatten)
        (("" (use "fp_lt_0_and_r_ge_0_implies_fp_ge_err")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((trans_fp_guard4_simplification formula-decl nil quadrant__trans
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (fp_lt_0_and_r_ge_0_implies_fp_ge_err formula-decl nil
     quadrant__trans_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (r_x_le_0_not_trans_fp_guard4 0
  (r_x_le_0_not_trans_fp_guard4-1 nil 3746813194
   ("" (skeep)
    (("" (rewrite "trans_fp_guard4_simplification")
      (("" (flatten)
        (("" (use "r_le_0_implies_fp_le_err") (("" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((trans_fp_guard4_simplification formula-decl nil quadrant__trans
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (r_le_0_implies_fp_le_err formula-decl nil quadrant__trans_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (fp_x_lt_0_not_trans_fp_guard4 0
  (fp_x_lt_0_not_trans_fp_guard4-1 nil 3746809116
   ("" (skeep)
    (("" (rewrite "trans_fp_guard4_simplification")
      (("" (flatten)
        (("" (use "var_fp_gt_err__var_fp_gt_0")
          (("" (assert) (("" (rewrite "Fle_neg_Flt") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((trans_fp_guard4_simplification formula-decl nil quadrant__trans
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (var_fp_gt_err__var_fp_gt_0 formula-decl nil roundoff_error_props
     "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (Fle_neg_Flt formula-decl nil float "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (quadrant_unstable_fp1_r2 0
  (quadrant_unstable_fp1_r2-1 nil 3746614127
   ("" (skeep)
    ((""
      (case "r_X < 0
                                                 AND 0 <= r_Y")
      (("1" (flatten)
        (("1" (use "fp_ge_0_and_r_lt_0_implies_fp_lt_err")
          (("1" (split -1)
            (("1" (split 3)
              (("1" (expand "trans_fp_guard4")
                (("1" (flatten)
                  (("1" (hide-all-but (1 -3))
                    (("1" (rewrite "leq_def") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2"
                (case "X <= greatest_fp_le(-e_X)
                                                                                   AND Y < greatest_fp_le(-e_Y)")
                (("1" (hide -2)
                  (("1" (flatten)
                    (("1" (expand "orig_fp_guard1")
                      (("1" (flatten)
                        (("1" (hide-all-but (-2 -8 -6))
                          (("1"
                            (use "var_lt_0_trans_implies_var_not_le_0_orig")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (use "trans_fp_guard3_simplification")
                  (("2" (replace -1 1 :dir rl :hide? t)
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil)
               ("3"
                (case "smallest_fp_ge(e_Y) <= Y
                                                                                   AND X < greatest_fp_le(-e_X)")
                (("1" (hide -2)
                  (("1" (flatten)
                    (("1" (expand "orig_fp_guard1")
                      (("1" (flatten)
                        (("1" (hide-all-but (-2 -7 -5))
                          (("1"
                            (use "var_lt_0_trans_implies_var_not_le_0_orig")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (use "trans_fp_guard2_simplification")
                  (("2" (replace -1 1 :dir rl :hide? t)
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil)
               ("4" (use "fp_x_ge_0_and_r_x_lt_0_not_trans_fp_guard1")
                (("4" (split -1)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)
                   ("3" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil) ("3" (propax) nil nil))
            nil))
          nil))
        nil)
       ("2" (use "orig_r_case2_simplification")
        (("2" (replace -1 1 :dir rl)
          (("2" (split 1)
            (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fp_ge_0_and_r_lt_0_implies_fp_lt_err formula-decl nil
     quadrant__trans_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (leq_def formula-decl nil ieee754dp "float/")
    (DtoR const-decl "real" ieee754dp "float/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (smallest_fp_ge const-decl "{X: unb_double |
         x <= DtoR(X) AND
          (FORALL Y: x <= DtoR(Y) IMPLIES DtoR(X) <= DtoR(Y))}"
     roundoff_error_props "float/")
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (trans_fp_guard4 const-decl "bool" quadrant__trans nil)
    (trans_fp_guard3_simplification formula-decl nil quadrant__trans
     nil)
    (orig_fp_guard1 const-decl "bool" quadrant nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (var_lt_0_trans_implies_var_not_le_0_orig formula-decl nil
     roundoff_error_props "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" float "float/")
    (greatest_fp_le const-decl "{X: unb_double |
         DtoR(X) <= x AND
          (FORALL Y: DtoR(Y) <= x IMPLIES DtoR(Y) <= DtoR(X))}"
     roundoff_error_props "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (< const-decl "bool" float "float/")
    (trans_fp_guard2_simplification formula-decl nil quadrant__trans
     nil)
    (fp_x_ge_0_and_r_x_lt_0_not_trans_fp_guard1 formula-decl nil
     quadrant__trans_props nil)
    (orig_r_case2_simplification formula-decl nil quadrant__real nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (quadrant_unstable_fp1_r3 0
  (quadrant_unstable_fp1_r3-1 nil 3746696814
   ("" (skeep)
    (("" (case "r_X <= 0 AND r_Y < 0")
      (("1" (expand "orig_fp_guard1")
        (("1" (flatten)
          (("1" (hide -7 1 2)
            (("1" (split 1)
              (("1" (use "fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard4")
                (("1" (assert) nil nil)) nil)
               ("2" (use "fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard3")
                (("2" (assert) nil nil)) nil)
               ("3" (use "fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard2")
                (("3" (assert) nil nil)) nil)
               ("4" (use "fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard1")
                (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but (1 2 3 -4))
        (("2" (use "orig_r_case3_simplification")
          (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (trans_fp_guard4 const-decl "bool" quadrant__trans nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard4 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard3 const-decl "bool" quadrant__trans nil)
    (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard3 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard2 const-decl "bool" quadrant__trans nil)
    (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard2 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard1 formula-decl nil
     quadrant__trans_props nil)
    (orig_fp_guard1 const-decl "bool" quadrant nil)
    (orig_r_case3_simplification formula-decl nil quadrant__real nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (orig_r_guard3 const-decl "bool" quadrant__real nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (quadrant_unstable_fp1_r4 0
  (quadrant_unstable_fp1_r4-1 nil 3746785856
   ("" (skeep)
    (("" (case "r_Y < 0 AND 0 < r_X")
      (("1" (expand "orig_fp_guard1")
        (("1" (flatten)
          (("1" (hide 1 2 3)
            (("1" (split 1)
              (("1" (use "fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard4")
                (("1" (assert) nil nil)) nil)
               ("2" (use "fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard3")
                (("2" (assert) nil nil)) nil)
               ("3" (use "fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard2")
                (("3" (assert) nil nil)) nil)
               ("4" (use "fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard1")
                (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but (1 2 3 4))
        (("2" (use "orig_r_case4_simplification")
          (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (trans_fp_guard4 const-decl "bool" quadrant__trans nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard4 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard3 const-decl "bool" quadrant__trans nil)
    (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard3 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard2 const-decl "bool" quadrant__trans nil)
    (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard2 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard1 formula-decl nil
     quadrant__trans_props nil)
    (orig_fp_guard1 const-decl "bool" quadrant nil)
    (orig_r_case4_simplification formula-decl nil quadrant__real nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (orig_r_guard3 const-decl "bool" quadrant__real nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (quadrant_unstable_fp2_r1 0
  (quadrant_unstable_fp2_r1-1 nil 3746786951
   ("" (skeep)
    (("" (case "X < RtoD(0) AND RtoD(0) <= Y")
      (("1" (flatten)
        (("1" (hide -5 1)
          (("1" (expand "orig_r_guard1")
            (("1" (flatten)
              (("1" (split 1)
                (("1" (use "r_y_ge_0_not_trans_fp_guard4")
                  (("1" (assert) nil nil)) nil)
                 ("2" (use "r_y_ge_0_not_trans_fp_guard3")
                  (("2" (assert) nil nil)) nil)
                 ("3" (use "r_x_ge_0_not_trans_fp_guard2")
                  (("3" (assert) nil nil)) nil)
                 ("4" (use "fp_x_lt_0_not_trans_fp_guard1")
                  (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "orig_fp_case2_simplification")
        (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((<= const-decl "bool" float "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fp_x_lt_0_not_trans_fp_guard1 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (r_x_ge_0_not_trans_fp_guard2 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard2 const-decl "bool" quadrant__trans nil)
    (r_y_ge_0_not_trans_fp_guard3 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard3 const-decl "bool" quadrant__trans nil)
    (r_y_ge_0_not_trans_fp_guard4 formula-decl nil
     quadrant__trans_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (trans_fp_guard4 const-decl "bool" quadrant__trans nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (orig_fp_case2_simplification formula-decl nil quadrant nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (quadrant_unstable_fp2_r3 0
  (quadrant_unstable_fp2_r3-1 nil 3746803995
   ("" (skeep)
    (("" (case "X < RtoD(0) AND RtoD(0) <= Y")
      (("1" (flatten)
        (("1" (hide -5 1)
          (("1" (case "(r_X <= 0 AND r_Y < 0)")
            (("1" (flatten)
              (("1" (hide -7 1 2)
                (("1" (split 1)
                  (("1"
                    (use "fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard4")
                    (("1" (assert) nil nil)) nil)
                   ("2"
                    (use "fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard3")
                    (("2" (assert) nil nil)) nil)
                   ("3"
                    (use "fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard2")
                    (("3" (assert) nil nil)) nil)
                   ("4"
                    (use "fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard1")
                    (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (use "orig_r_case3_simplification")
              (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (use "orig_fp_case2_simplification")
        (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((<= const-decl "bool" float "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (orig_r_case3_simplification formula-decl nil quadrant__real nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (orig_r_guard3 const-decl "bool" quadrant__real nil)
    (trans_fp_guard4 const-decl "bool" quadrant__trans nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard4 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard3 const-decl "bool" quadrant__trans nil)
    (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard3 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard2 const-decl "bool" quadrant__trans nil)
    (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard2 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard1 formula-decl nil
     quadrant__trans_props nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (orig_fp_case2_simplification formula-decl nil quadrant nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (quadrant_unstable_fp2_r4 0
  (quadrant_unstable_fp2_r4-1 nil 3746804377
   ("" (skeep)
    (("" (case "X < RtoD(0) AND RtoD(0) <= Y")
      (("1" (flatten)
        (("1" (hide -5 1)
          (("1" (case "(r_Y < 0 AND 0 < r_X)")
            (("1" (hide 1 2 3)
              (("1" (flatten)
                (("1" (split 1)
                  (("1"
                    (use "fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard4")
                    (("1" (assert) nil nil)) nil)
                   ("2"
                    (use "fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard3")
                    (("2" (assert) nil nil)) nil)
                   ("3"
                    (use "fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard2")
                    (("3" (assert) nil nil)) nil)
                   ("4" (use "fp_x_lt_0_not_trans_fp_guard1")
                    (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (use "orig_r_case4_simplification")
              (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (use "orig_fp_case2_simplification")
        (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((<= const-decl "bool" float "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (orig_r_case4_simplification formula-decl nil quadrant__real nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (orig_r_guard3 const-decl "bool" quadrant__real nil)
    (trans_fp_guard4 const-decl "bool" quadrant__trans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard4 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard3 const-decl "bool" quadrant__trans nil)
    (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard3 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard2 const-decl "bool" quadrant__trans nil)
    (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard2 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (fp_x_lt_0_not_trans_fp_guard1 formula-decl nil
     quadrant__trans_props nil)
    (< const-decl "bool" reals nil)
    (orig_fp_case2_simplification formula-decl nil quadrant nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (quadrant_unstable_fp3_r1 0
  (quadrant_unstable_fp3_r1-1 nil 3746805650
   ("" (skeep)
    (("" (case "X <= RtoD(0) AND Y < RtoD(0)")
      (("1" (flatten)
        (("1" (hide -5 1 2)
          (("1" (expand "orig_r_guard1")
            (("1" (flatten)
              (("1" (split 1)
                (("1" (use "r_y_ge_0_not_trans_fp_guard4")
                  (("1" (assert) nil nil)) nil)
                 ("2" (use "r_y_ge_0_not_trans_fp_guard3")
                  (("2" (assert) nil nil)) nil)
                 ("3" (use "r_x_ge_0_not_trans_fp_guard2")
                  (("3" (assert) nil nil)) nil)
                 ("4" (use "fp_y_lt_0_not_trans_fp_guard1")
                  (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "orig_fp_case3_simplification")
        (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((< const-decl "bool" float "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fp_y_lt_0_not_trans_fp_guard1 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (r_x_ge_0_not_trans_fp_guard2 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard2 const-decl "bool" quadrant__trans nil)
    (r_y_ge_0_not_trans_fp_guard3 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard3 const-decl "bool" quadrant__trans nil)
    (r_y_ge_0_not_trans_fp_guard4 formula-decl nil
     quadrant__trans_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (trans_fp_guard4 const-decl "bool" quadrant__trans nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (orig_fp_case3_simplification formula-decl nil quadrant nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (quadrant_unstable_fp3_r2 0
  (quadrant_unstable_fp3_r2-1 nil 3746806704
   ("" (skeep)
    (("" (case "X <= RtoD(0) AND Y < RtoD(0)")
      (("1" (flatten)
        (("1" (hide -5 1 2)
          (("1" (case "r_X < 0 AND 0 <= r_Y")
            (("1" (hide -6 1)
              (("1" (flatten)
                (("1" (split 1)
                  (("1" (use "r_y_ge_0_not_trans_fp_guard4")
                    (("1" (assert) nil nil)) nil)
                   ("2" (use "r_y_ge_0_not_trans_fp_guard3")
                    (("2" (assert) nil nil)) nil)
                   ("3" (use "fp_y_lt_0_not_trans_fp_guard2")
                    (("3" (assert) nil nil)) nil)
                   ("4" (use "fp_y_lt_0_not_trans_fp_guard1")
                    (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (use "orig_r_case2_simplification")
              (("2" (replace -1 1 :dir rl :hide? t)
                (("2" (split 1)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "orig_fp_case3_simplification")
        (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((< const-decl "bool" float "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (orig_r_case2_simplification formula-decl nil quadrant__real nil)
    (trans_fp_guard4 const-decl "bool" quadrant__trans nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (r_y_ge_0_not_trans_fp_guard4 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard3 const-decl "bool" quadrant__trans nil)
    (r_y_ge_0_not_trans_fp_guard3 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard2 const-decl "bool" quadrant__trans nil)
    (fp_y_lt_0_not_trans_fp_guard2 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (fp_y_lt_0_not_trans_fp_guard1 formula-decl nil
     quadrant__trans_props nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (orig_fp_case3_simplification formula-decl nil quadrant nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (quadrant_unstable_fp3_r4 0
  (quadrant_unstable_fp3_r4-1 nil 3746808068
   ("" (skeep)
    (("" (case "X <= RtoD(0) AND Y < RtoD(0)")
      (("1" (flatten)
        (("1" (hide -5 1 2)
          (("1" (case "r_Y < 0 AND 0 < r_X")
            (("1" (hide 1 2 3)
              (("1" (flatten)
                (("1" (split 1)
                  (("1" (use "fp_x_lt_0_not_trans_fp_guard4")
                    (("1" (assert) nil nil)) nil)
                   ("2" (use "r_x_gt_0_not_trans_fp_guard3")
                    (("2" (assert) nil nil)) nil)
                   ("3" (use "r_x_ge_0_not_trans_fp_guard2")
                    (("3" (assert) nil nil)) nil)
                   ("4"
                    (use "fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard1")
                    (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (use "orig_r_case4_simplification")
              (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (use "orig_fp_case3_simplification")
        (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((< const-decl "bool" float "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (orig_r_case4_simplification formula-decl nil quadrant__real nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (orig_r_guard3 const-decl "bool" quadrant__real nil)
    (trans_fp_guard4 const-decl "bool" quadrant__trans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (fp_x_lt_0_not_trans_fp_guard4 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard3 const-decl "bool" quadrant__trans nil)
    (r_x_gt_0_not_trans_fp_guard3 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard2 const-decl "bool" quadrant__trans nil)
    (r_x_ge_0_not_trans_fp_guard2 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (fp_y_ge_0_and_r_y_lt_0_not_trans_fp_guard1 formula-decl nil
     quadrant__trans_props nil)
    (< const-decl "bool" reals nil)
    (orig_fp_case3_simplification formula-decl nil quadrant nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (quadrant_unstable_fp4_r1 0
  (quadrant_unstable_fp4_r1-2 nil 3746812061
   ("" (skeep)
    (("" (case "Y < RtoD(0) AND RtoD(0) < X")
      (("1" (flatten)
        (("1" (hide 1 2 3)
          (("1" (expand "orig_r_guard1")
            (("1" (flatten)
              (("1" (split 1)
                (("1" (use "r_y_ge_0_not_trans_fp_guard4")
                  (("1" (assert) nil nil)) nil)
                 ("2" (use "r_y_ge_0_not_trans_fp_guard3")
                  (("2" (assert) nil nil)) nil)
                 ("3" (use "r_x_ge_0_not_trans_fp_guard2")
                  (("3" (assert) nil nil)) nil)
                 ("4" (use "fp_y_lt_0_not_trans_fp_guard1")
                  (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "orig_fp_case4_simplification")
        (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fp_y_lt_0_not_trans_fp_guard1 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (r_x_ge_0_not_trans_fp_guard2 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard2 const-decl "bool" quadrant__trans nil)
    (r_y_ge_0_not_trans_fp_guard3 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard3 const-decl "bool" quadrant__trans nil)
    (r_y_ge_0_not_trans_fp_guard4 formula-decl nil
     quadrant__trans_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (trans_fp_guard4 const-decl "bool" quadrant__trans nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (orig_fp_case4_simplification formula-decl nil quadrant nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (quadrant_unstable_fp4_r1-1 nil 3746811706
   ("" (skeep)
    (("" (case "Y < RtoD(0) AND RtoD(0) < 0")
      (("1" (flatten)
        (("1" (hide 1 2 3)
          (("1" (expand "orig_r_guard1")
            (("1" (flatten)
              (("1" (split 1)
                (("1" (use "r_y_ge_0_not_trans_fp_guard4")
                  (("1" (assert) nil nil)) nil)
                 ("2" (use "r_y_ge_0_not_trans_fp_guard3")
                  (("2" (assert) nil nil)) nil)
                 ("3" (use "r_x_ge_0_not_trans_fp_guard2")
                  (("3" (assert) nil nil)) nil)
                 ("4" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "orig_fp_case4_simplification")
        (("2" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (quadrant_unstable_fp4_r2 0
  (quadrant_unstable_fp4_r2-1 nil 3746812213
   ("" (skeep)
    (("" (case "Y < RtoD(0) AND RtoD(0) < X")
      (("1" (flatten)
        (("1" (hide 1 2 3)
          (("1" (case "r_X < 0 AND 0 <= r_Y")
            (("1" (flatten)
              (("1" (hide -7 1)
                (("1" (split 1)
                  (("1" (use "r_y_ge_0_not_trans_fp_guard4")
                    (("1" (assert) nil nil)) nil)
                   ("2" (use "r_y_ge_0_not_trans_fp_guard3")
                    (("2" (assert) nil nil)) nil)
                   ("3" (use "fp_y_lt_0_not_trans_fp_guard2")
                    (("3" (assert) nil nil)) nil)
                   ("4" (use "fp_y_lt_0_not_trans_fp_guard1")
                    (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (use "orig_r_case2_simplification")
              (("2" (replace -1 1 :dir rl :hide? t)
                (("2" (split 1)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "orig_fp_case4_simplification")
        (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (orig_r_case2_simplification formula-decl nil quadrant__real nil)
    (trans_fp_guard4 const-decl "bool" quadrant__trans nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (r_y_ge_0_not_trans_fp_guard4 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard3 const-decl "bool" quadrant__trans nil)
    (r_y_ge_0_not_trans_fp_guard3 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard2 const-decl "bool" quadrant__trans nil)
    (fp_y_lt_0_not_trans_fp_guard2 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (fp_y_lt_0_not_trans_fp_guard1 formula-decl nil
     quadrant__trans_props nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (orig_fp_case4_simplification formula-decl nil quadrant nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (quadrant_unstable_fp4_r3 0
  (quadrant_unstable_fp4_r3-1 nil 3746812529
   ("" (skeep)
    (("" (case "Y < RtoD(0) AND RtoD(0) < X")
      (("1" (flatten)
        (("1" (hide 1 2 3)
          (("1" (case "r_X <= 0 AND r_Y < 0")
            (("1" (hide -6 1 2)
              (("1" (flatten)
                (("1" (split 1)
                  (("1" (use "r_x_le_0_not_trans_fp_guard4")
                    (("1" (assert) nil nil)) nil)
                   ("2" (use "fp_x_gt_0_not_trans_fp_guard3")
                    (("2" (assert) nil nil)) nil)
                   ("3" (use "fp_y_lt_0_not_trans_fp_guard2")
                    (("3" (assert) nil nil)) nil)
                   ("4" (use "fp_y_lt_0_not_trans_fp_guard1")
                    (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (use "orig_r_case3_simplification")
              (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (use "orig_fp_case4_simplification")
        (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (orig_r_case3_simplification formula-decl nil quadrant__real nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (orig_r_guard3 const-decl "bool" quadrant__real nil)
    (trans_fp_guard4 const-decl "bool" quadrant__trans nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (r_x_le_0_not_trans_fp_guard4 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard3 const-decl "bool" quadrant__trans nil)
    (fp_x_gt_0_not_trans_fp_guard3 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard2 const-decl "bool" quadrant__trans nil)
    (fp_y_lt_0_not_trans_fp_guard2 formula-decl nil
     quadrant__trans_props nil)
    (trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (fp_y_lt_0_not_trans_fp_guard1 formula-decl nil
     quadrant__trans_props nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (orig_fp_case4_simplification formula-decl nil quadrant nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (unstability_on_the_original_implies_warning_on_the_transformed 1
  (th1_corollary
   "Proved as corollary of the quadrant_trans_no_warning_implies_stability_on_the_original theorem"
   3759181391
   ("" (skeep*)
    ((""
      (use "quadrant_trans_no_warning_implies_stability_on_the_original")
      (("" (assert)
        (("" (expand "=") (("" (flatten) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  ("independent_proof"
   "Proved idenpendently form theorem quadrant_trans_no_warning_implies_stability_on_the_original"
   3746967763
   ("" (skeep)
    (("" (lemma "quadrant_control_flow")
      (("" (inst -1 "X" "Y")
        (("" (lemma "quadrant_real_control_flow")
          (("" (inst -1 "r_X" "r_Y")
            (("" (split -1)
              (("1" (split -2)
                (("1" (assert)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (flatten)
                  (("2" (lemma "quadrant_unstable_fp2_r1")
                    (("2" (inst? -1 :where -4)
                      (("2" (inst? -1 :where -5)
                        (("2" (split -1)
                          (("1"
                            (use "quadrant_control_flow_path_warning")
                            (("1" (assert) nil nil)) nil)
                           ("2" (propax) nil nil)
                           ("3" (propax) nil nil)
                           ("4" (propax) nil nil)
                           ("5" (propax) nil nil)
                           ("6" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (flatten)
                  (("3" (lemma "quadrant_unstable_fp3_r1")
                    (("3" (inst? -1 :where -4)
                      (("3" (inst? -1 :where -5)
                        (("3" (split -1)
                          (("1"
                            (use "quadrant_control_flow_path_warning")
                            (("1" (assert) nil nil)) nil)
                           ("2" (propax) nil nil)
                           ("3" (propax) nil nil)
                           ("4" (propax) nil nil)
                           ("5" (propax) nil nil)
                           ("6" (propax) nil nil)
                           ("7" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (flatten)
                  (("4" (lemma "quadrant_unstable_fp4_r1")
                    (("4" (inst? -1 :where -3)
                      (("4" (inst? -1 :where -4)
                        (("4" (split -1)
                          (("1"
                            (use "quadrant_control_flow_path_warning")
                            (("1" (assert) nil nil)) nil)
                           ("2" (propax) nil nil)
                           ("3" (propax) nil nil)
                           ("4" (propax) nil nil)
                           ("5" (propax) nil nil)
                           ("6" (propax) nil nil)
                           ("7" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split -2)
                  (("1" (lemma "quadrant_unstable_fp1_r2")
                    (("1" (inst? -1 :where -4)
                      (("1" (inst? -1 :where -5)
                        (("1" (split -1)
                          (("1"
                            (use "quadrant_control_flow_path_warning")
                            (("1" (assert) nil nil)) nil)
                           ("2" (propax) nil nil)
                           ("3" (propax) nil nil)
                           ("4" (propax) nil nil)
                           ("5" (propax) nil nil)
                           ("6" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (assert) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (flatten)
                    (("3" (lemma "quadrant_unstable_fp3_r2")
                      (("3" (inst? -1 :where -4)
                        (("3" (inst? -1 :where -5)
                          (("3" (split -1)
                            (("1"
                              (use "quadrant_control_flow_path_warning")
                              (("1" (assert) nil nil)) nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil)
                             ("4" (propax) nil nil)
                             ("5" (propax) nil nil)
                             ("6" (propax) nil nil)
                             ("7" (propax) nil nil)
                             ("8" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (flatten)
                    (("4" (lemma "quadrant_unstable_fp4_r2")
                      (("4" (inst? -1 :where -3)
                        (("4" (inst? -1 :where -4)
                          (("4" (split -1)
                            (("1"
                              (use "quadrant_control_flow_path_warning")
                              (("1" (assert) nil nil)) nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil)
                             ("4" (propax) nil nil)
                             ("5" (propax) nil nil)
                             ("6" (propax) nil nil)
                             ("7" (propax) nil nil)
                             ("8" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (flatten)
                (("3" (split -2)
                  (("1" (lemma "quadrant_unstable_fp1_r3")
                    (("1" (inst? -1 :where -4)
                      (("1" (inst? -1 :where -5)
                        (("1" (split -1)
                          (("1"
                            (use "quadrant_control_flow_path_warning")
                            (("1" (assert) nil nil)) nil)
                           ("2" (propax) nil nil)
                           ("3" (propax) nil nil)
                           ("4" (propax) nil nil)
                           ("5" (propax) nil nil)
                           ("6" (propax) nil nil)
                           ("7" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (lemma "quadrant_unstable_fp2_r3")
                      (("2" (inst? -1 :where -4)
                        (("2" (inst? -1 :where -5)
                          (("2" (split -1)
                            (("1"
                              (use "quadrant_control_flow_path_warning")
                              (("1" (assert) nil nil)) nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil)
                             ("4" (propax) nil nil)
                             ("5" (propax) nil nil)
                             ("6" (propax) nil nil)
                             ("7" (propax) nil nil)
                             ("8" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (flatten) (("3" (assert) nil nil)) nil)
                   ("4" (flatten)
                    (("4" (lemma "quadrant_unstable_fp4_r3")
                      (("4" (inst? -1 :where -3)
                        (("4" (inst? -1 :where -4)
                          (("4" (split -1)
                            (("1"
                              (use "quadrant_control_flow_path_warning")
                              (("1" (assert) nil nil)) nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil)
                             ("4" (propax) nil nil)
                             ("5" (propax) nil nil)
                             ("6" (propax) nil nil)
                             ("7" (propax) nil nil)
                             ("8" (propax) nil nil)
                             ("9" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (flatten)
                (("4" (split -1)
                  (("1" (lemma "quadrant_unstable_fp1_r4")
                    (("1" (inst? -1 :where -3)
                      (("1" (inst? -1 :where -4)
                        (("1" (split -1)
                          (("1"
                            (use "quadrant_control_flow_path_warning")
                            (("1" (assert) nil nil)) nil)
                           ("2" (propax) nil nil)
                           ("3" (propax) nil nil)
                           ("4" (propax) nil nil)
                           ("5" (propax) nil nil)
                           ("6" (propax) nil nil)
                           ("7" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (lemma "quadrant_unstable_fp2_r4")
                      (("2" (inst? -1 :where -3)
                        (("2" (inst? -1 :where -4)
                          (("2" (split -1)
                            (("1"
                              (use "quadrant_control_flow_path_warning")
                              (("1" (assert) nil nil)) nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil)
                             ("4" (propax) nil nil)
                             ("5" (propax) nil nil)
                             ("6" (propax) nil nil)
                             ("7" (propax) nil nil)
                             ("8" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (flatten)
                    (("3" (lemma "quadrant_unstable_fp3_r4")
                      (("3" (inst? -1 :where -3)
                        (("3" (inst? -1 :where -4)
                          (("3" (split -1)
                            (("1"
                              (use "quadrant_control_flow_path_warning")
                              (("1" (assert) nil nil)) nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil)
                             ("4" (propax) nil nil)
                             ("5" (propax) nil nil)
                             ("6" (propax) nil nil)
                             ("7" (propax) nil nil)
                             ("8" (propax) nil nil)
                             ("9" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (flatten) (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quadrant_control_flow formula-decl nil quadrant nil)
    (quadrant_real_control_flow formula-decl nil quadrant__real nil)
    (quadrant_control_flow_path_4 formula-decl nil quadrant nil)
    (quadrant_unstable_fp4_r1 formula-decl nil quadrant__trans_props
     nil)
    (quadrant_control_flow_path_3 formula-decl nil quadrant nil)
    (quadrant_unstable_fp3_r1 formula-decl nil quadrant__trans_props
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (quadrant_control_flow_path_2 formula-decl nil quadrant nil)
    (quadrant_control_flow_path_warning formula-decl nil
     quadrant__trans nil)
    (quadrant_unstable_fp2_r1 formula-decl nil quadrant__trans_props
     nil)
    (smallest_fp_ge_nonneg_j application-judgement "nonneg_unbdp"
     roundoff_error_props "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (orig_r_guard1 const-decl "bool" quadrant__real nil)
    (quadrant_control_flow_path_1 formula-decl nil quadrant nil)
    (orig_r_guard2 const-decl "bool" quadrant__real nil)
    (orig_r_guard3 const-decl "bool" quadrant__real nil)
    (trans_fp_guard4 const-decl "bool" quadrant__trans nil)
    (trans_fp_guard3 const-decl "bool" quadrant__trans nil)
    (trans_fp_guard2 const-decl "bool" quadrant__trans nil)
    (trans_fp_guard1 const-decl "bool" quadrant__trans nil)
    (quadrant_real_control_flow_path_1 formula-decl nil quadrant__real
     nil)
    (quadrant_unstable_fp1_r2 formula-decl nil quadrant__trans_props
     nil)
    (quadrant_real_control_flow_path_2 formula-decl nil quadrant__real
     nil)
    (quadrant_unstable_fp3_r2 formula-decl nil quadrant__trans_props
     nil)
    (quadrant_unstable_fp4_r2 formula-decl nil quadrant__trans_props
     nil)
    (quadrant_real_control_flow_path_3 formula-decl nil quadrant__real
     nil)
    (quadrant_unstable_fp1_r3 formula-decl nil quadrant__trans_props
     nil)
    (quadrant_unstable_fp2_r3 formula-decl nil quadrant__trans_props
     nil)
    (quadrant_unstable_fp4_r3 formula-decl nil quadrant__trans_props
     nil)
    (quadrant_real_control_flow_path_4 formula-decl nil quadrant__real
     nil)
    (quadrant_unstable_fp1_r4 formula-decl nil quadrant__trans_props
     nil)
    (quadrant_unstable_fp2_r4 formula-decl nil quadrant__trans_props
     nil)
    (quadrant_unstable_fp3_r4 formula-decl nil quadrant__trans_props
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)))

