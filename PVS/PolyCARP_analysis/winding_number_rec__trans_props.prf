(winding_number_rec__trans_props
 (error_preconditions_TCC1 0
  (error_preconditions_TCC1-1 nil 3747414143 ("" (subtype-tcc) nil nil)
   ((polygon_2D_fp type-eq-decl nil acceptable_polygon nil)
    (Vect2_fp type-eq-decl nil vectors_2D_fp_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (vNum const-decl "posnat" float "float/")
    (Fnormal? const-decl "bool" float "float/")
    (Fsubnormal? const-decl "bool" float "float/")
    (Closest? const-decl "bool" float "float/")
    (even? const-decl "bool" integers nil)
    (EvenClosest? const-decl "bool" float "float/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) |
         rounded_mode?(double_precision_format)(round)}" ieee754dp
     "float/")
    (dp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](double_precision_format)" ieee754dp
     "float/")
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (minus_rat_is_rat application-judgement "rat" rationals nil)
    (rndmaxismax_j application-judgement
     "CanonicRoundingFun[2](b, isMax?(b))" ieee754dp "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rndminismin_j application-judgement
     "CanonicRoundingFun[2](b, isMin?(b))" ieee754dp "float/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rndeclosest_j application-judgement
     "CanonicRoundingFun[2](b, EvenClosest?(b))" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fopp const-decl "float" float "float/")
    (RND_Max const-decl "(Fcanonic?(b))" float "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (Fg const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(g(FtoR(f1), FtoR(f2)), f3)}"
     binop_em_scheme "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (dp_closest? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Fsub const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(FtoR(f1) - FtoR(f2), f3)}"
     cr_sub "float/")
    (Dsub const-decl
     "{f: unb_double | closest_double?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754dp_sub "float/")
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (error_preconditions_TCC2 0
  (error_preconditions_TCC2-1 nil 3747414143 ("" (subtype-tcc) nil nil)
   ((FtoR const-decl "real" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fopp const-decl "float" float "float/")
    (RND_Max const-decl "(Fcanonic?(b))" float "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (Fg const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(g(FtoR(f1), FtoR(f2)), f3)}"
     binop_em_scheme "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (dp_closest? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Fsub const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(FtoR(f1) - FtoR(f2), f3)}"
     cr_sub "float/")
    (Dsub const-decl
     "{f: unb_double | closest_double?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754dp_sub "float/")
    (minus_int_is_int application-judgement "int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (wnr_trans_no_warning_implies_stability_on_the_original 0
  (wnr_trans_no_warning_implies_stability_on_the_original-1 nil
   3747413701
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (beta)
            (("" (induct "i")
              (("1"
                (name-replace "trans_result"
                 "winding_number_rec_trans(N)(e_x, e_y, e_det)(P, S, 0)"
                 :hide? nil)
                (("1" (flatten)
                  (("1" (expand "winding_number_rec_trans")
                    (("1"
                      (invoke (name-replace "wn_trans" "%1" :hide? nil)
                       (! -1 1 1 1))
                      (("1" (lift-if -2)
                        (("1" (split -2)
                          (("1" (flatten)
                            (("1" (expand "winding_number_rec")
                              (("1"
                                (expand "winding_number_rec_real")
                                (("1"
                                  (use
                                   "winding_number_contrib_trans_no_warning_implies_stability_on_the_original")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "error_preconditions")
                                      (("1"
                                        (inst -6 "0")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (replace
                                                     -5
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (replace
                                                       -4
                                                       :hide?
                                                       t
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (expand "=")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace
                                                     -4
                                                     :hide?
                                                     t
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (expand "=")
                                                      (("2"
                                                        (replace
                                                         -4
                                                         :hide?
                                                         t)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -3 :hide? t)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3" (propax) nil nil)
                                               ("4" (propax) nil nil)
                                               ("5" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but 1)
                                    (("3"
                                      (flatten)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2"
                (with-labels (skeep)
                 (("jb is less than N-1" "IH" "error_preconditions"
                   "wnr_trans is not warning" "wnr_trans=wnr=wnr_real"
                   "UNKNOWN")))
                (("2" (hide "IH")
                  (("2"
                    (with-labels
                     (name "wnr_trans"
                           "winding_number_rec_trans(N)(e_x, e_y, e_det)(P, S, jb+1)")
                     "wnr_trans_def")
                    (("2" (expand "winding_number_rec_trans")
                      (("2"
                        (with-labels
                         (invoke (name "wnc_trans" "%1" :hide? nil)
                          (! -1 1 1 1))
                         "wnc_trans_def")
                        (("1" (replace "wnc_trans_def" :hide? t)
                          (("1" (lift-if "wnr_trans_def")
                            (("1" (split "wnr_trans_def")
                              (("1"
                                (with-labels
                                 (flatten)
                                 (("wnc_trans is not warning"
                                   "wnr_trans recursive call"
                                   "UNKNOWN")))
                                (("1"
                                  (assert)
                                  (("1"
                                    (split "wnr_trans recursive call")
                                    (("1"
                                      (with-labels
                                       (flatten
                                        "wnr_trans recursive call")
                                       (("wnr_trans is not warning"
                                         "wnr_trans recursive call"
                                         "UNKNOWN")))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "winding_number_rec")
                                          (("1"
                                            (expand
                                             "winding_number_rec_real")
                                            (("1"
                                              (with-labels
                                               (lemma
                                                "winding_number_contrib_trans_no_warning_implies_stability_on_the_original")
                                               "no warning in wnc_trans implies stability")
                                              (("1"
                                                (beta
                                                 "no warning in wnc_trans implies stability")
                                                (("1"
                                                  (inst?
                                                   "no warning in wnc_trans implies stability"
                                                   :where
                                                   "wnr_trans=wnr=wnr_real")
                                                  (("1"
                                                    (inst?
                                                     "no warning in wnc_trans implies stability"
                                                     :where
                                                     "wnr_trans=wnr=wnr_real")
                                                    (("1"
                                                      (reveal
                                                       "wnc_trans_def")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?
                                                           "no warning in wnc_trans implies stability"
                                                           :where
                                                           "wnc_trans_def")
                                                          (("1"
                                                            (split
                                                             "no warning in wnc_trans implies stability")
                                                            (("1"
                                                              (replace
                                                               "wnc_trans_def")
                                                              (("1"
                                                                (with-labels
                                                                 (flatten
                                                                  "no warning in wnc_trans implies stability")
                                                                 (("wnc_trans=wnc"
                                                                   "wnc_trans=wnc_real")))
                                                                (("1"
                                                                  (expand
                                                                   "="
                                                                   "wnc_trans=wnc")
                                                                  (("1"
                                                                    (replace
                                                                     "wnc_trans=wnc"
                                                                     :hide?
                                                                     t
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (expand
                                                                       "="
                                                                       "wnc_trans=wnc_real")
                                                                      (("1"
                                                                        (replace
                                                                         "wnc_trans=wnc_real"
                                                                         :hide?
                                                                         t
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (reveal
                                                                           "IH")
                                                                          (("1"
                                                                            (split
                                                                             "IH")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (split
                                                                                 "wnr_trans=wnr=wnr_real")
                                                                                (("1"
                                                                                  (expand
                                                                                   "="
                                                                                   "IH")
                                                                                  (("1"
                                                                                    (replace
                                                                                     "IH"
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "=")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "=")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               "wnc_trans_def")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but
                                                               ("no warning in wnc_trans implies stability"
                                                                "error_preconditions"))
                                                              (("3"
                                                                (expand
                                                                 "error_preconditions")
                                                                (("3"
                                                                  (inst?
                                                                   -1)
                                                                  (("3"
                                                                    (flatten)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide-all-but
                                                               ("no warning in wnc_trans implies stability"
                                                                "error_preconditions"))
                                                              (("4"
                                                                (expand
                                                                 "error_preconditions")
                                                                (("4"
                                                                  (inst?
                                                                   -1)
                                                                  (("4"
                                                                    (flatten)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("5"
                                                              (hide-all-but
                                                               ("no warning in wnc_trans implies stability"
                                                                "error_preconditions"))
                                                              (("5"
                                                                (expand
                                                                 "error_preconditions")
                                                                (("5"
                                                                  (inst
                                                                   "error_preconditions"
                                                                   "1+jb")
                                                                  (("5"
                                                                    (flatten)
                                                                    (("5"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("6"
                                                              (hide-all-but
                                                               ("no warning in wnc_trans implies stability"
                                                                "error_preconditions"))
                                                              (("6"
                                                                (expand
                                                                 "error_preconditions")
                                                                (("6"
                                                                  (inst
                                                                   "error_preconditions"
                                                                   "1+jb")
                                                                  (("6"
                                                                    (flatten)
                                                                    (("6"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("7"
                                                              (hide-all-but
                                                               ("jb is less than N-2"
                                                                "no warning in wnc_trans implies stability"
                                                                "error_preconditions"))
                                                              (("7"
                                                                (expand
                                                                 "error_preconditions")
                                                                (("7"
                                                                  (inst
                                                                   "error_preconditions"
                                                                   "1+jb")
                                                                  (("7"
                                                                    (flatten)
                                                                    (("7"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil)
                         ("3" (hide-all-but (1 "jb is less than N-1"))
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (Vect2_fp type-eq-decl nil vectors_2D_fp_def nil)
    (polygon_2D_fp type-eq-decl nil acceptable_polygon nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (polygon_2D type-eq-decl nil acceptable_polygon "PolyCARP/")
    (error_preconditions const-decl "bool"
     winding_number_rec__trans_props nil)
    (Maybe type-decl nil Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (winding_number_rec_trans def-decl "Maybe[int]"
     winding_number_rec__trans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "bool" quadrant__trans nil)
    (winding_number_rec def-decl "int" winding_number_rec nil)
    (winding_number_rec_real def-decl "int" winding_number_rec__real
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (float type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (winding_number_contrib_trans const-decl "Maybe[int]"
     winding_number_contrib__trans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (winding_number_contrib_trans_no_warning_implies_stability_on_the_original
     formula-decl nil winding_number_contrib__trans_props nil)
    (N skolem-const-decl "posnat" winding_number_rec__trans_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (jb skolem-const-decl "below(N)" winding_number_rec__trans_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (wnr_unstability_on_the_original_implies_warning_on_the_transformed 0
  (wnr_unstability_on_the_original_implies_warning_on_the_transformed-1
   nil 3747584161
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (induct "i")
            (("1" (flatten)
              (("1" (expand "winding_number_rec_trans")
                (("1"
                  (with-labels
                   (invoke (name "wnc_trans" "%1" :hide? nil)
                    (! 2 1 1 1))
                   "wnc_trans_def")
                  (("1" (replace "wnc_trans_def")
                    (("1"
                      (lemma
                       "wn_unstability_on_the_original_implies_warning_on_the_transformed")
                      (("1" (inst? -1 :where "wnc_trans_def")
                        (("1" (beta)
                          (("1" (expand "winding_number_rec")
                            (("1" (expand "winding_number_rec_real")
                              (("1"
                                (inst? -1 :where 1)
                                (("1"
                                  (expand "error_preconditions")
                                  (("1"
                                    (inst -4 "0")
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (lift-if 2)
                                        (("1"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace "wnc_trans_def")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "/=")
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (flatten)
                                        (("3" (assert) nil nil))
                                        nil)
                                       ("4"
                                        (flatten)
                                        (("4" (assert) nil nil))
                                        nil)
                                       ("5"
                                        (flatten)
                                        (("5" (assert) nil nil))
                                        nil)
                                       ("6"
                                        (flatten)
                                        (("6" (assert) nil nil))
                                        nil)
                                       ("7"
                                        (flatten)
                                        (("7"
                                          (assert)
                                          (("7" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (assert)
                (("2" (expand "winding_number_rec_trans" 2)
                  (("2"
                    (with-labels
                     (invoke (name "wnc_trans" "%1" :hide? nil)
                      (! 2 1 1 1))
                     "wnc_trans_def")
                    (("1" (replace "wnc_trans_def")
                      (("1" (lift-if 2)
                        (("1" (split 2)
                          (("1" (flatten)
                            (("1" (split 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (split -5)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (expand "/=")
                                    (("2"
                                      (expand "winding_number_rec" 2)
                                      (("2"
                                        (expand
                                         "winding_number_rec_real"
                                         2)
                                        (("2"
                                          (lemma
                                           "wn_unstability_on_the_original_implies_warning_on_the_transformed")
                                          (("2"
                                            (inst?
                                             -1
                                             :where
                                             "wnc_trans_def")
                                            (("1"
                                              (inst? -1 :where 2)
                                              (("1"
                                                (expand
                                                 "error_preconditions")
                                                (("1"
                                                  (inst -7 "1 + jb")
                                                  (("1"
                                                    (beta -1)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (replace
                                                         "wnc_trans_def")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "/=")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (replace
                                                               -2)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (flatten)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (flatten)
                                                        (("4"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("5"
                                                        (flatten)
                                                        (("5"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("6"
                                                        (flatten)
                                                        (("6"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("7"
                                                        (flatten)
                                                        (("7"
                                                          (assert)
                                                          (("7"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (Vect2_fp type-eq-decl nil vectors_2D_fp_def nil)
    (polygon_2D_fp type-eq-decl nil acceptable_polygon nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (polygon_2D type-eq-decl nil acceptable_polygon "PolyCARP/")
    (error_preconditions const-decl "bool"
     winding_number_rec__trans_props nil)
    (/= const-decl "boolean" notequal nil)
    (winding_number_rec def-decl "int" winding_number_rec nil)
    (winding_number_rec_real def-decl "int" winding_number_rec__real
     nil)
    (Maybe type-decl nil Maybe "structures/")
    (none? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (winding_number_rec_trans def-decl "Maybe[int]"
     winding_number_rec__trans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (N skolem-const-decl "posnat" winding_number_rec__trans_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (wn_unstability_on_the_original_implies_warning_on_the_transformed
     formula-decl nil winding_number_contrib__trans_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (float type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (winding_number_contrib_trans const-decl "Maybe[int]"
     winding_number_contrib__trans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (jb skolem-const-decl "below(N)" winding_number_rec__trans_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   shostak)))

