(winding_number__trans_props
 (wn_trans_no_warning_implies_stability_on_the_original 0
  (wn_trans_no_warning_implies_stability_on_the_original-1 nil
   3748093399
   ("" (skeep*)
    (("" (beta)
      (("" (flatten)
        (("" (expand "=" 1)
          (("" (assert)
            (("" (expand "winding_number_trans")
              (("" (lift-if -2)
                (("" (split -2)
                  (("1" (flatten)
                    (("1" (hide -2)
                      (("1" (assert)
                        (("1"
                          (use "wnr_trans_no_warning_implies_stability_on_the_original")
                          (("1" (beta)
                            (("1" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "=")
                                  (("1"
                                    (expand "winding_number")
                                    (("1"
                                      (expand "winding_number_real")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (replace -1 :hide? t :dir rl)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (replace -2 1 :hide? t)
                                          (("2"
                                            (expand "tdiv")
                                            (("2"
                                              (rewrite "floor_int")
                                              (("2"
                                                (use
                                                 "winding_number_rec_real_div_4")
                                                (("2"
                                                  (expand "divides")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((winding_number_trans const-decl "Maybe[int]" winding_number__trans
     nil)
    (wnr_trans_no_warning_implies_stability_on_the_original
     formula-decl nil winding_number_rec__trans_props nil)
    (polygon_2D type-eq-decl nil acceptable_polygon "PolyCARP/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (polygon_2D_fp type-eq-decl nil acceptable_polygon nil)
    (Vect2_fp type-eq-decl nil vectors_2D_fp_def nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (winding_number_real const-decl "int" winding_number__real nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (floor_int formula-decl nil floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (winding_number_rec_real def-decl "int" winding_number_rec__real
     nil)
    (winding_number_rec_real_div_4 formula-decl nil
     winding_number__real nil)
    (tdiv const-decl "integer" tdiv "ints/")
    (winding_number const-decl "int" winding_number nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (wn_unstability_on_the_original_implies_warning_on_the_transformed 1
  (th1_corollary
   "Proved as corollary of the wn_trans_no_warning_implies_stability_on_the_original theorem"
   3759181077
   ("" (skeep*)
    (("" (use "wn_trans_no_warning_implies_stability_on_the_original")
      (("" (skoletin)
        (("" (split -1)
          (("1" (flatten)
            (("1" (expand "=")
              (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (assert) nil nil) ("3" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  ("based_on_client_functions_thms" nil 3748094711
   ("" (skeep*)
    (("" (expand "winding_number_trans")
      (("" (lift-if 2)
        (("" (split 2)
          (("1" (flatten)
            (("1" (hide 1)
              (("1"
                (use "wnr_unstability_on_the_original_implies_warning_on_the_transformed")
                (("1" (split -1)
                  (("1" (assert) nil nil)
                   ("2" (expand "/=")
                    (("2" (expand "winding_number")
                      (("2" (expand "winding_number_real")
                        (("2" (replace -1 :hide? t)
                          (("2" (expand "tdiv")
                            (("2" (rewrite "floor_int")
                              (("2"
                                (use "winding_number_rec_real_div_4")
                                (("2"
                                  (expand "divides")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((wn_trans_no_warning_implies_stability_on_the_original formula-decl
     nil winding_number__trans_props nil)
    (polygon_2D type-eq-decl nil acceptable_polygon "PolyCARP/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (polygon_2D_fp type-eq-decl nil acceptable_polygon nil)
    (Vect2_fp type-eq-decl nil vectors_2D_fp_def nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (error_preconditions const-decl "bool"
     winding_number_rec__trans_props nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "bool" quadrant__trans nil)
    (winding_number const-decl "int" winding_number nil)
    (winding_number_real const-decl "int" winding_number__real nil)
    (winding_number_trans const-decl "Maybe[int]" winding_number__trans
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Maybe type-decl nil Maybe "structures/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)))

