(quadrant
 (quadrant_control_flow_path_1 0
  (quadrant_control_flow_path_1-1 nil 3746966274
   ("" (skeep) (("" (expand "quadrant") (("" (assert) nil nil)) nil))
    nil)
   ((quadrant const-decl "int" quadrant nil)) shostak))
 (quadrant_control_flow_path_2 0
  (quadrant_control_flow_path_2-1 nil 3746969480
   ("" (skeep) (("" (expand "quadrant") (("" (assert) nil nil)) nil))
    nil)
   ((quadrant const-decl "int" quadrant nil)) shostak))
 (quadrant_control_flow_path_3 0
  (quadrant_control_flow_path_3-1 nil 3746969480
   ("" (skeep) (("" (expand "quadrant") (("" (assert) nil nil)) nil))
    nil)
   ((quadrant const-decl "int" quadrant nil)) shostak))
 (quadrant_control_flow_path_4 0
  (quadrant_control_flow_path_4-1 nil 3746969480
   ("" (skeep) (("" (expand "quadrant") (("" (assert) nil nil)) nil))
    nil)
   ((quadrant const-decl "int" quadrant nil)) shostak))
 (quadrant_control_flow 0
  (quadrant_control_flow-1 nil 3746969512
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak))
 (orig_fp_case2_simplification 0
  (orig_fp_case2_simplification-1 nil 3746961637
   (""
    (then (expand "orig_fp_guard2") (expand "orig_fp_guard1")
     (name-replace "zero_fp" "RtoD(0)") (skeep) (grind))
    nil nil)
   ((orig_fp_guard2 const-decl "bool" quadrant nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (< const-decl "bool" float "float/")
    (Flt? const-decl "bool" float "float/")
    (<= const-decl "bool" float "float/")
    (Fle? const-decl "bool" float "float/")
    (Fminus const-decl "float" float "float/")
    (^ const-decl "real" exponentiation nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (orig_fp_guard1 const-decl "bool" quadrant nil))
   shostak))
 (orig_fp_case3_simplification 0
  (orig_fp_case3_simplification-1 nil 3746961637
   (""
    (then (skeep) (expand "orig_fp_guard3") (expand "orig_fp_guard2")
     (expand "orig_fp_guard1") (name-replace "zero_fp" "RtoD(0)")
     (grind))
    nil nil)
   ((orig_fp_guard2 const-decl "bool" quadrant nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "real" exponentiation nil)
    (Fminus const-decl "float" float "float/")
    (Fle? const-decl "bool" float "float/")
    (<= const-decl "bool" float "float/")
    (Flt? const-decl "bool" float "float/")
    (< const-decl "bool" float "float/")
    (expt def-decl "real" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (orig_fp_guard1 const-decl "bool" quadrant nil)
    (orig_fp_guard3 const-decl "bool" quadrant nil))
   shostak))
 (orig_fp_case4_simplification 0
  (orig_fp_case4_simplification-1 nil 3746961637
   (""
    (then (skeep) (expand "orig_fp_guard3") (expand "orig_fp_guard2")
     (expand "orig_fp_guard1") (name-replace "zero_fp" "RtoD(0)")
     (grind))
    nil nil)
   ((orig_fp_guard2 const-decl "bool" quadrant nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "real" exponentiation nil)
    (Fminus const-decl "float" float "float/")
    (Fle? const-decl "bool" float "float/")
    (<= const-decl "bool" float "float/")
    (Flt? const-decl "bool" float "float/")
    (< const-decl "bool" float "float/")
    (expt def-decl "real" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (orig_fp_guard1 const-decl "bool" quadrant nil)
    (orig_fp_guard3 const-decl "bool" quadrant nil))
   shostak)))

