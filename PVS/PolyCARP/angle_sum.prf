(angle_sum
 (norm_angle 0
  (norm_angle-1 nil 3710695940
   ("" (skeep)
    (("" (lemma "norm_normalize")
      (("" (inst?)
        (("" (mult-eq -1 -1)
          (("" (lemma "sq_norm")
            (("" (inst?)
              (("" (expand "sq")
                (("" (replace -1)
                  (("" (expand "sqv")
                    (("" (expand "*")
                      (("" (case "NOT (-1<= ^(v)`x  AND ^(v)`x <=1)")
                        (("1" (ground)
                          (("1" (flip-ineq 1)
                            (("1" (move-terms -1 l 1)
                              (("1"
                                (move-terms -1 r 1)
                                (("1"
                                  (case "NOT -(-1) = 1")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (mult-ineq -1 -1)
                                      (("2"
                                        (simplify -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flip-ineq 1)
                            (("2" (mult-ineq -1 -1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2"
                          (inst 1
                           "IF ^(v)`y >= 0 THEN acos(^(v)`x) ELSE 2*pi-acos(^(v)`x) ENDIF")
                          (("1" (lift-if 1)
                            (("1" (split 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma "cos_acos")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (replace -1 -6 :dir rl)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (lemma "sin_cos_one")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (move-terms -1 l 1)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (move-terms -6 l 1)
                                                  (("1"
                                                    (move-terms -6 l 1)
                                                    (("1"
                                                      (simplify -6)
                                                      (("1"
                                                        (case
                                                         "NOT -1 * -(sin(acos(^(v)`x)) * sin(acos(^(v)`x))) = sin(acos(^(v)`x)) * sin(acos(^(v)`x))")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (lemma
                                                             "sq_eq")
                                                            (("2"
                                                              (case
                                                               "sin(acos(^(v)`x))>=0")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "sin(acos(^(v)`x))"
                                                                 "^(v)`y")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     -3)
                                                                    (("1"
                                                                      (expand
                                                                       "sq")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replaces
                                                                           -2)
                                                                          (("1"
                                                                            (decompose-equality
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "sin_ge_0")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (case
                                   " NOT ^(v)`x = cos(2 * pi - acos(^(v)`x))")
                                  (("1"
                                    (lemma "cos_period")
                                    (("1"
                                      (inst -1 "- acos(^(v)`x)" "1")
                                      (("1"
                                        (replaces -1 1 :dir rl)
                                        (("1"
                                          (rewrite "cos_neg")
                                          (("1"
                                            (rewrite "cos_acos")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1 -5)
                                    (("2"
                                      (lemma "sin_cos_one")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (move-terms -1 l 1)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (move-terms -5 l 1)
                                              (("2"
                                                (move-terms -5 l 1)
                                                (("2"
                                                  (simplify -5)
                                                  (("2"
                                                    (case
                                                     "NOT -1 * -(sin(2 * pi - acos(^(v)`x)) * sin(2 * pi - acos(^(v)`x))) = sin(2 * pi - acos(^(v)`x)) * sin(2 * pi - acos(^(v)`x))")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (lemma "sq_eq")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "abs(^(v)`y)"
                                                           "abs(sin(2 * pi - acos(^(v)`x)))")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide -2)
                                                              (("2"
                                                                (lemma
                                                                 "sq_abs")
                                                                (("2"
                                                                  (copy
                                                                   -1)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "sq")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flip-ineq
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "abs"
                                                                                   -2
                                                                                   1)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     " acos(^(v)`x)")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "sin_le_0")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (case
                                                                                             "NOT  abs(sin(2 * pi - acos(^(v)`x))) = -sin(2 * pi - acos(^(v)`x))")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "abs"
                                                                                               1)
                                                                                              (("1"
                                                                                                (lift-if
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "NOT ^(v)`y = 
sin(2 * pi - acos(^(v)`x))")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replaces
                                                                                                   -1
                                                                                                   1
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "cos_period")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "- acos(^(v)`x)"
                                                                                                       "1")
                                                                                                      (("2"
                                                                                                        (replaces
                                                                                                         -1
                                                                                                         1
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "cos_neg")
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "cos_acos")
                                                                                                            (("2"
                                                                                                              (decompose-equality
                                                                                                               1)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (assert)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "acos(^(v)`x)")
                                      (("2"
                                        (case "acos(^(v)`x) = 0")
                                        (("1"
                                          (lemma "acos_1")
                                          (("1"
                                            (lemma "acos_bij")
                                            (("1"
                                              (expand "bijective?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "injective?")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "1"
                                                     "^(v)`x")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         -10
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (move-terms
                                                           -10
                                                           l
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "sq_eq_0")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "^(v)`y")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "sq")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (assert)
                            (("3" (flatten) (("3" (assert) nil nil))
                              nil))
                            nil)
                           ("4" (assert)
                            (("4" (flatten) (("4" (assert) nil nil))
                              nil))
                            nil)
                           ("5" (flatten) (("5" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_normalize formula-decl nil vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil
    (< const-decl "bool" reals nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (cos const-decl "real" sincos_def trig)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (acos const-decl "nnreal_le_pi" acos trig)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (cos_acos formula-decl nil trig_inverses trig)
    (sin_cos_one formula-decl nil sincos_def trig)
    (sin const-decl "real" sincos_def trig)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sin_ge_0 formula-decl nil trig_ineq trig)
    (sq_eq formula-decl nil sq reals)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cos_neg formula-decl nil sincos_def trig)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (cos_period formula-decl nil sincos trig)
    (sin_le_0 formula-decl nil trig_ineq trig)
    (sq_abs formula-decl nil sq reals)
    (acos_1 formula-decl nil acos trig)
    (bijective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (sq_eq_0 formula-decl nil sq reals)
    (acos_bij formula-decl nil acos trig)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (sq_norm formula-decl nil vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (norm_angle_eq 0
  (norm_angle_eq-1 nil 3715954940
   ("" (skeep)
    (("" (lemma "norm_scal")
      (("" (skeep -2)
        (("" (inst -1 "a" "w")
          (("" (expand "^")
            (("" (rewrite -2)
              (("" (rewrite -1) (("" (grind :exclude "norm") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_scal formula-decl nil vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors) nil
    (* const-decl "Vector" vectors_2D vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (^ const-decl "Normalized" vectors_2D vectors))
   shostak))
 (ac_co_TCC1 0
  (ac_co_TCC1-1 nil 3710858176
   ("" (skeep)
    (("" (expand "abs" -1)
      (("" (lift-if -1)
        (("" (split -1)
          (("1" (flatten)
            (("1" (rewrite "cos_neg" :dir rl)
              (("1" (rewrite "acos_cos")
                (("1" (expand "abs") (("1" (ground) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "abs")
              (("2" (ground) (("2" (rewrite "acos_cos") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (cos_neg formula-decl nil sincos_def trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (acos_cos formula-decl nil trig_inverses trig)
    (nnreal type-eq-decl nil real_types nil)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (ac_co subtype "real_defs.abs(angle_sum.phi)"
    "{x: reals.real | x = acos.acos(sincos_def.cos(angle_sum.phi))}")))
 (ac_co_TCC2 0
  (ac_co_TCC2-1 nil 3710858176
   ("" (skeep)
    (("" (typepred "phi")
      (("" (flip-ineq 1)
        (("" (case "NOT cos(phi) = cos(-abs(phi))")
          (("1" (hide-all-but 1)
            (("1" (expand "abs")
              (("1" (lift-if 1)
                (("1" (split 1)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (rewrite "cos_neg" :dir rl) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replaces -1)
            (("2" (lemma " cos_period")
              (("2" (inst -1 "-abs(phi)" "1")
                (("2" (replaces -1)
                  (("2" (rewrite "acos_cos") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_neg formula-decl nil sincos_def trig)
    (cos_period formula-decl nil sincos trig)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (acos_cos formula-decl nil trig_inverses trig)
    (nnreal type-eq-decl nil real_types nil)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (ac_co subtype
    "(number_fields.-)(number_fields.*(2, pi_def.pi), real_defs.abs(angle_sum.phi))"
    "{x: reals.real | x = acos.acos(sincos_def.cos(angle_sum.phi))}")))
 (signed_acos 0
  (signed_acos-2 nil 3711357707
   ("" (skeep)
    ((""
      (case "signed_area2(zero, v, w)=1/2*norm(v)*norm(w)*sin(aw-av)")
      (("1" (replaces -1)
        (("1" (ground)
          (("1" (flip-ineq -1)
            (("1" (flip-ineq 2)
              (("1" (lemma "sin_ge_0" ("a" "aw-av"))
                (("1" (grind :exclude "norm")
                  (("1" (flip-ineq -3)
                    (("1" (cross-mult 1)
                      (("1"
                        (case "(1 * (norm(v) * norm(w) * sin(aw - av))) = norm(v)*norm(w)*sin(aw-av)")
                        (("1" (rewrite -1)
                          (("1" (div-by 1 "norm(v)*norm(w)")
                            (("1" (case "0 / (norm(v) * norm(w))=0")
                              (("1" (rewrite -1) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flip-ineq -1)
            (("2" (flip-ineq 2)
              (("2" (case "aw-av>=-2*pi")
                (("1" (lemma "sin_le_0" ("a" "-(aw-av)"))
                  (("1" (lemma "sin_neg" ("a" "aw-av"))
                    (("1" (grind :exclude "norm")
                      (("1" (flip-ineq -5)
                        (("1" (cross-mult 1)
                          (("1"
                            (case "(1 * (norm(v) * norm(w) * sin(aw - av))) = norm(v)*norm(w)*sin(aw-av)")
                            (("1" (rewrite -1)
                              (("1"
                                (div-by 1 "norm(v)*norm(w)")
                                (("1"
                                  (case "0 / (norm(v) * norm(w))=0")
                                  (("1"
                                    (rewrite -1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "aw-av>0")
                  (("1" (lemma "sin_ge_0" ("a" "aw-av"))
                    (("1" (grind :exclude "norm") nil nil)) nil)
                   ("2" (ground) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (case "aw-av<2*pi")
            (("1" (lemma "sin_lt_0" ("a" "aw-av"))
              (("1" (grind :exclude "norm")
                (("1" (div-by 1 "1 / 2 * (norm(v) * norm(w))")
                  (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (ground) nil nil))
            nil)
           ("4" (lemma "sin_gt_0" ("a" "-(aw-av)"))
            (("4" (lemma "sin_neg" ("a" "aw-av"))
              (("4" (grind :exclude "norm")
                (("4" (div-by 1 "1 / 2 * (norm(v) * norm(w))")
                  (("4" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "aw")
        (("2" (typepred "av")
          (("2" (expand "^")
            (("2" (cross-mult -3)
              (("2" (cross-mult -6)
                (("2" (expand "*")
                  (("2" (lemma "sin_minus" ("a" "aw" "b" "av"))
                    (("2" (expand "signed_area2")
                      (("2" (hide 2)
                        (("2" (replace -1 :hide? t)
                          (("2" (expand "zero")
                            (("2" (expand "det")
                              (("2"
                                (expand "rows")
                                (("2"
                                  (expand "columns")
                                  (("2"
                                    (expand "length")
                                    (("2"
                                      (expand "length")
                                      (("2"
                                        (expand "length")
                                        (("2"
                                          (expand "length")
                                          (("2"
                                            (expand "columns")
                                            (("2"
                                              (expand "columns")
                                              (("2"
                                                (expand "columns")
                                                (("2"
                                                  (expand "length")
                                                  (("2"
                                                    (expand "length")
                                                    (("2"
                                                      (expand "length")
                                                      (("2"
                                                        (expand
                                                         "length")
                                                        (("2"
                                                          (eval-expr
                                                           "max(3, max(3, max(3, 0)))")
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "sigma")
                                                              (("2"
                                                                (expand
                                                                 "sigma")
                                                                (("2"
                                                                  (expand
                                                                   "sigma")
                                                                  (("2"
                                                                    (expand
                                                                     "sigma")
                                                                    (("2"
                                                                      (expand
                                                                       "remove")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sin_minus formula-decl nil sincos trig)
    (rows const-decl "nat" matrices matrices)
    (length def-decl "nat" list_props nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nth def-decl "T" list_props nil)
    (row const-decl "Vector" matrices matrices)
    (access const-decl "real" matrices matrices)
    (entry const-decl "real" matrices matrices)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (array2list_it def-decl
     "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
     array2list structures)
    (array2list const-decl
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
     array2list structures)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}"
     matrices matrices)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (form_matrix_square application-judgement "FullMatrix" matrices
     matrices)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (remove const-decl "{N |
   (rows(M) > 1 AND columns(M) > 1 IMPLIES
     (rows(N) = rows(M) - 1 AND columns(N) = columns(M) - 1))
    AND
    (FORALL (m, n):
       LET newm = IF m >= i OR i >= rows(M) THEN m + 1 ELSE m ENDIF,
           newn = IF n >= j OR j >= columns(M) THEN n + 1 ELSE n ENDIF
         IN entry(N)(m, n) = entry(M)(newm, newn))}"
      matrix_props matrices)
    (sigma def-decl "real" sigma reals)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (det def-decl "real" matrix_props matrices)
    (* const-decl "Vector" vectors_2D vectors)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (scal_1 formula-decl nil vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (scal_div_mult_left formula-decl nil vectors_2D vectors)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (sin_gt_0 formula-decl nil trig_ineq trig)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (sin_lt_0 formula-decl nil trig_ineq trig)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sin_neg formula-decl nil sincos_def trig)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (sin_le_0 formula-decl nil trig_ineq trig)
    (minus_real_is_real application-judgement "real" reals nil)
    (sign const-decl "subrange[-1, 1]" in_out_def nil)
    (subrange type-eq-decl nil subrange_type nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sin_ge_0 formula-decl nil trig_ineq trig)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (signed_area2 const-decl "real" in_out_def nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (sin const-decl "real" sincos_def trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors))
   nil)
  (signed_acos-1 nil 3711348930
   ("" (skeep)
    (("" (typepred (av))
      (("" (typepred (aw))
        (("" (expand "signed_area2")
          (("" (rewrite "det_3calc")
            ((""
              (case "NOT FORALL (x:real,a:posreal): sign(x) = sign(a*x)")
              (("1" (hide-all-but 1)
                (("1" (grind)
                  (("1" (swap-rel -4)
                    (("1" (move-terms -4 r 1)
                      (("1" (assert)
                        (("1" (mult-ineq -3 -4)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flip-ineq 1)
                    (("2" (mult-ineq -1 -4) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2"
                (case "NOT sign(1/2 * (v`x * w`y - v`y * w`x)) = sign(^(v)`x * ^(w)`y - ^(v)`y * ^(w)`x)")
                (("1"
                  (inst-cp -1 "1 / 2 * (v`x * w`y - v`y * w`x)" "2")
                  (("1" (replaces -1)
                    (("1" (replaces -2)
                      (("1" (simplify 1)
                        (("1"
                          (case "NOT (FORALL (z:Nz_vect2): 1/norm(z)*z`x = ^(z)`x AND 1/norm(z)*z`y = ^(z)`y)")
                          (("1" (hide-all-but 1)
                            (("1" (skeep)
                              (("1"
                                (expand "^")
                                (("1"
                                  (expand "*")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (inst-cp -2 "v`x * w`y - v`y * w`x"
                             "1/norm(v)")
                            (("2" (simplify -3)
                              (("2"
                                (inst-cp -1 "v")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (case
                                     "NOT v`x * w`y * (1 / norm(v)) - v`y * w`x * (1 / norm(v)) = ^(v)`x * w`y  - ^(v)`y * w`x ")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replaces -2 1 :dir rl)
                                        (("1"
                                          (replaces -2 1 :dir rl)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (hide (-2 -3))
                                        (("2"
                                          (inst
                                           -2
                                           "^(v)`x * w`y - ^(v)`y * w`x"
                                           "1/norm(w)")
                                          (("2"
                                            (inst -1 "w")
                                            (("2"
                                              (simplify -2)
                                              (("2"
                                                (replaces -2)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replaces
                                                       -1
                                                       -3
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (case
                                                         "NOT ^(v)`x * w`y * (1 / norm(w)) - ^(v)`y * w`x * (1 / norm(w)) = ^(v)`x * ^(w)`y  - ^(v)`y * ^(w)`x ")
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replaces -1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (replace -4 1)
                    (("2" (replace -7 1)
                      (("2" (simplify 1)
                        (("2" (lemma "sin_minus")
                          (("2" (inst -1 "aw" "av")
                            (("2" (replaces -1 1 :dir rl)
                              (("2"
                                (lemma "sin_lt_0")
                                (("2"
                                  (expand "abs")
                                  (("2"
                                    (lift-if 1)
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (move-terms -1 l 1)
                                          (("1"
                                            (move-terms -1 l 1)
                                            (("1"
                                              (case "NOT 0<aw-av")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide -2)
                                                (("2"
                                                  (lemma "sin_ge_0")
                                                  (("2"
                                                    (case
                                                     "NOT aw-av<=2*pi")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (case "aw-av>pi")
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "aw-av = 2*pi")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (rewrite
                                                                 "sin_2pi")
                                                                (("1"
                                                                  (expand
                                                                   "sign")
                                                                  (("1"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (signed_acos2 0
  (signed_acos2-1 nil 3712930994
   ("" (skeep)
    (("" (typepred "av")
      (("" (typepred "aw")
        (("" (lemma "sin_minus")
          (("" (expand "^")
            (("" (cross-mult -4)
              (("" (cross-mult -7)
                (("" (expand "*")
                  (("" (decompose-equality -4)
                    (("" (decompose-equality -8)
                      (("" (split)
                        (("1" (flatten)
                          (("1" (hide-all-but -1)
                            (("1" (grind)
                              (("1"
                                (reveal -1 -2 -3 -4 -5 -6 -7 -8 -9 1 2)
                                (("1"
                                  (replace -1 -10)
                                  (("1"
                                    (replace -2 -10)
                                    (("1"
                                      (replace -3 -10)
                                      (("1"
                                        (replace -4 -10)
                                        (("1"
                                          (factor -10)
                                          (("1"
                                            (div-by
                                             -10
                                             "1 / 2 * norm(v) * norm(w)")
                                            (("1"
                                              (case
                                               "0 / (1 / 2 * norm(v) * norm(w))=0")
                                              (("1"
                                                (rewrite -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -5 "aw" "av")
                                                    (("1"
                                                      (replace
                                                       -5
                                                       -10
                                                       rl)
                                                      (("1"
                                                        (hide
                                                         -1
                                                         -2
                                                         -3
                                                         -4
                                                         -5)
                                                        (("1"
                                                          (case
                                                           "0<=aw-av AND aw-av<=2*pi")
                                                          (("1"
                                                            (lemma
                                                             "sin_eq_0_2pi")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "aw-av")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "-2*pi<=aw-av AND aw-av<=0")
                                                            (("1"
                                                              (lemma
                                                               "sin_neg")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "aw-av")
                                                                (("1"
                                                                  (lemma
                                                                   "sin_eq_0_2pi")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "-(aw-av)")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide-all-but 1)
                            (("2" (grind)
                              (("1"
                                (reveal -1 -2 -3 -4 -5 -6 -7 -8 -9 -10)
                                (("1"
                                  (flip-ineq -11)
                                  (("1"
                                    (replace -2 1)
                                    (("1"
                                      (replace -3 1)
                                      (("1"
                                        (replace -4 1)
                                        (("1"
                                          (replace -5 1)
                                          (("1"
                                            (factor 1)
                                            (("1"
                                              (div-by
                                               1
                                               "(1 / 2) * norm(v) * norm(w)"
                                               +)
                                              (("1"
                                                (case
                                                 "0 / ((1 / 2) * norm(v) * norm(w))=0")
                                                (("1"
                                                  (rewrite -1)
                                                  (("1"
                                                    (inst -6 "aw" "av")
                                                    (("1"
                                                      (replace -6 1 rl)
                                                      (("1"
                                                        (hide
                                                         -2
                                                         -3
                                                         -4
                                                         -5
                                                         -6)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (move-terms
                                                             -1
                                                             r)
                                                            (("1"
                                                              (lemma
                                                               "sin_0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "aw-av=pi")
                                                            (("1"
                                                              (lemma
                                                               "sin_pi")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "aw-av=-pi")
                                                              (("1"
                                                                (lemma
                                                                 "sin_neg")
                                                                (("1"
                                                                  (lemma
                                                                   "sin_pi")
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "pi")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (reveal -1 -2 -3 -4 -5 -6 -7 -8 -9 10)
                                (("2"
                                  (reveal -10)
                                  (("2"
                                    (reveal -1)
                                    (("2"
                                      (replace -4 1)
                                      (("2"
                                        (replace -5 1)
                                        (("2"
                                          (replace -6 1)
                                          (("2"
                                            (replace -7 1)
                                            (("2"
                                              (factor 1)
                                              (("2"
                                                (div-by
                                                 1
                                                 "1 / 2 * norm(v) * norm(w)"
                                                 +)
                                                (("2"
                                                  (case
                                                   "0 / (1 / 2 * norm(v) * norm(w))=0")
                                                  (("1"
                                                    (rewrite -1)
                                                    (("1"
                                                      (inst
                                                       -8
                                                       "aw"
                                                       "av")
                                                      (("1"
                                                        (replace
                                                         -8
                                                         1
                                                         rl)
                                                        (("1"
                                                          (hide -3)
                                                          (("1"
                                                            (hide
                                                             -2
                                                             -3
                                                             -4
                                                             -5
                                                             -6
                                                             -7
                                                             -8
                                                             -9
                                                             -10)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (move-terms
                                                                 -1
                                                                 r)
                                                                (("1"
                                                                  (lemma
                                                                   "sin_0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "aw-av=pi")
                                                                (("1"
                                                                  (lemma
                                                                   "sin_pi")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "aw-av=-pi")
                                                                  (("1"
                                                                    (lemma
                                                                     "sin_neg")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "pi")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (grind)
                                                                          (("1"
                                                                            (lemma
                                                                             "sin_pi")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin const-decl "real" sincos_def trig)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sin_minus formula-decl nil sincos trig)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (scal_div_mult_left formula-decl nil vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (* const-decl "Vector" vectors_2D vectors)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sin_0 formula-decl nil sincos_def trig)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sin_pi formula-decl nil sincos trig)
    (sign const-decl "subrange[-1, 1]" in_out_def nil)
    (signed_area2 const-decl "real" in_out_def nil)
    (sigma def-decl "real" sigma reals)
    (expt def-decl "real" exponentiation nil)
    (det def-decl "real" matrix_props matrices)
    (remove const-decl "{N |
   (rows(M) > 1 AND columns(M) > 1 IMPLIES
     (rows(N) = rows(M) - 1 AND columns(N) = columns(M) - 1))
    AND
    (FORALL (m, n):
       LET newm = IF m >= i OR i >= rows(M) THEN m + 1 ELSE m ENDIF,
           newn = IF n >= j OR j >= columns(M) THEN n + 1 ELSE n ENDIF
         IN entry(N)(m, n) = entry(M)(newm, newn))}"
      matrix_props matrices)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}"
     matrices matrices)
    (array2list const-decl
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
     array2list structures)
    (array2list_it def-decl
     "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
     array2list structures)
    (entry const-decl "real" matrices matrices)
    (access const-decl "real" matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (nth def-decl "T" list_props nil)
    (^ const-decl "real" exponentiation nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (rows const-decl "nat" matrices matrices)
    (length def-decl "nat" list_props nil)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sin_eq_0_2pi formula-decl nil sincos trig)
    (sin_neg formula-decl nil sincos_def trig)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (signed_acos3 0
  (signed_acos3-1 nil 3712931154
   ("" (skeep)
    (("" (lemma "signed_acos")
      (("" (lemma "signed_acos2") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((signed_acos formula-decl nil angle_sum nil)
    (sin const-decl "real" sincos_def trig)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sign const-decl "subrange[-1, 1]" in_out_def nil)
    (signed_area2 const-decl "real" in_out_def nil)
    (sigma def-decl "real" sigma reals)
    (expt def-decl "real" exponentiation nil)
    (det def-decl "real" matrix_props matrices)
    (remove const-decl "{N |
   (rows(M) > 1 AND columns(M) > 1 IMPLIES
     (rows(N) = rows(M) - 1 AND columns(N) = columns(M) - 1))
    AND
    (FORALL (m, n):
       LET newm = IF m >= i OR i >= rows(M) THEN m + 1 ELSE m ENDIF,
           newn = IF n >= j OR j >= columns(M) THEN n + 1 ELSE n ENDIF
         IN entry(N)(m, n) = entry(M)(newm, newn))}"
      matrix_props matrices)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}"
     matrices matrices)
    (array2list const-decl
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
     array2list structures)
    (array2list_it def-decl
     "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
     array2list structures)
    (entry const-decl "real" matrices matrices)
    (access const-decl "real" matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (nth def-decl "T" list_props nil)
    (^ const-decl "real" exponentiation nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (rows const-decl "nat" matrices matrices)
    (length def-decl "nat" list_props nil)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (signed_acos2 formula-decl nil angle_sum nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   shostak))
 (vect_ang_sum4 0
  (vect_ang_sum4-1 nil 3712931449
   ("" (skeep)
    (("" (ground)
      (("" (ground)
        (("1" (case "a2-a1<0")
          (("1"
            (lemma "signed_acos"
             ("v" "p1" "w" "p2" "av" "a1" "aw" "a2"))
            (("1" (flatten)
              (("1" (hide -1)
                (("1" (ground)
                  (("1"
                    (case "sign(signed_area2(zero, p1, p2)) < 0 IMPLIES sign(signed_area2(zero, p1, p2)) =-1")
                    (("1" (ground)
                      (("1" (replaces -1)
                        (("1" (hide -1)
                          (("1" (expand "arg_ac1")
                            (("1" (typepred "a2")
                              (("1"
                                (typepred "a1")
                                (("1"
                                  (expand "^")
                                  (("1"
                                    (cross-mult -3)
                                    (("1"
                                      (cross-mult -6)
                                      (("1"
                                        (expand "*")
                                        (("1"
                                          (decompose-equality)
                                          (("1"
                                            (decompose-equality)
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (case
                                                       "norm(p1) * cos(a1) * (norm(p2) * cos(a2)) * (1 / norm(p1)) *
             (1 / norm(p2))
             +
             norm(p1) * sin(a1) * (norm(p2) * sin(a2)) * (1 / norm(p1)) *
              (1 / norm(p2)) = cos(a1)*cos(a2)+sin(a1)*sin(a2)")
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (move-terms
                                                             1
                                                             l
                                                             2)
                                                            (("1"
                                                              (move-terms
                                                               1
                                                               r
                                                               1)
                                                              (("1"
                                                                (lemma
                                                                 "cos_minus"
                                                                 ("a"
                                                                  "a1"
                                                                  "b"
                                                                  "a2"))
                                                                (("1"
                                                                  (swap-rel
                                                                   1)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       "acos_cos"
                                                                       ("x"
                                                                        "a1-a2"))
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "a2-a1=0")
            (("1"
              (lemma "signed_acos2"
               ("v" "p1" "w" "p2" "av" "a1" "aw" "a2"))
              (("1" (flatten)
                (("1" (hide -1) (("1" (ground) nil nil)) nil)) nil))
              nil)
             ("2" (case "a2-a1>0")
              (("1"
                (lemma "signed_acos3"
                 ("v" "p1" "w" "p2" "av" "a1" "aw" "a2"))
                (("1" (flatten)
                  (("1" (hide -1)
                    (("1" (ground)
                      (("1"
                        (case "sign(signed_area2(zero, p1, p2)) > 0 IMPLIES sign(signed_area2(zero, p1, p2))=1")
                        (("1" (split)
                          (("1" (replaces -1)
                            (("1" (move-terms 3 l 2)
                              (("1"
                                (expand "arg_ac1")
                                (("1"
                                  (typepred "a2")
                                  (("1"
                                    (typepred "a1")
                                    (("1"
                                      (expand "^")
                                      (("1"
                                        (cross-mult -3)
                                        (("1"
                                          (cross-mult -6)
                                          (("1"
                                            (expand "*")
                                            (("1"
                                              (decompose-equality)
                                              (("1"
                                                (decompose-equality)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (case
                                                           "norm(p1) * cos(a1) * (norm(p2) * cos(a2)) * (1 / norm(p1)) *
             (1 / norm(p2))
             +
             norm(p1) * sin(a1) * (norm(p2) * sin(a2)) * (1 / norm(p1)) *
              (1 / norm(p2)) = cos(a1)*cos(a2)+sin(a1)*sin(a2)")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (lemma
                                                               "cos_minus"
                                                               ("a"
                                                                "a1"
                                                                "b"
                                                                "a2"))
                                                              (("1"
                                                                (lemma
                                                                 "cos_minus"
                                                                 ("a"
                                                                  "a2"
                                                                  "b"
                                                                  "a1"))
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     3
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       "acos_cos"
                                                                       ("x"
                                                                        "a2-a1"))
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         3)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil)
                         ("2" (ground) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (ground) nil nil))
              nil))
            nil))
          nil)
         ("2"
          (lemma "signed_acos2"
           ("v" "p1" "w" "p2" "av" "a1" "aw" "a2"))
          (("2" (flatten)
            (("2" (hide -1)
              (("2" (ground) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("3" (case "abs(a1-a2)>pi")
          (("1"
            (lemma "signed_acos"
             ("v" "p1" "w" "p2" "av" "a1" "aw" "a2"))
            (("1" (flatten)
              (("1" (hide -1)
                (("1" (ground)
                  (("1"
                    (case "sign(signed_area2(zero, p1, p2)) < 0 IMPLIES sign(signed_area2(zero, p1, p2)) =-1")
                    (("1" (ground)
                      (("1" (replaces -1)
                        (("1" (hide -1)
                          (("1" (expand "arg_ac1")
                            (("1" (typepred "a1")
                              (("1"
                                (typepred "a2")
                                (("1"
                                  (expand "^")
                                  (("1"
                                    (cross-mult -3)
                                    (("1"
                                      (cross-mult -6)
                                      (("1"
                                        (expand "*")
                                        (("1"
                                          (decompose-equality)
                                          (("1"
                                            (decompose-equality)
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (case
                                                       "norm(p1) * cos(a1) * (norm(p2) * cos(a2)) * (1 / norm(p1)) *
             (1 / norm(p2))
             +
             norm(p1) * sin(a1) * (norm(p2) * sin(a2)) * (1 / norm(p1)) *
              (1 / norm(p2)) = cos(a1)*cos(a2)+sin(a1)*sin(a2)")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (move-terms
                                                           1
                                                           l
                                                           1)
                                                          (("1"
                                                            (lemma
                                                             "cos_minus"
                                                             ("a"
                                                              "a1"
                                                              "b"
                                                              "a2"))
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1
                                                               rl)
                                                              (("1"
                                                                (lemma
                                                                 "acos_cos"
                                                                 ("x"
                                                                  "-(a1-a2+pi)"))
                                                                (("1"
                                                                  (lemma
                                                                   "cos_neg"
                                                                   ("a"
                                                                    "a1-a2+pi"))
                                                                  (("1"
                                                                    (case
                                                                     "acos(cos(-(a1 - a2 + pi))) = acos(cos(-a1+a2-pi))")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -3)
                                                                      (("1"
                                                                        (lemma
                                                                         "cos_minus_pi"
                                                                         ("a"
                                                                          "-a1+a2"))
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           -4)
                                                                          (("1"
                                                                            (lemma
                                                                             "acos_neg"
                                                                             ("x"
                                                                              "cos(-a1+a2)"))
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               -5)
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "cos_neg"
                                                                                             ("a"
                                                                                              "-a1+a2"))
                                                                                            (("1"
                                                                                              (case
                                                                                               "-(-a1+a2)=a1-a2")
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (ground) nil nil))
          nil)
         ("4" (case "abs(a1-a2)>pi AND a2<a1")
          (("1" (flatten)
            (("1"
              (lemma "signed_acos3"
               ("v" "p1" "w" "p2" "av" "a1" "aw" "a2"))
              (("1" (flatten)
                (("1" (hide -1)
                  (("1" (ground)
                    (("1"
                      (case "sign(signed_area2(zero, p1, p2)) > 0 IMPLIES sign(signed_area2(zero, p1, p2)) =1")
                      (("1" (ground)
                        (("1" (replaces -1)
                          (("1" (hide -1)
                            (("1" (move-terms 2 l 2)
                              (("1"
                                (expand "arg_ac1")
                                (("1"
                                  (typepred "a1")
                                  (("1"
                                    (typepred "a2")
                                    (("1"
                                      (expand "^")
                                      (("1"
                                        (cross-mult -3)
                                        (("1"
                                          (cross-mult -6)
                                          (("1"
                                            (expand "*")
                                            (("1"
                                              (decompose-equality)
                                              (("1"
                                                (decompose-equality)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (case
                                                           "norm(p1) * cos(a1) * (norm(p2) * cos(a2)) * (1 / norm(p1)) *
             (1 / norm(p2))
             +
             norm(p1) * sin(a1) * (norm(p2) * sin(a2)) * (1 / norm(p1)) *
              (1 / norm(p2)) = cos(a1)*cos(a2)+sin(a1)*sin(a2)")
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (lemma
                                                               "cos_minus"
                                                               ("a"
                                                                "a1"
                                                                "b"
                                                                "a2"))
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 2
                                                                 rl)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "acos_cos"
                                                                     ("x"
                                                                      "a1-a2-pi"))
                                                                    (("1"
                                                                      (lemma
                                                                       "cos_minus_pi"
                                                                       ("a"
                                                                        "a1-a2"))
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         -2)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "acos_neg"
                                                                             ("x"
                                                                              "cos(a1-a2)"))
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               -2)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (ground)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (ground)
            (("2" (case "a1=a2")
              (("1" (grind) nil nil) ("2" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nil application-judgement "{x: real | -1 <= x AND x <= 1}"
     in_out_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_neg formula-decl nil sincos_def trig)
    (acos_neg formula-decl nil acos trig)
    (cos_minus_pi formula-decl nil trig_extra trig)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sin const-decl "real" sincos_def trig)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (asin const-decl "real_abs_le_pi2" asin trig)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sigma def-decl "real" sigma reals)
    (expt def-decl "real" exponentiation nil)
    (det def-decl "real" matrix_props matrices)
    (remove const-decl "{N |
   (rows(M) > 1 AND columns(M) > 1 IMPLIES
     (rows(N) = rows(M) - 1 AND columns(N) = columns(M) - 1))
    AND
    (FORALL (m, n):
       LET newm = IF m >= i OR i >= rows(M) THEN m + 1 ELSE m ENDIF,
           newn = IF n >= j OR j >= columns(M) THEN n + 1 ELSE n ENDIF
         IN entry(N)(m, n) = entry(M)(newm, newn))}"
      matrix_props matrices)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}"
     matrices matrices)
    (array2list const-decl
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
     array2list structures)
    (array2list_it def-decl
     "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
     array2list structures)
    (entry const-decl "real" matrices matrices)
    (access const-decl "real" matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (nth def-decl "T" list_props nil)
    (^ const-decl "real" exponentiation nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (rows const-decl "nat" matrices matrices)
    (length def-decl "nat" list_props nil)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (acos_cos formula-decl nil trig_inverses trig)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cos_minus formula-decl nil sincos trig)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (acos const-decl "nnreal_le_pi" acos trig)
    (* const-decl "Vector" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (scal_1 formula-decl nil vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (scal_div_mult_left formula-decl nil vectors_2D vectors)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (arg_ac1 const-decl "real" in_out_def nil)
    (TRUE const-decl "bool" booleans nil)
    (signed_area2 const-decl "real" in_out_def nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sign const-decl "subrange[-1, 1]" in_out_def nil)
    (subrange type-eq-decl nil subrange_type nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (signed_acos formula-decl nil angle_sum nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (signed_acos3 formula-decl nil angle_sum nil)
    (signed_acos2 formula-decl nil angle_sum nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (vect_ang_sum5_TCC1 0
  (vect_ang_sum5_TCC1-1 nil 3713113685
   ("" (skeep)
    (("" (case "^(p1) * ^(p2) = arg_ac1(p1,p2)")
      (("1" (assert) nil nil)
       ("2" (expand "arg_ac1") (("2" (propax) nil nil)) nil))
      nil))
    nil)
   ((arg_ac1 const-decl "real" in_out_def nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "real" vectors_2D vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nil application-judgement "{x: real | -1 <= x AND x <= 1}"
     in_out_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (vect_ang_sum5 subtype
    "vectors_2D.*(vectors_2D.^(angle_sum.p1), vectors_2D.^(angle_sum.p2))"
    "real_abs_le1")))
 (vect_ang_sum5 0
  (vect_ang_sum5-1 nil 3713113691
   ("" (lemma "vect_ang_sum4")
    (("" (skeep)
      (("" (inst?)
        (("" (skoletin)
          (("" (skoletin)
            (("" (split -1)
              (("1" (flatten)
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (replace -3)
                      (("1" (expand "arg_ac1") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "arg_ac1")
                (("2" (flatten)
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (typepred "a1")
                        (("1" (expand "on_line")
                          (("1" (inst 2 "norm(p2)/(norm(p1)+norm(p2))")
                            (("1"
                              (case "NOT (cos(a2) = -cos(a1) and sin(a2) = -sin(a1))")
                              (("1"
                                (expand "abs" -4)
                                (("1"
                                  (lift-if -4)
                                  (("1"
                                    (split -4)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (simplify -2)
                                        (("1"
                                          (case "a1 = a2-pi")
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (rewrite "neg_cos")
                                              (("1"
                                                (rewrite "neg_sin")
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (move-terms -1 l 2)
                                        (("2"
                                          (replace -1 2)
                                          (("2"
                                            (rewrite "neg_cos" :dir rl)
                                            (("2"
                                              (rewrite
                                               "neg_sin"
                                               :dir
                                               rl)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (case "NOT ^(p2) = -^(p1)")
                                  (("1"
                                    (typepred (a2))
                                    (("1"
                                      (replace -3 1)
                                      (("1"
                                        (replace -8 1)
                                        (("1"
                                          (expand "-")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "^" -1)
                                    (("2"
                                      (case
                                       "not p2 = (-norm(p2)/norm(p1))*p1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "*")
                                          (("1"
                                            (expand "-")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (cross-mult -1)
                                                    (("1"
                                                      (cross-mult -2)
                                                      (("1"
                                                        (decompose-equality
                                                         1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (name
                                         "T"
                                         "norm(p2) / (norm(p1) + norm(p2))")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (replace -2 2)
                                            (("2"
                                              (expand "T")
                                              (("2"
                                                (hide-all-but 2)
                                                (("2"
                                                  (expand "zero")
                                                  (("2"
                                                    (expand "*")
                                                    (("2"
                                                      (decompose-equality
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "+
")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "+
")
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (cross-mult 1) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split -1)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (TRUE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (arg_ac1 const-decl "real" in_out_def nil)
    (nil application-judgement "{x: real | -1 <= x AND x <= 1}"
     in_out_def nil)
    (signed_area2 const-decl "real" in_out_def nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sign const-decl "subrange[-1, 1]" in_out_def nil)
    (subrange type-eq-decl nil subrange_type nil)
    (acos const-decl "nnreal_le_pi" acos trig)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types trig)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (subrange type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (on_line const-decl "bool" angle_sum nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (neg_cos formula-decl nil sincos trig)
    (neg_sin formula-decl nil sincos trig)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors) nil
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "Vector" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (div_cancel3 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    nil (+ const-decl "Vector" vectors_2D vectors)
    (posreal nonempty-type-eq-decl nil real_types nil) nil nil
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sin const-decl "real" sincos_def trig)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (vect_ang_sum4 formula-decl nil angle_sum nil))
   shostak))
 (arg_ac_TCC1 0
  (arg_ac_TCC1-1 nil 3710588216
   ("" (skeep)
    (("" (typepred "s")
      (("" (lemma "norm_eq_0")
        (("" (inst -1 "p1-s")
          (("" (lemma "norm_eq_0")
            (("" (inst -1 "p2-s")
              (("" (flatten -3 -4)
                (("" (move-terms 1 l)
                  (("1" (move-terms 2 l)
                    (("1" (grind :exclude "norm") nil nil)
                     ("2" (split)
                      (("1" (flatten)
                        (("1" (expand "zero")
                          (("1" (decompose-equality 1) nil nil)) nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "zero")
                          (("2" (decompose-equality -1)
                            (("2" (decompose-equality 1)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind)
                    (("2" (expand "zero")
                      (("2" (grind)
                        (("2" (grind)
                          (("2" (decompose-equality 1) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors) nil
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors))
   nil
   (arg_ac subtype
    "(number_fields.*(vectors_2D.norm((vectors_2D.-)(angle_sum.p1, angle_sum.s)), vectors_2D.norm((vectors_2D.-)(angle_sum.p2, angle_sum.s))))"
    "nznum"))))

