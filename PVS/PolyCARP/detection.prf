(detection
 (on_segment_2D_sym 0
  (on_segment_2D_sym-1 nil 3578418698
   ("" (skeep)
    (("" (expand "on_segment_2D?")
      (("" (ground)
        (("1" (skeep -1)
          (("1" (inst + "1-t")
            (("1" (assert)
              (("1" (replaces -3) (("1" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (skeep -1)
          (("2" (inst + "1-t")
            (("2" (assert)
              (("2" (replaces -3) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((on_segment_2D? const-decl "bool" edge_proximity nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "Vector" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (on_segment_2D_alg_def 0
  (on_segment_2D_alg_def-1 nil 3645350033
   ("" (skeep)
    (("" (iff)
      (("" (expand "on_segment_2D_alg")
        (("" (expand "on_segment_2D?")
          (("" (case "norm(s-segstart) = 0")
            (("1" (assert)
              (("1" (inst + "0")
                (("1" (assert)
                  (("1" (lemma "vectors_2D.norm_eq_0")
                    (("1" (inst?)
                      (("1" (assert)
                        (("1"
                          (case "segstart + (s-segstart) = segstart + zero")
                          (("1" (assert)
                            (("1" (replace -1 + :dir rl)
                              (("1"
                                (decompose-equality +)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -1) (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (case "s = segstart")
                (("1" (replace -1) (("1" (assert) nil nil)) nil)
                 ("2" (assert)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (label "ssegend" -4)
                        (("1" (label "ssegstart" -3)
                          (("1" (label "detzero" -2)
                            (("1" (lemma "orthogonal_basis")
                              (("1"
                                (case
                                 "segstart - segend = -(segend-segstart)")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       "vectors_2D.dot_neg_right")
                                      (("1"
                                        (rewrite -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -
                                               "segend-segstart"
                                               "perpR(segend-segstart)"
                                               _)
                                              (("1"
                                                (inst - "s-segstart")
                                                (("1"
                                                  (splash -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "det_perpR"
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (replace
                                                         "detzero")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (name
                                                             "st"
                                                             "(((s - segstart) * (segend - segstart)) / sqv(segend - segstart))")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "st >= 0")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "s = (1-st)*segstart + st*segend")
                                                                    (("1"
                                                                      (copy
                                                                       "ssegend")
                                                                      (("1"
                                                                        (neg-formula
                                                                         -1)
                                                                        (("1"
                                                                          (case
                                                                           "s - segend = (1-st)*segstart + (st-1)*segend")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             -2)
                                                                            (("1"
                                                                              (case
                                                                               "NOT 0>=(1-st)*sqv(segstart-segend)")
                                                                              (("1"
                                                                                (case
                                                                                 "1-st >=0")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "st")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "posreal_times_posreal_is_posreal")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "sqv(segstart-segend)"
                                                                                     "st-1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "NOT (1-st)*sqv(segstart-segend)=0")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -3
                                                                                    1))
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "nzreal_times_nzreal_is_nzreal")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "vectors_2D.sqv_eq_0")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (case
                                                                                               "segstart = segend")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (-1
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "segend + zero = segstart")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     +
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (decompose-equality
                                                                                                       +)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (flatten)
                                                                                      (("3"
                                                                                        (inst
                                                                                         +
                                                                                         "st")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -2
                                                                             +)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "s = st*(segend-segstart) + segstart")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -3
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (decompose-equality
                                                                             +)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "st"
                                                                     +)
                                                                    (("2"
                                                                      (cross-mult
                                                                       1)
                                                                      (("2"
                                                                        (ground)
                                                                        (("2"
                                                                          (lemma
                                                                           "vectors_2D.sqv_eq_0")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (flatten)
                                                    (("3"
                                                      (lemma
                                                       "perpR_perpR")
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (replace -2)
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (both-sides-f
                                                               -1
                                                               "-")
                                                              (("3"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (flatten)
                                                    (("4"
                                                      (replace -1)
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (skeep -1)
                        (("2" (assert)
                          (("2" (case "segend = segstart")
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -4)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide-all-but 2)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (case "NOT norm(segend-segstart)>0")
                                (("1"
                                  (lemma "vectors_2D.norm_eq_0")
                                  (("1"
                                    (inst - "segend-segstart")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide-all-but (-1 2))
                                        (("1"
                                          (lemma
                                           "vectors_2D.sub_eq_zero")
                                          (("1"
                                            (inst?)
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (replace -4 +)
                                    (("2"
                                      (split)
                                      (("1"
                                        (hide-all-but 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (typepred
                                         "sqv(segend-segstart)")
                                        (("2"
                                          (mult-by -1 "t")
                                          (("2"
                                            (hide-all-but (-1 1))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred
                                         "sqv(segend-segstart)")
                                        (("3"
                                          (mult-by -1 "1-t")
                                          (("3"
                                            (hide (3 4 -2))
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((on_segment_2D? const-decl "bool" edge_proximity nil)
    (det const-decl "real" det_2D "vectors/")
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (sub_eq_zero formula-decl nil vectors_2D "vectors/")
    (sqrt_0 formula-decl nil sqrt "reals/")
    (dot_zero_right formula-decl nil vectors_2D "vectors/")
    (orthogonal_basis formula-decl nil basis_2D "vectors/")
    (TRUE const-decl "bool" booleans nil)
    (dot_neg_right formula-decl nil vectors_2D "vectors/")
    (perpR const-decl "Vect2" perpendicular_2D "vectors/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (orthogonal? const-decl "bool" vectors_2D "vectors/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (* const-decl "real" vectors_2D "vectors/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "Vector" vectors_2D "vectors/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (det_perpR formula-decl nil det_2D "vectors/")
    (div_mult_pos_neg_ge1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (add_cancel2 formula-decl nil vectors_2D "vectors/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (st skolem-const-decl "real" detection nil)
    (segend skolem-const-decl "Vect2" detection nil)
    (segstart skolem-const-decl "Vect2" detection nil)
    (> const-decl "bool" reals nil)
    (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)
    (sqv_eq_0 formula-decl nil vectors_2D "vectors/")
    (nzreal nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (both_sides_times_neg_ge1_imp formula-decl nil extra_real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (perpR_perpR formula-decl nil perpendicular_2D "vectors/")
    (neg_neg formula-decl nil vectors_2D "vectors/")
    (neg_zero formula-decl nil vectors_2D "vectors/")
    (perpR_eq_zero formula-decl nil perpendicular_2D "vectors/")
    (minus_real_is_real application-judgement "real" reals nil)
    (neg_cont name-judgement "continuous_vv_fun" vect_cont_2D
     "vect_analysis/")
    (- const-decl "Vector" vectors_2D "vectors/")
    (norm_zero formula-decl nil vectors_2D "vectors/")
    (sub_eq_args formula-decl nil vectors_2D "vectors/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (scal_1 formula-decl nil vectors_2D "vectors/")
    (scal_0 formula-decl nil vectors_2D "vectors/")
    (add_zero_right formula-decl nil vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (zero const-decl "Vector" vectors_2D "vectors/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (norm_eq_0 formula-decl nil vectors_2D "vectors/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (- const-decl "Vector" vectors_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (on_segment_2D_alg const-decl "bool" detection nil))
   nil))
 (dot_nneg_linear_2D_alg_TCC1 0
  (dot_nneg_linear_2D_alg_TCC1-1 nil 3648546644
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (* const-decl "real" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (dot_nneg_linear_2D_alg_TCC2 0
  (dot_nneg_linear_2D_alg_TCC2-1 nil 3648546644
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (* const-decl "real" vectors_2D "vectors/")
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (dot_nneg_linear_2D_alt_typ 0
  (dot_nneg_linear_2D_alt_typ-1 nil 3647600648
   ("" (skeep)
    (("" (name "G" "dot_nneg_linear_2D_alg(T, wwz, v, aaaz, bbz, eps)")
      (("" (replace -1)
        (("" (expand "dot_nneg_linear_2D_alg" :assert? none)
          (("" (skoletin -)
            (("" (skoletin -)
              (("" (skoletin -)
                ((""
                  (name "ZZ" "(IF aa /= 0
                THEN (IF discr(aa, bb, cc) >= 0
                        THEN (IF aa < 0
                                THEN (root(aa, bb, cc, 1),
                                      root(aa, bb, cc, -1))
                              ELSIF eps = -1 THEN (0, root(aa, bb, cc, -1))
                              ELSE (root(aa, bb, cc, 1), T)
                              ENDIF)
                      ELSIF aa > 0 THEN (0, T)
                      ELSE (T, 0)
                      ENDIF)
              ELSIF bb = 0 AND cc >= 0 THEN (0, T)
              ELSIF bb = 0 THEN (T, 0)
              ELSIF bb > 0 THEN (-cc / bb, T)
              ELSE (0, -cc / bb)
              ENDIF)")
                  (("1" (replaces -1)
                    (("1" (assert)
                      (("1" (replaces -1 + :dir rl)
                        (("1" (hide -) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten) nil nil)
                   ("3" (hide (-1 2)) (("3" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dot_nneg_linear_2D_alg const-decl "[real, real]" detection nil)
    (Sign type-eq-decl nil sign "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (root const-decl "real" quadratic "reals/")
    (discr const-decl "real" quadratic "reals/")
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (dot_nneg_linear_2D_alg_def 0
  (dot_nneg_linear_2D_alg_def-1 nil 3567163187
   ("" (skeep)
    (("" (skoletin 1)
      (("" (skoletin 1)
        (("" (name "aa" "v*b")
          (("" (name "bb" "a * v + w * b")
            (("" (name "cc" "w*a")
              ((""
                (case "NOT (w + t * v) * (a + t * b) = quadratic(aa,bb,cc)(t)")
                (("1" (hide-all-but 1)
                  (("1" (expand "aa")
                    (("1" (expand "bb")
                      (("1" (expand "cc") (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (expand "dot_nneg_linear_2D_alg")
                    (("2" (replaces -1)
                      (("2" (replaces -1)
                        (("2" (replaces -1)
                          (("2" (assert)
                            (("2" (case "aa = 0")
                              (("1"
                                (assert)
                                (("1"
                                  (case "bb = 0 AND cc = 0")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "quadratic")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "bb = 0")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "quadratic")
                                            (("1"
                                              (case "cc >= 0")
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (case " bb > 0")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replaces -2)
                                              (("1"
                                                (expand "quadratic")
                                                (("1"
                                                  (case
                                                   "bb * t + cc >= 0 IFF t >= -cc/bb")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-1 1))
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (mult-by
                                                         1
                                                         "bb")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (mult-by
                                                         -1
                                                         "bb")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "quadratic")
                                                  (("2"
                                                    (case
                                                     "bb * t + cc >= 0 IFF t <= -cc/bb")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 2 3))
                                                      (("2"
                                                        (ground)
                                                        (("1"
                                                          (mult-by
                                                           1
                                                           "-bb")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (mult-by
                                                           -1
                                                           "-bb")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (case "aa > 0")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "quadratic_ge_0")
                                      (("1"
                                        (inst - "aa" "bb" "cc" "t")
                                        (("1"
                                          (case
                                           "aa * sq(t) + bb * t + cc = quadratic(aa,bb,cc)(t)")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "discr(aa,bb,cc)>=0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (grind
                                                     :exclude
                                                     ("quadratic"
                                                      "root"
                                                      "discr"))
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (case "cc < 0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "discr")
                                                        (("1"
                                                          (lemma
                                                           "nnreal_times_nnreal_is_nnreal")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "-cc"
                                                             "aa")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (grind
                                                         :exclude
                                                         ("quadratic"
                                                          "root"
                                                          "discr"))
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lemma "quadratic_ge_0")
                                      (("2"
                                        (inst - "aa" "bb" "cc" "t")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "aa * sq(t) + bb * t + cc = quadratic(aa,bb,cc)(t)")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (case
                                                 "discr(aa,bb,cc)>=0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma "root_le")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "sign")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (grind
                                                               :exclude
                                                               ("quadratic"
                                                                "root"
                                                                "discr"))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (case "cc >= 0")
                                                    (("1"
                                                      (expand "discr")
                                                      (("1"
                                                        (lemma
                                                         "nnreal_times_nnreal_is_nnreal")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "cc"
                                                           "-aa")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (grind
                                                         :exclude
                                                         ("quadratic"
                                                          "root"
                                                          "discr"))
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (dot_nneg_linear_2D_alt_typ application-judgement
     "[Lookahead[0, T], Lookahead[0, T]]" detection nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign "reals/")
    (dot_nneg_linear_2D_alg const-decl "[real, real]" detection nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "Vector" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (max_0_npreal formula-decl nil min_max "reals/")
    (min_id formula-decl nil min_max "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (quadratic_ge_0 formula-decl nil quadratic "reals/")
    (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (< const-decl "bool" reals nil)
    (discr const-decl "real" quadratic "reals/")
    (sign const-decl "Sign" sign "reals/")
    (root_le formula-decl nil quadratic "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bb skolem-const-decl "real" detection nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (cc skolem-const-decl "real" detection nil)
    (aa skolem-const-decl "real" detection nil)
    (quadratic const-decl "real" quadratic "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (dot_nneg_linear_2D_alg_eq_0 0
  (dot_nneg_linear_2D_alg_eq_0-1 nil 3645292664
   ("" (skeep)
    (("" (skoletin 1)
      (("" (skoletin 1)
        (("" (name "aa" "v*b")
          (("" (name "bb" "a * v + w * b")
            (("" (name "cc" "w*a")
              ((""
                (case "NOT FORALL (tz:real): (w + tz * v) * (a + tz * b) = quadratic(aa,bb,cc)(tz)")
                (("1" (hide-all-but 1)
                  (("1" (skeep)
                    (("1" (expand "aa")
                      (("1" (expand "bb")
                        (("1" (expand "cc") (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (copy -1)
                  (("2" (label "hyp" -1)
                    (("2" (hide "hyp")
                      (("2" (inst - "t")
                        (("2" (replaces -1)
                          (("2" (expand "dot_nneg_linear_2D_alg")
                            (("2" (replaces -1)
                              (("2"
                                (replaces -1)
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (case "aa = 0")
                                      (("1"
                                        (case "aa = 0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case "bb = 0 AND cc = 0")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (reveal
                                                           "hyp")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "bb = 0")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "cc >= 0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (case " bb > 0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "quadratic")
                                                            (("1"
                                                              (case
                                                               "bb * t + cc = 0 IFF t = -cc/bb")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  1))
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "quadratic")
                                                            (("2"
                                                              (case
                                                               "bb * t + cc = 0 IFF t = -cc/bb")
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (1
                                                                  2
                                                                  3))
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (lemma "quadratic_eq_0")
                                              (("2"
                                                (inst
                                                 -
                                                 "aa"
                                                 "bb"
                                                 "cc"
                                                 "t")
                                                (("2"
                                                  (case
                                                   "aa * sq(t) + bb * t + cc = quadratic(aa,bb,cc)(t)")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "max")
                                                            (("1"
                                                              (expand
                                                               "min")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (lemma
                                                                       "root_lt")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "root_eq")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "discr(aa,bb,cc)=0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -3)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "sign"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (dot_nneg_linear_2D_alt_typ application-judgement
     "[Lookahead[0, T], Lookahead[0, T]]" detection nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign "reals/")
    (dot_nneg_linear_2D_alg const-decl "[real, real]" detection nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "Vector" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (min_id formula-decl nil min_max "reals/")
    (max_0_npreal formula-decl nil min_max "reals/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (root_eq formula-decl nil quadratic "reals/")
    (sign const-decl "Sign" sign "reals/")
    (discr const-decl "real" quadratic "reals/")
    (root_lt formula-decl nil quadratic "reals/")
    (quadratic_eq_0 formula-decl nil quadratic "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (aa skolem-const-decl "real" detection nil)
    (cc skolem-const-decl "real" detection nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (bb skolem-const-decl "real" detection nil)
    (quadratic const-decl "real" quadratic "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (dot_nneg_spec_def 0
  (dot_nneg_spec_def-1 nil 3648546679
   ("" (skeep)
    (("" (name "F" "Fac")
      (("" (replaces -1)
        (("" (skoletin)
          (("" (skoletin)
            (("" (skoletin)
              (("" (skoletin)
                (("" (expand "dot_nneg_spec")
                  (("" (assert)
                    (("" (expand "abs")
                      (("" (case "(w + t * v) * (a + t * b) < 0")
                        (("1" (replace -1)
                          (("1" (split +)
                            (("1" (flatten)
                              (("1"
                                (lemma "dot_nneg_linear_2D_alg_def")
                                (("1"
                                  (inst
                                   -
                                   "t"
                                   "T"
                                   "F*a+w"
                                   "F*b+v"
                                   "a"
                                   "b")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -6 :dir rl)
                                      (("1"
                                        (replace -7 :dir rl)
                                        (("1"
                                          (replace -10 :dir rl)
                                          (("1"
                                            (replace -11 :dir rl)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (invoke
                                                     (name "B" "%1")
                                                     (! -1 2))
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (lemma
                                                               "dot_nneg_linear_2D_alg_def")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "t"
                                                                 "T"
                                                                 "F*a-w"
                                                                 "F*b-v"
                                                                 "a"
                                                                 "b")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -9
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -10
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (replace
                                                                         -13
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (replace
                                                                           -14
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (replace
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-4
                                                                                  -5
                                                                                  1))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (hide-all-but
                                                               (-4 1))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (split +)
                                  (("1" (ground) nil nil)
                                   ("2" (ground) nil nil)
                                   ("3"
                                    (lemma
                                     "dot_nneg_linear_2D_alg_def")
                                    (("3"
                                      (inst
                                       -
                                       "t"
                                       "T"
                                       "F*a+w"
                                       "F*b+v"
                                       "a"
                                       "b")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (replace -5 :dir rl)
                                          (("3"
                                            (replace -6 :dir rl)
                                            (("3"
                                              (replace -9 :dir rl)
                                              (("3"
                                                (replace -10 :dir rl)
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (hide -1)
                                                    (("3"
                                                      (replace -2)
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (hide-all-but
                                                           (-3 1))
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "NOT (w+t*v)*(a+t*b)>=0")
                          (("1" (assert) nil nil)
                           ("2" (replace 1)
                            (("2" (hide 1)
                              (("2"
                                (split +)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma
                                     "dot_nneg_linear_2D_alg_def")
                                    (("1"
                                      (inst
                                       -
                                       "t"
                                       "T"
                                       "F*a-w"
                                       "F*b-v"
                                       "a"
                                       "b")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -8 :dir rl)
                                          (("1"
                                            (replace -9 :dir rl)
                                            (("1"
                                              (replace -12 :dir rl)
                                              (("1"
                                                (replace -13 :dir rl)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (invoke
                                                         (name
                                                          "B"
                                                          "%1")
                                                         (! -1 2))
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (lemma
                                                                   "dot_nneg_linear_2D_alg_def")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "t"
                                                                     "T"
                                                                     "F*a+w"
                                                                     "F*b+v"
                                                                     "a"
                                                                     "b")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -7
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (replace
                                                                           -8
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (replace
                                                                             -11
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (replace
                                                                               -12
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (replace
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-4
                                                                                      -5
                                                                                      1))
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (hide-all-but
                                                                   (-4
                                                                    1))
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split +)
                                      (("1" (ground) nil nil)
                                       ("2" (ground) nil nil)
                                       ("3"
                                        (lemma
                                         "dot_nneg_linear_2D_alg_def")
                                        (("3"
                                          (inst
                                           -
                                           "t"
                                           "T"
                                           "F*a-w"
                                           "F*b-v"
                                           "a"
                                           "b")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (replace -7 :dir rl)
                                              (("3"
                                                (replace -8 :dir rl)
                                                (("3"
                                                  (replace -11 :dir rl)
                                                  (("3"
                                                    (replace
                                                     -12
                                                     :dir
                                                     rl)
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (hide -1)
                                                        (("3"
                                                          (replace -3)
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (hide-all-but
                                                               (-3 1))
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign "reals/")
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (dot_nneg_spec const-decl "[Lookahead[0, T], Lookahead[0, T]]"
     detection nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "Vector" vectors_2D "vectors/")
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "Vector" vectors_2D "vectors/")
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dot_nneg_linear_2D_alg_def formula-decl nil detection nil)
    (< const-decl "bool" reals nil)
    (add_neg_sub formula-decl nil vectors_2D "vectors/")
    (scal_neg_1 formula-decl nil vectors_2D "vectors/")
    (scal_1 formula-decl nil vectors_2D "vectors/")
    (dot_nneg_linear_2D_alt_typ application-judgement
     "[Lookahead[0, T], Lookahead[0, T]]" detection nil)
    (neg_cont name-judgement "continuous_vv_fun" vect_cont_2D
     "vect_analysis/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (edge_detect_simp2_def 0
  (edge_detect_simp2_def-1 nil 3669399466
   ("" (skeep*)
    (("" (iff)
      (("" (ground)
        (("1"
          (deftactic swim
           (then (split) (expand "edge_detect_simp2") (inst?)
            (assert)))
          (("1" (expand "edge_detect_simple") (("1" (swim) nil nil))
            nil))
          nil)
         ("2" (expand "edge_detect_simp2")
          (("2" (skeep*)
            (("2"
              (case "max(dot_nneg_spec(T, w, v, a, b, ep1, ep2, 1 + Fac)`1,
                                dot_nneg_spec(T, w, v, a, b, ep3, -ep2, 1 + Fac)`1) = max(dot_nneg_spec(T, w, v, a, b, ep3,-ep2, 1 + Fac)`1,
                                dot_nneg_spec(T, w, v, a, b, ep1,ep2, 1 + Fac)`1)")
              (("1"
                (case "max(dot_nneg_spec(T, w, v, perpR(a), perpR(b), sig1, sig2,
                                                  Fac)`1,
                                    dot_nneg_spec(T, w, v, perpR(a), perpR(b), sig3, -sig2,
                                                  Fac)`1) = max(dot_nneg_spec(T, w, v, perpR(a), perpR(b), sig3, -sig2,
                                                  Fac)`1,
                                    dot_nneg_spec(T, w, v, perpR(a), perpR(b), sig1, sig2,
                                                  Fac)`1)")
                (("1"
                  (case "min(dot_nneg_spec(T, w, v, a, b, ep1, ep2, 1 + Fac)`2,
                                        dot_nneg_spec(T, w, v, a, b, ep3, -ep2, 1 + Fac)`2) = min(dot_nneg_spec(T, w, v, a, b, ep3,-ep2, 1 + Fac)`2,
                                        dot_nneg_spec(T, w, v, a, b, ep1,ep2, 1 + Fac)`2)")
                  (("1"
                    (case "min(dot_nneg_spec(T, w, v, perpR(a), perpR(b), sig1, sig2, Fac)`2,
                                            dot_nneg_spec(T, w, v, perpR(a), perpR(b), sig3, -sig2, Fac)`2) = min(dot_nneg_spec(T, w, v,perpR(a), perpR(b), sig3,-sig2, Fac)`2,
                                            dot_nneg_spec(T, w, v, perpR(a), perpR(b), sig1,sig2, Fac)`2)")
                    (("1" (typepred "ep1")
                      (("1" (hide -1)
                        (("1" (typepred "ep2")
                          (("1" (hide -1)
                            (("1" (typepred "ep3")
                              (("1"
                                (hide -1)
                                (("1"
                                  (typepred "-ep2")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (typepred "sig1")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (typepred "sig2")
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (typepred "sig3")
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (typepred "-sig2")
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (expand
                                                       "edge_detect_simple")
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -)
                      (("2" (expand "min")
                        (("2" (lift-if)
                          (("2" (ground)
                            (("2" (lift-if) (("2" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -)
                    (("2" (expand "min")
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (lift-if) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -)
                  (("2" (expand "max")
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (lift-if) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -)
                (("2" (expand "max")
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (lift-if) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dot_nneg_spec const-decl "[Lookahead[0, T], Lookahead[0, T]]"
     detection nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sign_neg_clos application-judgement "Sign" sign "reals/")
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (perpR const-decl "Vect2" perpendicular_2D "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Sign type-eq-decl nil sign "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (edge_detect_simp2 const-decl "bool" detection nil)
    (edge_detect_simple const-decl "bool" detection nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (edge_detect_simple_def 0
  (edge_detect_simple_def-1 nil 3648562963
   (""
    (deftactic shake
     (then (invoke (name "tt" "%1") (! -1 1))
      (inst-cp - "1+Fac" "tt" "T" "w" "v" "a" "b") (assert)
      (inst - "Fac" "tt" "T" "w" "v" "perpR(a)" "perpR(b)") (assert)
      (inst + "tt") (assert)))
    (("" (skeep)
      (("" (split)
        (("1" (flatten)
          (("1" (expand "edge_detect_simple" :assert? none)
            (("1" (skoletin -)
              (("1" (skoletin -)
                (("1" (skoletin -)
                  (("1" (skoletin -)
                    (("1" (skoletin -)
                      (("1" (skoletin -)
                        (("1" (skoletin -)
                          (("1" (skoletin -)
                            (("1" (assert)
                              (("1"
                                (hide
                                 (-2
                                  -3
                                  -4
                                  -5
                                  -6
                                  -7
                                  -8
                                  -9
                                  -10
                                  -11
                                  -12
                                  -13
                                  -14
                                  -15
                                  -16
                                  -17
                                  -18))
                                (("1"
                                  (lemma "dot_nneg_spec_def")
                                  (("1"
                                    (ground)
                                    (("1" (shake) nil nil)
                                     ("2" (shake) nil nil)
                                     ("3" (shake) nil nil)
                                     ("4" (shake) nil nil)
                                     ("5" (shake) nil nil)
                                     ("6" (shake) nil nil)
                                     ("7" (shake) nil nil)
                                     ("8" (shake) nil nil)
                                     ("9" (shake) nil nil)
                                     ("10" (shake) nil nil)
                                     ("11" (shake) nil nil)
                                     ("12" (shake) nil nil)
                                     ("13" (shake) nil nil)
                                     ("14" (shake) nil nil)
                                     ("15" (shake) nil nil)
                                     ("16" (shake) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (skeep)
            (("2" (expand "edge_detect_simple" :assert? none)
              (("2" (skoletin +)
                (("2" (skoletin +)
                  (("2" (skoletin +)
                    (("2" (skoletin +)
                      (("2" (skoletin +)
                        (("2" (skoletin +)
                          (("2" (skoletin +)
                            (("2" (skoletin +)
                              (("2"
                                (assert)
                                (("2"
                                  (hide
                                   (-1
                                    -2
                                    -3
                                    -4
                                    -5
                                    -6
                                    -7
                                    -8
                                    -9
                                    -10
                                    -11
                                    -12
                                    -13
                                    -14
                                    -15
                                    -16))
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (lemma "dot_nneg_spec_def")
                                      (("2"
                                        (inst-cp
                                         -
                                         "1+Fac"
                                         "t"
                                         "T"
                                         "w"
                                         "v"
                                         "a"
                                         "b")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst
                                             -
                                             "Fac"
                                             "t"
                                             "T"
                                             "w"
                                             "v"
                                             "perpR(a)"
                                             "perpR(b)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma "Vlb")
                                                (("2"
                                                  (lemma "Vlbn")
                                                  (("2"
                                                    (lemma "Plb")
                                                    (("2"
                                                      (lemma "Plbn")
                                                      (("2"
                                                        (lemma "Vub")
                                                        (("2"
                                                          (lemma
                                                           "Vubn")
                                                          (("2"
                                                            (lemma
                                                             "Pub")
                                                            (("2"
                                                              (lemma
                                                               "Pubn")
                                                              (("2"
                                                                (lemma
                                                                 "Vlbx")
                                                                (("2"
                                                                  (lemma
                                                                   "Vlbnx")
                                                                  (("2"
                                                                    (lemma
                                                                     "Plbx")
                                                                    (("2"
                                                                      (lemma
                                                                       "Plbnx")
                                                                      (("2"
                                                                        (lemma
                                                                         "Vubx")
                                                                        (("2"
                                                                          (lemma
                                                                           "Vubnx")
                                                                          (("2"
                                                                            (lemma
                                                                             "Pubx")
                                                                            (("2"
                                                                              (lemma
                                                                               "Pubnx")
                                                                              (("2"
                                                                                (replace
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1
                                                                                             :dir
                                                                                             rl)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -1
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -1
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -1
                                                                                                                                             :dir
                                                                                                                                             rl)
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 (-3
                                                                                                                                                  -4))
                                                                                                                                                (("2"
                                                                                                                                                  (ground)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (1
                                                                                                                                                      -))
                                                                                                                                                    (("1"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (5
                                                                                                                                                      -))
                                                                                                                                                    (("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("3"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (9
                                                                                                                                                      -))
                                                                                                                                                    (("3"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("4"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (13
                                                                                                                                                      -))
                                                                                                                                                    (("4"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("5"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (2
                                                                                                                                                      -))
                                                                                                                                                    (("5"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("6"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (6
                                                                                                                                                      -))
                                                                                                                                                    (("6"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("7"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (10
                                                                                                                                                      -))
                                                                                                                                                    (("7"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("8"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (14
                                                                                                                                                      -))
                                                                                                                                                    (("8"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("9"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (3
                                                                                                                                                      -))
                                                                                                                                                    (("9"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("10"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (7
                                                                                                                                                      -))
                                                                                                                                                    (("10"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("11"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (11
                                                                                                                                                      -))
                                                                                                                                                    (("11"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("12"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (15
                                                                                                                                                      -))
                                                                                                                                                    (("12"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("13"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (4
                                                                                                                                                      -))
                                                                                                                                                    (("13"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("14"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (8
                                                                                                                                                      -))
                                                                                                                                                    (("14"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("15"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (12
                                                                                                                                                      -))
                                                                                                                                                    (("15"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("16"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (16
                                                                                                                                                      -))
                                                                                                                                                    (("16"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vlbn skolem-const-decl "Lookahead[0, T]" detection nil)
    (Plbn skolem-const-decl "Lookahead[0, T]" detection nil)
    (Vubn skolem-const-decl "Lookahead[0, T]" detection nil)
    (Pubn skolem-const-decl "Lookahead[0, T]" detection nil)
    (Vlbnx skolem-const-decl "Lookahead[0, T]" detection nil)
    (Plbnx skolem-const-decl "Lookahead[0, T]" detection nil)
    (Vubnx skolem-const-decl "Lookahead[0, T]" detection nil)
    (Pubnx skolem-const-decl "Lookahead[0, T]" detection nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Pubx skolem-const-decl "Lookahead[0, T]" detection nil)
    (Vubx skolem-const-decl "Lookahead[0, T]" detection nil)
    (Plbx skolem-const-decl "Lookahead[0, T]" detection nil)
    (Vlbx skolem-const-decl "Lookahead[0, T]" detection nil)
    (Pub skolem-const-decl "Lookahead[0, T]" detection nil)
    (Vub skolem-const-decl "Lookahead[0, T]" detection nil)
    (Plb skolem-const-decl "Lookahead[0, T]" detection nil)
    (Vlb skolem-const-decl "Lookahead[0, T]" detection nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign "reals/")
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (dot_nneg_spec const-decl "[Lookahead[0, T], Lookahead[0, T]]"
     detection nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (perpR const-decl "Vect2" perpendicular_2D "vectors/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dot_nneg_spec_def formula-decl nil detection nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (edge_detect_simple const-decl "bool" detection nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (edge_detect_def 0
  (edge_detect_def-1 nil 3648575605
   ("" (skeep)
    (("" (expand "hits_moving_seg_2D")
      (("" (skeep)
        (("" (expand "edge_detect" :assert? none)
          (("" (name "midpt" "(1 / 2) * segend + (1 / 2) * segstart")
            (("" (replace -1)
              (("" (name "news" "s-midpt")
                ((""
                  (name "midv" "(1 / 2) * endvel + (1 / 2) * startvel")
                  (("" (replace -1)
                    (("" (assert)
                      (("" (replace -2)
                        (("" (lemma "edge_detect_simple_def")
                          (("" (inst?)
                            (("" (assert)
                              ((""
                                (inst + "t")
                                ((""
                                  (assert)
                                  ((""
                                    (split)
                                    (("1"
                                      (name
                                       "B"
                                       "1/2 * segend - 1/2 * segstart +
                       t * (1/2 * endvel - 1/2 * startvel)")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (case
                                           "abs((news + t * (v - midv)) * B) <= sqv(B)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (case
                                               "NOT (news + t * (v - midv)) = (s+t*v)-(midpt + t*midv)")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (expand "news")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -9 +)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace
                                                         -4
                                                         1
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (replace
                                                           -2
                                                           1
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (case
                                                             "NOT (1 - r) * (segstart + t * startvel) + r * (segend + t * endvel)
            -
            (1/2 * segend + 1/2 * segstart +
              t * (1/2 * endvel + 1/2 * startvel)) = (1-r-1/2)*(segstart+t*startvel) + (r-1/2)*(segend+t*endvel)")
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (lemma
                                                                 "vectors_2D.schwarz")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (invoke
                                                                     (case
                                                                      "%1<=%2")
                                                                     (!
                                                                      -1
                                                                      2)
                                                                     (!
                                                                      1
                                                                      2))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       (-1
                                                                        2))
                                                                      (("2"
                                                                        (invoke
                                                                         (case
                                                                          "%1<=%2")
                                                                         (!
                                                                          1
                                                                          1
                                                                          1)
                                                                         (!
                                                                          1
                                                                          1
                                                                          2))
                                                                        (("1"
                                                                          (mult-by
                                                                           -1
                                                                           "norm(B)")
                                                                          (("1"
                                                                            (lemma
                                                                             "vectors_2D.sq_norm")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "B")
                                                                              (("1"
                                                                                (expand
                                                                                 "sq"
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "B"
                                                                             1)
                                                                            (("2"
                                                                              (case
                                                                               "NOT (1/2 - r) * (segstart + t * startvel) +
            (r - 1/2) * (segend + t * endvel) = (r-1/2)*((segend-segstart)+t*(endvel-startvel))")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replaces
                                                                                 -1)
                                                                                (("2"
                                                                                  (case
                                                                                   "NOT 1/2 * segend - 1/2 * segstart +
             t * (1/2 * endvel - 1/2 * startvel) = 1/2*((segend - segstart) + t * (endvel - startvel))")
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "norm_scal")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "norm_scal")
                                                                                        (("2"
                                                                                          (case
                                                                                           "abs(r-1/2)<=abs(1/2)")
                                                                                          (("1"
                                                                                            (mult-by
                                                                                             -1
                                                                                             "norm(((segend - segstart) + t * (endvel - startvel)))")
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "abs"
                                                                                               1)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "news" +)
                                      (("2"
                                        (expand "midpt" +)
                                        (("2"
                                          (expand "midv" 1)
                                          (("2"
                                            (case
                                             "NOT (s - (1/2 * segend + 1/2 * segstart) +
            t * (v - (1/2 * endvel + 1/2 * startvel))) = (s+t*v)-(1/2)*((segstart+segend)+t*(startvel+endvel))")
                                            (("1"
                                              (hide-all-but 1)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (replaces -1)
                                              (("2"
                                                (replaces -8 +)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (invoke
                                                     (case
                                                      "EXISTS (igz:nnreal): igz = %1")
                                                     (! 1 2))
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (replaces
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (hide -)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       +
                                                       "Fac *
          sqv(perpR(1 / 2 * segend - 1 / 2 * segstart) +
               t * perpR(1 / 2 * endvel - 1 / 2 * startvel))")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((hits_moving_seg_2D const-decl "bool" detection nil)
    (edge_detect const-decl "bool" detection nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (edge_detect_simple_def formula-decl nil detection nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (midv skolem-const-decl "Vector" detection nil)
    (perpR const-decl "Vect2" perpendicular_2D "vectors/")
    (midpt skolem-const-decl "Vector" detection nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (* const-decl "real" vectors_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (news skolem-const-decl "Vector" detection nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (norm_scal formula-decl nil vectors_2D "vectors/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (B skolem-const-decl "Vector" detection nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (sq_norm formula-decl nil vectors_2D "vectors/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (schwarz formula-decl nil vectors_2D "vectors/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (Lookahead type-eq-decl nil Lookahead "ACCoRD/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "Vector" vectors_2D "vectors/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "Vector" vectors_2D "vectors/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "Vector" vectors_2D "vectors/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/"))
   shostak))
 (Collision_Detector_TCC1 0
  (Collision_Detector_TCC1-1 nil 3655047404 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (definitely_outside const-decl "bool" polygon_contain nil)
    (winding_number const-decl
     "{ii: int | ii = winding_number_rec(N, p, s, N - 1) / 4}"
     polygon_contain nil)
    (definitely_outside_prelim const-decl "bool" polygon_contain nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil))
 (Static_Collision_Detector_TCC1 0
  (Static_Collision_Detector_TCC1-1 nil 3669399465
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (definitely_outside const-decl "bool" polygon_contain nil)
    (winding_number const-decl
     "{ii: int | ii = winding_number_rec(N, p, s, N - 1) / 4}"
     polygon_contain nil)
    (definitely_outside_prelim const-decl "bool" polygon_contain nil)
    (polygon_2D_at const-decl "Vect2" detection nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (+ const-decl "Vector" vectors_2D "vectors/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil)))

