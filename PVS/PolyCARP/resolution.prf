(resolution (proj_vect_TCC1 0
             (proj_vect_TCC1-2 nil 3659195053
              ("" (skeep*)
               (("" (expand "zero") (("" (propax) nil nil)) nil)) nil)
              ((zero const-decl "Vector" vectors_2D vectors)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (proj_vect subtype "(# x := 1, y := 1 #)" "Nz_vect2"))
             (proj_vect_TCC1-1 nil 3659194404
              ("" (skeep*)
               (("" (decompose-equality -2) (("" (grind) nil nil))
                 nil))
               nil)
              ((Vector type-eq-decl nil vectors_2D vectors)
               (zero const-decl "Vector" vectors_2D vectors)
               (comp_zero_x formula-decl nil vectors_2D vectors))
              nil
              (proj_vect subtype "(# x := 1, y := 1 #)" "Nz_vect2")))
            (proj_vect_TCC2 0
             (proj_vect_TCC2-1 nil 3659194404
              (""
               (case "NOT FORALL (ee:Vect2): perpR(ee)=zero IFF ee=zero")
               (("1" (hide 2)
                 (("1" (skeep*)
                   (("1" (case "NOT ee+zero = -perpR(perpR(ee))")
                     (("1" (hide 2) (("1" (grind) nil nil)) nil)
                      ("2" (ground)
                       (("1" (replaces -1) (("1" (assert) nil nil))
                         nil)
                        ("2" (replaces -1) (("2" (assert) nil nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ("2" (skeep*)
                 (("2" (rewrite -1 -3)
                   (("2" (replaces -3) (("2" (assert) nil nil)) nil))
                   nil))
                 nil))
               nil)
              ((real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (norm_zero formula-decl nil vectors_2D vectors)
               (dot_zero_left formula-decl nil vectors_2D vectors)
               (+ const-decl "Vector" vectors_2D vectors)
               (comp_zero_x formula-decl nil vectors_2D vectors)
               (comp_zero_y formula-decl nil vectors_2D vectors)
               (minus_real_is_real application-judgement "real" reals
                nil)
               (real_plus_real_is_real application-judgement "real"
                reals nil)
               (neg_zero formula-decl nil vectors_2D vectors)
               (perpR_eq_zero formula-decl nil perpendicular_2D
                vectors)
               (add_zero_right formula-decl nil vectors_2D vectors)
               (TRUE const-decl "bool" booleans nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (real nonempty-type-from-decl nil reals nil)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (IFF const-decl "[bool, bool -> bool]" booleans nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (perpR const-decl "Vect2" perpendicular_2D vectors)
               (Vector type-eq-decl nil vectors_2D vectors)
               (zero const-decl "Vector" vectors_2D vectors))
              nil
              (proj_vect subtype
               "perpendicular_2D.perpR((vectors_2D.-)(resolution.v, resolution.u))"
               "Nz_vector")))
            (proj_vect_TCC3 0
             (proj_vect_TCC3-2 nil 3659194726
              ("" (skeep*)
               (("" (case "w-v=zero")
                 (("1" (replaces -1) (("1" (assert) nil nil)) nil)
                  ("2" (case "w-v = -(perpR(perpR(w-v)))")
                   (("1" (replaces -1 1)
                     (("1" (replaces -2 1) (("1" (assert) nil nil))
                       nil))
                     nil)
                    ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                   nil))
                 nil))
               nil)
              ((zero const-decl "Vector" vectors_2D vectors)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (Vector type-eq-decl nil vectors_2D vectors)
               (real nonempty-type-from-decl nil reals nil)
               (dot_zero_right formula-decl nil vectors_2D vectors)
               (norm_zero formula-decl nil vectors_2D vectors)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_minus_real_is_real application-judgement "real"
                reals nil)
               (minus_real_is_real application-judgement "real" reals
                nil)
               (perpR_eq_zero formula-decl nil perpendicular_2D
                vectors)
               (neg_zero formula-decl nil vectors_2D vectors)
               (perpR const-decl "Vect2" perpendicular_2D vectors)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (proj_vect subtype
               "perpendicular_2D.perpR((vectors_2D.-)(resolution.w, resolution.v))"
               "Nz_vector"))
             (proj_vect_TCC3-1 nil 3659194404
              ("" (subtype-tcc) nil nil) nil nil
              (proj_vect subtype
               "perpendicular_2D.perpR((vectors_2D.-)(resolution.w, resolution.v))"
               "Nz_vector")))
            (proj_vect_TCC4 0
             (proj_vect_TCC4-2 nil 3659194729
              ("" (skeep*)
               (("" (name "V" "v-u")
                 (("" (replaces -1)
                   (("" (name "W" "w-v")
                     (("" (replaces -1)
                       (("" (assert)
                         (("" (lemma "sub_eq_zero")
                           (("" (inst - "^(perpR(V))" "-(^(perpR(W)))")
                             (("" (assert)
                               ((""
                                 (flatten)
                                 ((""
                                   (hide -2)
                                   ((""
                                     (split -)
                                     (("1"
                                       (expand "^" -1)
                                       (("1"
                                         (assert)
                                         (("1"
                                           (case
                                            "NOT FORALL (aa:Vect2): norm(perpR(aa)) = norm(aa)")
                                           (("1"
                                             (hide-all-but 1)
                                             (("1" (grind) nil nil))
                                             nil)
                                            ("2"
                                             (rewrite -1)
                                             (("2"
                                               (rewrite -1)
                                               (("2"
                                                 (inst-cp - "V")
                                                 (("2"
                                                   (inst - "W")
                                                   (("2"
                                                     (case
                                                      "NOT V*W = perpR(V)*perpR(W)")
                                                     (("1"
                                                       (hide-all-but 1)
                                                       (("1"
                                                         (grind)
                                                         nil
                                                         nil))
                                                       nil)
                                                      ("2"
                                                       (replaces -1)
                                                       (("2"
                                                         (replaces
                                                          -1
                                                          :dir
                                                          rl)
                                                         (("2"
                                                           (replaces
                                                            -1
                                                            :dir
                                                            rl)
                                                           (("2"
                                                             (name
                                                              "VV"
                                                              "perpR(V)")
                                                             (("2"
                                                               (replace
                                                                -1)
                                                               (("2"
                                                                 (name
                                                                  "WW"
                                                                  "perpR(W)")
                                                                 (("2"
                                                                   (replace
                                                                    -1)
                                                                   (("2"
                                                                     (hide
                                                                      (-1
                                                                       -2))
                                                                     (("2"
                                                                       (name
                                                                        "Z1"
                                                                        "norm(VV)")
                                                                       (("2"
                                                                         (replace
                                                                          -1)
                                                                         (("2"
                                                                           (case
                                                                            "NOT Z1 > 0")
                                                                           (("1"
                                                                             (assert)
                                                                             nil
                                                                             nil)
                                                                            ("2"
                                                                             (hide
                                                                              -2)
                                                                             (("2"
                                                                               (name
                                                                                "Z2"
                                                                                "norm(WW)")
                                                                               (("2"
                                                                                 (replace
                                                                                  -1)
                                                                                 (("2"
                                                                                   (case
                                                                                    "NOT Z2 > 0")
                                                                                   (("1"
                                                                                     (assert)
                                                                                     nil
                                                                                     nil)
                                                                                    ("2"
                                                                                     (hide
                                                                                      -2)
                                                                                     (("2"
                                                                                       (case
                                                                                        "NOT VV + zero = ((-Z1)/Z2)*WW")
                                                                                       (("1"
                                                                                         (case
                                                                                          "NOT Z1*((1 / Z1) * VV) = Z1*(-((1 / Z2) * WW))")
                                                                                         (("1"
                                                                                           (replaces
                                                                                            -3)
                                                                                           nil
                                                                                           nil)
                                                                                          ("2"
                                                                                           (assert)
                                                                                           (("2"
                                                                                             (replaces
                                                                                              -1
                                                                                              1)
                                                                                             (("2"
                                                                                               (hide-all-but
                                                                                                1)
                                                                                               (("2"
                                                                                                 (grind)
                                                                                                 nil
                                                                                                 nil))
                                                                                               nil))
                                                                                             nil))
                                                                                           nil))
                                                                                         nil)
                                                                                        ("2"
                                                                                         (assert)
                                                                                         (("2"
                                                                                           (replace
                                                                                            -1
                                                                                            -5)
                                                                                           (("2"
                                                                                             (case
                                                                                              "Z1/Z2>0")
                                                                                             (("1"
                                                                                               (mult-by
                                                                                                -1
                                                                                                "sqv(WW)")
                                                                                               (("1"
                                                                                                 (hide-all-but
                                                                                                  (-1
                                                                                                   -6))
                                                                                                 (("1"
                                                                                                   (grind)
                                                                                                   nil
                                                                                                   nil))
                                                                                                 nil)
                                                                                                ("2"
                                                                                                 (lemma
                                                                                                  "sqv_eq_0")
                                                                                                 (("2"
                                                                                                   (inst?)
                                                                                                   (("2"
                                                                                                     (assert)
                                                                                                     (("2"
                                                                                                       (expand
                                                                                                        "Z2")
                                                                                                       (("2"
                                                                                                         (replaces
                                                                                                          -1)
                                                                                                         (("2"
                                                                                                           (assert)
                                                                                                           nil
                                                                                                           nil))
                                                                                                         nil))
                                                                                                       nil))
                                                                                                     nil))
                                                                                                   nil))
                                                                                                 nil))
                                                                                               nil)
                                                                                              ("2"
                                                                                               (cross-mult
                                                                                                1)
                                                                                               nil
                                                                                               nil))
                                                                                             nil))
                                                                                           nil))
                                                                                         nil))
                                                                                       nil))
                                                                                     nil))
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil)
                                      ("2" (grind) nil nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ((Vect2 type-eq-decl nil vectors_2D_def vectors)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (Vector type-eq-decl nil vectors_2D vectors)
               (real nonempty-type-from-decl nil reals nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (/= const-decl "boolean" notequal nil)
               (zero const-decl "Vector" vectors_2D vectors)
               (Nz_vector type-eq-decl nil vectors_2D vectors)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (>= const-decl "bool" reals nil)
               (nnreal type-eq-decl nil real_types nil)
               (norm const-decl "nnreal" vectors_2D vectors)
               (Normalized type-eq-decl nil vectors_2D vectors)
               (^ const-decl "Normalized" vectors_2D vectors)
               (perpR const-decl "Vect2" perpendicular_2D vectors)
               (nzreal_div_nzreal_is_nzreal application-judgement
                "nzreal" real_types nil)
               (real_plus_real_is_real application-judgement "real"
                reals nil)
               (sqv_eq_0 formula-decl nil vectors_2D vectors)
               (scal_zero formula-decl nil vectors_2D vectors)
               (norm_zero formula-decl nil vectors_2D vectors)
               (sqv_zero formula-decl nil vectors_2D vectors)
               (nnreal_times_nnreal_is_nnreal application-judgement
                "nnreal" real_types nil)
               (dot_scal_left formula-decl nil vectors_2D vectors)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (both_sides_times_pos_gt1 formula-decl nil real_props
                nil)
               (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
               (add_zero_right formula-decl nil vectors_2D vectors)
               (scal_assoc formula-decl nil vectors_2D vectors)
               (scal_1 formula-decl nil vectors_2D vectors)
               (- const-decl "[numfield -> numfield]" number_fields
                  nil)
               (/ const-decl "[numfield, nznum -> numfield]"
                  number_fields nil)
               (nznum nonempty-type-eq-decl nil number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (* const-decl "Vector" vectors_2D vectors)
               (+ const-decl "Vector" vectors_2D vectors)
               (real_div_nzreal_is_real application-judgement "real"
                reals nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (> const-decl "bool" reals nil)
               (minus_real_is_real application-judgement "real" reals
                nil)
               (real_times_real_is_real application-judgement "real"
                reals nil)
               (sqv const-decl "nnreal" vectors_2D vectors)
               (* const-decl "real" vectors_2D vectors)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (real_minus_real_is_real application-judgement "real"
                reals nil)
               (neg_nzv application-judgement "Nz_vector" vectors_2D
                vectors)
               (sub_eq_zero formula-decl nil vectors_2D vectors)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (proj_vect subtype
               "(vectors_2D.+)(vectors_2D.^(perpendicular_2D.perpR((vectors_2D.-)(resolution.v, resolution.u))), vectors_2D.^(perpendicular_2D.perpR((vectors_2D.-)(resolution.w, resolution.v))))"
               "Nz_vect2"))
             (proj_vect_TCC4-1 nil 3659194404
              ("" (subtype-tcc) nil nil) nil nil
              (proj_vect subtype
               "(vectors_2D.+)(vectors_2D.^(perpendicular_2D.perpR((vectors_2D.-)(resolution.v, resolution.u))), vectors_2D.^(perpendicular_2D.perpR((vectors_2D.-)(resolution.w, resolution.v))))"
               "Nz_vect2")))
            (proj_vect_TCC5 0
             (proj_vect_TCC5-2 nil 3659194735
              ("" (skeep*)
               (("" (replaces -2) (("" (assert) nil nil)) nil)) nil)
              ((real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (dot_zero_left formula-decl nil vectors_2D vectors)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (proj_vect subtype
               "(vectors_2D.-)(resolution.v, resolution.u)"
               "Nz_vector"))
             (proj_vect_TCC5-1 nil 3659194404
              ("" (subtype-tcc) nil nil) nil nil
              (proj_vect subtype
               "(vectors_2D.-)(resolution.v, resolution.u)"
               "Nz_vector")))
            (proj_vect_TCC6 0
             (proj_vect_TCC6-2 nil 3659194740
              ("" (skeep*)
               (("" (replaces -2)
                 (("" (assert)
                   (("" (rewrite "sub_eq_zero" -2)
                     (("" (replaces -2) (("" (assert) nil nil)) nil))
                     nil))
                   nil))
                 nil))
               nil)
              ((Vect2 type-eq-decl nil vectors_2D_def vectors)
               (Vector type-eq-decl nil vectors_2D vectors)
               (real nonempty-type-from-decl nil reals nil)
               (sub_eq_zero formula-decl nil vectors_2D vectors)
               (sub_eq_args formula-decl nil vectors_2D vectors)
               (dot_zero_right formula-decl nil vectors_2D vectors)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (proj_vect subtype
               "(vectors_2D.-)(resolution.v, resolution.w)"
               "Nz_vector"))
             (proj_vect_TCC6-1 nil 3659194404
              ("" (subtype-tcc) nil nil) nil nil
              (proj_vect subtype
               "(vectors_2D.-)(resolution.v, resolution.w)"
               "Nz_vector")))
            (proj_vect_TCC7 0
             (proj_vect_TCC7-2 nil 3680370201
              ("" (skeep*)
               (("" (case "NOT v-w = -(w-v)")
                 (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                  ("2" (replaces -1)
                   (("2" (name "V" "v-u")
                     (("2" (replaces -1)
                       (("2" (name "W" "w-v")
                         (("2" (replaces -1)
                           (("2" (assert)
                             (("2" (lemma "sub_eq_zero")
                               (("2"
                                 (inst - "^(V)" "^(W)")
                                 (("1"
                                   (assert)
                                   (("1"
                                     (flatten)
                                     (("1"
                                       (hide -2)
                                       (("1"
                                         (split)
                                         (("1"
                                           (mult-by 1 "1/norm(V)")
                                           (("1"
                                             (mult-by 1 "1/norm(W)")
                                             (("1"
                                               (case "^(V)*^(W)>=0")
                                               (("1"
                                                 (expand "^")
                                                 (("1"
                                                   (grind-reals)
                                                   nil
                                                   nil))
                                                 nil)
                                                ("2"
                                                 (typepred "sqv(^(V))")
                                                 (("2"
                                                   (expand "sqv")
                                                   (("2"
                                                     (assert)
                                                     nil
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil)
                                              ("2"
                                               (split)
                                               (("1"
                                                 (cross-mult 1)
                                                 nil
                                                 nil)
                                                ("2"
                                                 (cross-mult 1)
                                                 nil
                                                 nil))
                                               nil))
                                             nil)
                                            ("2"
                                             (split)
                                             (("1"
                                               (cross-mult 1)
                                               nil
                                               nil)
                                              ("2"
                                               (cross-mult 1)
                                               nil
                                               nil))
                                             nil))
                                           nil)
                                          ("2"
                                           (hide-all-but (-2 1))
                                           (("2" (grind) nil nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil)
                                  ("2"
                                   (flatten)
                                   (("2"
                                     (replaces -1)
                                     (("2" (assert) nil nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ((- const-decl "Vector" vectors_2D vectors)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (- const-decl "Vector" vectors_2D vectors)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (Vector type-eq-decl nil vectors_2D vectors)
               (real nonempty-type-from-decl nil reals nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (minus_real_is_real application-judgement "real" reals
                nil)
               (real_minus_real_is_real application-judgement "real"
                reals nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (/= const-decl "boolean" notequal nil)
               (W skolem-const-decl "Vector" resolution nil)
               (zero const-decl "Vector" vectors_2D vectors)
               (Nz_vector type-eq-decl nil vectors_2D vectors)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (>= const-decl "bool" reals nil)
               (nnreal type-eq-decl nil real_types nil)
               (norm const-decl "nnreal" vectors_2D vectors)
               (Normalized type-eq-decl nil vectors_2D vectors)
               (^ const-decl "Normalized" vectors_2D vectors)
               (real_times_real_is_real application-judgement "real"
                reals nil)
               (* const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (nzreal_times_nzreal_is_nzreal application-judgement
                "nzreal" real_types nil)
               (nz_sqv_gt_0 application-judgement "posreal" vectors_2D
                vectors)
               (sqv const-decl "nnreal" vectors_2D vectors)
               (nnreal_times_nnreal_is_nnreal application-judgement
                "nnreal" real_types nil)
               (real_div_nzreal_is_real application-judgement "real"
                reals nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (div_mult_pos_ge1 formula-decl nil real_props nil)
               (zero_times1 formula-decl nil real_props nil)
               (pos_times_gt formula-decl nil real_props nil)
               (neg_times_lt formula-decl nil real_props nil)
               (neg_times_le formula-decl nil real_props nil)
               (dot_scal_canon formula-decl nil vectors_2D vectors)
               (times_div2 formula-decl nil real_props nil)
               (nonzero_times3 formula-decl nil real_props nil)
               (div_times formula-decl nil real_props nil)
               (* const-decl "real" vectors_2D vectors)
               (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (nznum nonempty-type-eq-decl nil number_fields nil)
               (/ const-decl "[numfield, nznum -> numfield]"
                  number_fields nil)
               (V skolem-const-decl "Vector" resolution nil)
               (> const-decl "bool" reals nil)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (both_sides_times_pos_le1 formula-decl nil real_props
                nil)
               (nzreal_div_nzreal_is_nzreal application-judgement
                "nzreal" real_types nil)
               (* const-decl "Vector" vectors_2D vectors)
               (+ const-decl "Vector" vectors_2D vectors)
               (real_plus_real_is_real application-judgement "real"
                reals nil)
               (norm_zero formula-decl nil vectors_2D vectors)
               (sub_eq_zero formula-decl nil vectors_2D vectors)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (proj_vect subtype
               "(vectors_2D.+)(vectors_2D.^((vectors_2D.-)(resolution.v, resolution.u)), vectors_2D.^((vectors_2D.-)(resolution.v, resolution.w)))"
               "Nz_vect2"))
             (proj_vect_TCC7-1 nil 3680368111
              ("" (subtype-tcc) nil nil) nil nil
              (proj_vect subtype
               "(vectors_2D.+)(vectors_2D.^((vectors_2D.-)(resolution.v, resolution.u)), vectors_2D.^((vectors_2D.-)(resolution.v, resolution.w)))"
               "Nz_vect2")))
            (proj_vect_TCC8 0
             (proj_vect_TCC8-1 nil 3680368111
              ("" (skeep*)
               (("" (case "v-u = -(u-v)")
                 (("1" (replaces -1)
                   (("1" (replaces -1) (("1" (assert) nil nil)) nil))
                   nil)
                  ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                 nil))
               nil)
              ((Vect2 type-eq-decl nil vectors_2D_def vectors)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (Vector type-eq-decl nil vectors_2D vectors)
               (real nonempty-type-from-decl nil reals nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (dot_zero_left formula-decl nil vectors_2D vectors)
               (neg_zero formula-decl nil vectors_2D vectors)
               (minus_real_is_real application-judgement "real" reals
                nil)
               (real_minus_real_is_real application-judgement "real"
                reals nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (proj_vect subtype
               "(vectors_2D.-)(resolution.u, resolution.v)"
               "Nz_vector")))
            (proj_vect_TCC9 0
             (proj_vect_TCC9-1 nil 3680368111
              ("" (skeep*)
               (("" (replaces -1) (("" (assert) nil nil)) nil)) nil)
              ((real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (dot_zero_right formula-decl nil vectors_2D vectors)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (proj_vect subtype
               "(vectors_2D.-)(resolution.w, resolution.v)"
               "Nz_vector")))
            (proj_vect_TCC10 0
             (proj_vect_TCC10-2 nil 3680370516
              ("" (skeep*)
               (("" (case "NOT u-v = -(v-u)")
                 (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                  ("2" (name "V" "v-u")
                   (("2" (replaces -2)
                     (("2" (replaces -1)
                       (("2" (name "W" "w-v")
                         (("2" (replaces -1)
                           (("2" (assert)
                             (("2" (lemma "sub_eq_zero")
                               (("2"
                                 (inst - "^(W)" "^(V)")
                                 (("1"
                                   (flatten)
                                   (("1"
                                     (hide -2)
                                     (("1"
                                       (split)
                                       (("1"
                                         (hide -2)
                                         (("1"
                                           (mult-by 2 "1/norm(W)")
                                           (("1"
                                             (mult-by 2 "1/norm(V)")
                                             (("1"
                                               (typepred "sqv(^(V))")
                                               (("1"
                                                 (expand "sqv")
                                                 (("1"
                                                   (grind)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil)
                                              ("2"
                                               (split)
                                               (("1"
                                                 (cross-mult 1)
                                                 nil
                                                 nil)
                                                ("2"
                                                 (cross-mult 1)
                                                 nil
                                                 nil))
                                               nil))
                                             nil)
                                            ("2"
                                             (split)
                                             (("1"
                                               (cross-mult 1)
                                               nil
                                               nil)
                                              ("2"
                                               (cross-mult 1)
                                               nil
                                               nil))
                                             nil))
                                           nil))
                                         nil)
                                        ("2" (grind) nil nil))
                                       nil))
                                     nil))
                                   nil)
                                  ("2"
                                   (flatten)
                                   (("2"
                                     (replaces -1)
                                     (("2" (assert) nil nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ((Vect2 type-eq-decl nil vectors_2D_def vectors)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (Vector type-eq-decl nil vectors_2D vectors)
               (real nonempty-type-from-decl nil reals nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (minus_real_is_real application-judgement "real" reals
                nil)
               (real_minus_real_is_real application-judgement "real"
                reals nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (/= const-decl "boolean" notequal nil)
               (zero const-decl "Vector" vectors_2D vectors)
               (Nz_vector type-eq-decl nil vectors_2D vectors)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (>= const-decl "bool" reals nil)
               (nnreal type-eq-decl nil real_types nil)
               (norm const-decl "nnreal" vectors_2D vectors)
               (Normalized type-eq-decl nil vectors_2D vectors)
               (^ const-decl "Normalized" vectors_2D vectors)
               (+ const-decl "Vector" vectors_2D vectors)
               (real_times_real_is_real application-judgement "real"
                reals nil)
               (* const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (det const-decl "real" det_2D vectors)
               (* const-decl "Vector" vectors_2D vectors)
               (real_plus_real_is_real application-judgement "real"
                reals nil)
               (sqv const-decl "nnreal" vectors_2D vectors)
               (nz_sqv_gt_0 application-judgement "posreal" vectors_2D
                vectors)
               (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
               (div_mult_pos_ge1 formula-decl nil real_props nil)
               (nnreal_times_nnreal_is_nnreal application-judgement
                "nnreal" real_types nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (nznum nonempty-type-eq-decl nil number_fields nil)
               (/ const-decl "[numfield, nznum -> numfield]"
                  number_fields nil)
               (> const-decl "bool" reals nil)
               (* const-decl "real" vectors_2D vectors)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (both_sides_times_pos_ge1 formula-decl nil real_props
                nil)
               (nzreal_div_nzreal_is_nzreal application-judgement
                "nzreal" real_types nil)
               (dot_zero_left formula-decl nil vectors_2D vectors)
               (sub_eq_zero formula-decl nil vectors_2D vectors)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (proj_vect subtype
               "(vectors_2D.+)(vectors_2D.^((vectors_2D.-)(resolution.u, resolution.v)), vectors_2D.^((vectors_2D.-)(resolution.w, resolution.v)))"
               "Nz_vect2"))
             (proj_vect_TCC10-1 nil 3680368111
              ("" (subtype-tcc) nil nil) nil nil
              (proj_vect subtype
               "(vectors_2D.+)(vectors_2D.^((vectors_2D.-)(resolution.u, resolution.v)), vectors_2D.^((vectors_2D.-)(resolution.w, resolution.v)))"
               "Nz_vect2")))
            (proj_vect_norm 0
             (proj_vect_norm-1 nil 3659195256
              (""
               (case "NOT FORALL (AA,BB:Nz_vect2): AA*BB>=0 IMPLIES sqv(^(AA)+^(BB))>1")
               (("1" (hide 2)
                 (("1" (case "FORALL (ww:Nz_vect2): sqv(^(ww))=1")
                   (("1" (skeep*)
                     (("1" (inst-cp - "AA")
                       (("1" (inst - "BB")
                         (("1" (rewrite "sqv_add")
                           (("1" (replaces -1)
                             (("1" (replaces -1)
                               (("1"
                                 (case "^(AA)*^(BB)>=0")
                                 (("1" (assert) nil nil)
                                  ("2"
                                   (hide 2)
                                   (("2"
                                     (lemma "vectors_2D.norm_eq_0")
                                     (("2"
                                       (inst-cp - "AA")
                                       (("2"
                                         (inst - "BB")
                                         (("2"
                                           (assert)
                                           (("2"
                                             (mult-by -1 "1/norm(AA)")
                                             (("2"
                                               (mult-by
                                                -1
                                                "1/norm(BB)")
                                               (("2"
                                                 (hide (1 2))
                                                 (("2"
                                                   (grind
                                                    :exclude
                                                    "norm")
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil)
                    ("2" (hide 2)
                     (("2" (skosimp*)
                       (("2" (typepred "^(ww!1)")
                         (("2" (both-sides-f -1 "sq")
                           (("2" (rewrite "sq_norm")
                             (("2" (assert) nil nil)) nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ("2" (skeep*)
                 (("2" (lemma "sq_gt")
                   (("2" (inst?)
                     (("2" (assert)
                       (("2" (hide 2)
                         (("2" (rewrite "sq_norm")
                           (("2" (expand "proj_vect")
                             (("2" (lift-if)
                               (("2"
                                 (split)
                                 (("1"
                                   (flatten)
                                   (("1"
                                     (hide -)
                                     (("1" (grind) nil nil))
                                     nil))
                                   nil)
                                  ("2"
                                   (flatten)
                                   (("2"
                                     (case
                                      "v-u=zero OR u-v=zero OR w-v=zero OR v-w=zero")
                                     (("1"
                                       (hide 3)
                                       (("1"
                                         (split)
                                         (("1"
                                           (rewrite "sub_eq_zero")
                                           (("1"
                                             (replaces -1)
                                             (("1" (assert) nil nil))
                                             nil))
                                           nil)
                                          ("2"
                                           (rewrite "sub_eq_zero")
                                           (("2"
                                             (replaces -1)
                                             (("2" (assert) nil nil))
                                             nil))
                                           nil)
                                          ("3"
                                           (rewrite "sub_eq_zero")
                                           (("3"
                                             (replaces -1)
                                             (("3" (assert) nil nil))
                                             nil))
                                           nil)
                                          ("4"
                                           (rewrite "sub_eq_zero")
                                           (("4"
                                             (replaces -1)
                                             (("4" (assert) nil nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil)
                                      ("2"
                                       (hide (2 3))
                                       (("2"
                                         (flatten)
                                         (("2"
                                           (ground)
                                           (("1"
                                             (inst? -2)
                                             (("1"
                                               (assert)
                                               (("1"
                                                 (hide 1)
                                                 (("1"
                                                   (grind)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil)
                                            ("2"
                                             (inst?)
                                             (("2"
                                               (assert)
                                               (("2"
                                                 (hide (-1 1))
                                                 (("2"
                                                   (grind)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil)
                                            ("3"
                                             (inst?)
                                             (("3"
                                               (assert)
                                               (("3"
                                                 (hide (1 2))
                                                 (("3"
                                                   (grind)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ((proj_vect const-decl "Nz_vect2" resolution nil)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (OR const-decl "[bool, bool -> bool]" booleans nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (norm_zero formula-decl nil vectors_2D vectors)
               (sub_eq_args formula-decl nil vectors_2D vectors)
               (sub_eq_zero formula-decl nil vectors_2D vectors)
               (perpR const-decl "Vect2" perpendicular_2D vectors)
               (real_minus_real_is_real application-judgement "real"
                reals nil)
               (minus_real_is_real application-judgement "real" reals
                nil)
               (sq_gt formula-decl nil sq reals)
               (sq_norm formula-decl nil vectors_2D vectors)
               (sq_1 formula-decl nil sq reals)
               (id const-decl "(bijective?[T, T])" identity nil)
               (bijective? const-decl "bool" functions nil)
               (sq_nz_pos application-judgement "posreal" sq reals)
               (sq const-decl "nonneg_real" sq reals)
               (TRUE const-decl "bool" booleans nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (odd_plus_odd_is_even application-judgement "even_int"
                integers nil)
               (norm_eq_0 formula-decl nil vectors_2D vectors)
               (posreal_div_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (both_sides_times_pos_ge1_imp formula-decl nil
                extra_real_props nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (nznum nonempty-type-eq-decl nil number_fields nil)
               (/ const-decl "[numfield, nznum -> numfield]"
                  number_fields nil)
               (* const-decl "Vector" vectors_2D vectors)
               (nnreal_times_nnreal_is_nnreal application-judgement
                "nnreal" real_types nil)
               (* const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (nz_norm_gt_0 application-judgement "posreal" vectors_2D
                vectors)
               (dot_scal_left formula-decl nil vectors_2D vectors)
               (real_plus_real_is_real application-judgement "real"
                reals nil)
               (posreal_plus_nnreal_is_posreal application-judgement
                "posreal" real_types nil)
               (nz_nzv application-judgement "Nz_vector" vectors_2D
                vectors)
               (real_times_real_is_real application-judgement "real"
                reals nil)
               (sqv_add formula-decl nil vectors_2D vectors)
               (nz_sqv_gt_0 application-judgement "posreal" vectors_2D
                vectors)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (real nonempty-type-from-decl nil reals nil)
               (Vector type-eq-decl nil vectors_2D vectors)
               (/= const-decl "boolean" notequal nil)
               (zero const-decl "Vector" vectors_2D vectors)
               (Nz_vect2 type-eq-decl nil vectors_2D vectors)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (>= const-decl "bool" reals nil)
               (* const-decl "real" vectors_2D vectors)
               (> const-decl "bool" reals nil)
               (nnreal type-eq-decl nil real_types nil)
               (sqv const-decl "nnreal" vectors_2D vectors)
               (+ const-decl "Vector" vectors_2D vectors)
               (Nz_vector type-eq-decl nil vectors_2D vectors)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (norm const-decl "nnreal" vectors_2D vectors)
               (Normalized type-eq-decl nil vectors_2D vectors)
               (^ const-decl "Normalized" vectors_2D vectors))
              shostak))
            (modifiable_to_size_monotonic 0
             (modifiable_to_size_monotonic-1 nil 3680536555
              ("" (skeep*)
               (("" (expand "modifiable_to_size")
                 (("" (flatten)
                   (("" (assert)
                     (("" (hide -2)
                       (("" (expand "acceptable_polygon_2D")
                         (("" (flatten)
                           (("" (assert)
                             (("" (skeep)
                               ((""
                                 (skeep)
                                 ((""
                                   (insteep)
                                   ((""
                                     (insteep)
                                     ((""
                                       (split +)
                                       (("1" (propax) nil nil)
                                        ("2"
                                         (flatten)
                                         (("2"
                                           (assert)
                                           (("2"
                                             (split +)
                                             (("1" (assert) nil nil)
                                              ("2"
                                               (flatten)
                                               (("2"
                                                 (assert)
                                                 (("2"
                                                   (lemma "sq_le")
                                                   (("2"
                                                     (inst
                                                      -
                                                      "2*B1+BUFF"
                                                      "2*B2+BUFF")
                                                     (("2"
                                                       (assert)
                                                       (("2"
                                                         (split +)
                                                         (("1"
                                                           (flatten)
                                                           (("1"
                                                             (assert)
                                                             (("1"
                                                               (split
                                                                -6)
                                                               (("1"
                                                                 (propax)
                                                                 nil
                                                                 nil)
                                                                ("2"
                                                                 (flatten)
                                                                 (("2"
                                                                   (hide
                                                                    -1)
                                                                   (("2"
                                                                     (expand
                                                                      "near_poly_edge")
                                                                     (("2"
                                                                       (rewrite
                                                                        "near_edge_def")
                                                                       (("1"
                                                                         (rewrite
                                                                          "near_edge_def")
                                                                         (("1"
                                                                           (rewrite
                                                                            "near_edge_def")
                                                                           (("1"
                                                                             (rewrite
                                                                              "near_edge_def")
                                                                             (("1"
                                                                               (split)
                                                                               (("1"
                                                                                 (skeep)
                                                                                 (("1"
                                                                                   (inst
                                                                                    +
                                                                                    "w")
                                                                                   (("1"
                                                                                     (assert)
                                                                                     nil
                                                                                     nil))
                                                                                   nil))
                                                                                 nil)
                                                                                ("2"
                                                                                 (hide
                                                                                  1)
                                                                                 (("2"
                                                                                   (skeep)
                                                                                   (("2"
                                                                                     (inst?)
                                                                                     (("2"
                                                                                       (assert)
                                                                                       nil
                                                                                       nil))
                                                                                     nil))
                                                                                   nil))
                                                                                 nil))
                                                                               nil)
                                                                              ("2"
                                                                               (ground)
                                                                               nil
                                                                               nil))
                                                                             nil)
                                                                            ("2"
                                                                             (ground)
                                                                             nil
                                                                             nil))
                                                                           nil)
                                                                          ("2"
                                                                           (ground)
                                                                           nil
                                                                           nil))
                                                                         nil)
                                                                        ("2"
                                                                         (ground)
                                                                         nil
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil)
                                                          ("2"
                                                           (flatten)
                                                           (("2"
                                                             (split 2)
                                                             (("1"
                                                               (flatten)
                                                               (("1"
                                                                 (assert)
                                                                 nil
                                                                 nil))
                                                               nil)
                                                              ("2"
                                                               (flatten)
                                                               (("2"
                                                                 (split
                                                                  2)
                                                                 (("1"
                                                                   (propax)
                                                                   nil
                                                                   nil)
                                                                  ("2"
                                                                   (flatten)
                                                                   (("2"
                                                                     (split
                                                                      2)
                                                                     (("1"
                                                                       (flatten)
                                                                       (("1"
                                                                         (assert)
                                                                         (("1"
                                                                           (split
                                                                            -6)
                                                                           (("1"
                                                                             (propax)
                                                                             nil
                                                                             nil)
                                                                            ("2"
                                                                             (flatten)
                                                                             (("2"
                                                                               (expand
                                                                                "near_poly_edge"
                                                                                (1
                                                                                 2
                                                                                 -))
                                                                               (("2"
                                                                                 (rewrite
                                                                                  "near_edge_def")
                                                                                 (("1"
                                                                                   (rewrite
                                                                                    "near_edge_def")
                                                                                   (("1"
                                                                                     (rewrite
                                                                                      "near_edge_def")
                                                                                     (("1"
                                                                                       (rewrite
                                                                                        "near_edge_def")
                                                                                       (("1"
                                                                                         (split
                                                                                          -3)
                                                                                         (("1"
                                                                                           (skeep)
                                                                                           (("1"
                                                                                             (inst
                                                                                              +
                                                                                              "w")
                                                                                             (("1"
                                                                                               (assert)
                                                                                               nil
                                                                                               nil))
                                                                                             nil))
                                                                                           nil)
                                                                                          ("2"
                                                                                           (hide
                                                                                            1)
                                                                                           (("2"
                                                                                             (skeep)
                                                                                             (("2"
                                                                                               (insteep)
                                                                                               (("2"
                                                                                                 (assert)
                                                                                                 nil
                                                                                                 nil))
                                                                                               nil))
                                                                                             nil))
                                                                                           nil))
                                                                                         nil)
                                                                                        ("2"
                                                                                         (ground)
                                                                                         nil
                                                                                         nil))
                                                                                       nil)
                                                                                      ("2"
                                                                                       (ground)
                                                                                       nil
                                                                                       nil))
                                                                                     nil)
                                                                                    ("2"
                                                                                     (ground)
                                                                                     nil
                                                                                     nil))
                                                                                   nil)
                                                                                  ("2"
                                                                                   (ground)
                                                                                   nil
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil)
                                                                      ("2"
                                                                       (flatten)
                                                                       (("2"
                                                                         (assert)
                                                                         (("2"
                                                                           (split
                                                                            2)
                                                                           (("1"
                                                                             (flatten)
                                                                             (("1"
                                                                               (assert)
                                                                               nil
                                                                               nil))
                                                                             nil)
                                                                            ("2"
                                                                             (flatten)
                                                                             (("2"
                                                                               (split
                                                                                2)
                                                                               (("1"
                                                                                 (propax)
                                                                                 nil
                                                                                 nil)
                                                                                ("2"
                                                                                 (flatten)
                                                                                 (("2"
                                                                                   (assert)
                                                                                   (("2"
                                                                                     (split
                                                                                      -)
                                                                                     (("1"
                                                                                       (propax)
                                                                                       nil
                                                                                       nil)
                                                                                      ("2"
                                                                                       (split
                                                                                        3)
                                                                                       (("1"
                                                                                         (rewrite
                                                                                          "segments_2D_close_def"
                                                                                          :dir
                                                                                          rl)
                                                                                         (("1"
                                                                                           (rewrite
                                                                                            "segments_2D_close_def"
                                                                                            :dir
                                                                                            rl)
                                                                                           (("1"
                                                                                             (skeep)
                                                                                             (("1"
                                                                                               (insteep)
                                                                                               (("1"
                                                                                                 (assert)
                                                                                                 nil
                                                                                                 nil))
                                                                                               nil))
                                                                                             nil))
                                                                                           nil))
                                                                                         nil)
                                                                                        ("2"
                                                                                         (propax)
                                                                                         nil
                                                                                         nil))
                                                                                       nil))
                                                                                     nil))
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ((posreal_times_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (modifiable_to_size const-decl "bool" resolution nil)
               (posreal_plus_nnreal_is_posreal application-judgement
                "posreal" real_types nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (nil application-judgement "below(m)" mod nil)
               (acceptable_polygon_2D const-decl "bool"
                acceptable_polygon nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_plus_int_is_int application-judgement "int"
                integers nil)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (* const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (near_poly_edge const-decl "bool" acceptable_polygon
                nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (IF const-decl "[boolean, T, T -> T]" if_def nil)
               (near_edge_def formula-decl nil edge_proximity nil)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (< const-decl "bool" reals nil)
               (below type-eq-decl nil naturalnumbers nil)
               (polygon_2D type-eq-decl nil acceptable_polygon nil)
               (/= const-decl "boolean" notequal nil)
               (nonzero_integer nonempty-type-eq-decl nil integers nil)
               (- const-decl "[numfield -> numfield]" number_fields
                  nil)
               (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
                    real_defs nil)
               (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (segments_2D_close_def formula-decl nil edge_proximity
                nil)
               (sq_nz_pos application-judgement "posreal" sq reals)
               (sq_le formula-decl nil sq reals)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (<= const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (- const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (>= const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (subrange type-eq-decl nil integers nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              shostak))
            (expand_polygon_2D_TCC1 0
             (expand_polygon_2D_TCC1-1 nil 3659182662
              ("" (subtype-tcc) nil nil)
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (< const-decl "bool" reals nil)
               (below type-eq-decl nil naturalnumbers nil)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (polygon_2D type-eq-decl nil acceptable_polygon nil)
               (modifiable_to_size const-decl "bool" resolution nil)
               (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
               (near_poly_edge const-decl "bool" acceptable_polygon
                nil)
               (* const-decl "real" vectors_2D vectors)
               (sqv const-decl "nnreal" vectors_2D vectors)
               (norm const-decl "nnreal" vectors_2D vectors)
               (acceptable_polygon_2D const-decl "bool"
                acceptable_polygon nil)
               (det const-decl "real" det_2D vectors)
               (counterclockwise_edges const-decl "bool"
                acceptable_polygon nil)
               (test_point_below const-decl "Vect2" acceptable_polygon
                nil)
               (definitely_outside_prelim const-decl "bool"
                polygon_contain nil)
               (winding_number const-decl
                "{ii: int | ii = winding_number_rec(N, p, s, N - 1) / 4}"
                polygon_contain nil)
               (definitely_outside const-decl "bool" polygon_contain
                nil)
               (nice_polygon_2D const-decl "bool" polygon_contain nil)
               (posreal_plus_nnreal_is_posreal application-judgement
                "posreal" real_types nil)
               (rat_div_nzrat_is_rat application-judgement "rat"
                rationals nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (nnrat_div_posrat_is_nnrat application-judgement
                "nonneg_rat" rationals nil)
               (nonneg_floor_is_nat application-judgement "nat"
                floor_ceil nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (nil application-judgement "below(m)" mod nil)
               (posreal_times_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (real_div_nzreal_is_real application-judgement "real"
                reals nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (real_plus_real_is_real application-judgement "real"
                reals nil)
               (real_times_real_is_real application-judgement "real"
                reals nil)
               (real_minus_real_is_real application-judgement "real"
                reals nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (int_plus_int_is_int application-judgement "int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil))
              nil
              (expand_polygon_2D subtype
               "(number_fields.-)(resolution.i, 1)"
               "naturalnumbers.below(resolution.N)")))
            (expand_polygon_2D_TCC2 0
             (expand_polygon_2D_TCC2-1 nil 3659182662
              ("" (subtype-tcc) nil nil) nil nil
              (expand_polygon_2D subtype
               "(number_fields.-)(resolution.N, 1)"
               "naturalnumbers.below(resolution.N)")))
            (expand_polygon_2D_TCC3 0
             (expand_polygon_2D_TCC3-1 nil 3659182662
              ("" (subtype-tcc) nil nil)
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (< const-decl "bool" reals nil)
               (below type-eq-decl nil naturalnumbers nil)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (polygon_2D type-eq-decl nil acceptable_polygon nil)
               (modifiable_to_size const-decl "bool" resolution nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (int_plus_int_is_int application-judgement "int"
                integers nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (real_minus_real_is_real application-judgement "real"
                reals nil)
               (real_times_real_is_real application-judgement "real"
                reals nil)
               (real_plus_real_is_real application-judgement "real"
                reals nil)
               (minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_div_nzreal_is_real application-judgement "real"
                reals nil)
               (posreal_times_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (nil application-judgement "below(m)" mod nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (nonneg_floor_is_nat application-judgement "nat"
                floor_ceil nil)
               (nnrat_div_posrat_is_nnrat application-judgement
                "nonneg_rat" rationals nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (rat_div_nzrat_is_rat application-judgement "rat"
                rationals nil)
               (posreal_plus_nnreal_is_posreal application-judgement
                "posreal" real_types nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (nice_polygon_2D const-decl "bool" polygon_contain nil)
               (definitely_outside const-decl "bool" polygon_contain
                nil)
               (winding_number const-decl
                "{ii: int | ii = winding_number_rec(N, p, s, N - 1) / 4}"
                polygon_contain nil)
               (definitely_outside_prelim const-decl "bool"
                polygon_contain nil)
               (test_point_below const-decl "Vect2" acceptable_polygon
                nil)
               (counterclockwise_edges const-decl "bool"
                acceptable_polygon nil)
               (det const-decl "real" det_2D vectors)
               (acceptable_polygon_2D const-decl "bool"
                acceptable_polygon nil)
               (norm const-decl "nnreal" vectors_2D vectors)
               (sqv const-decl "nnreal" vectors_2D vectors)
               (* const-decl "real" vectors_2D vectors)
               (near_poly_edge const-decl "bool" acceptable_polygon
                nil)
               (mod const-decl "{k | abs(k) < abs(j)}" mod nil))
              nil
              (expand_polygon_2D subtype
               "(number_fields.+)(resolution.i, 1)"
               "naturalnumbers.below(resolution.N)")))
            (expand_polygon_2D_TCC4 0
             (expand_polygon_2D_TCC4-1 nil 3659182662
              ("" (subtype-tcc) nil nil) nil nil
              (expand_polygon_2D subtype "0"
               "naturalnumbers.below(resolution.N)")))
            (expand_polygon_2D_TCC5 0
             (expand_polygon_2D_TCC5-1 nil 3659182662
              ("" (skeep*)
               (("" (case "p(i)/=prev")
                 (("1" (flatten)
                   (("1" (rewrite "perpR_sub")
                     (("1" (rewrite "sub_eq_zero")
                       (("1"
                         (case "-perpR(perpR(p(i))) = -perpR(perpR(prev))")
                         (("1" (hide-all-but (-1 +))
                           (("1" (decompose-equality +)
                             (("1" (grind) nil nil)
                              ("2" (grind) nil nil))
                             nil))
                           nil)
                          ("2" (assert) nil nil))
                         nil))
                       nil))
                     nil))
                   nil)
                  ("2" (flatten)
                   (("2" (typepred "p")
                     (("2" (expand "modifiable_to_size")
                       (("2" (flatten)
                         (("2" (hide -2)
                           (("2" (expand "nice_polygon_2D")
                             (("2" (flatten)
                               (("2"
                                 (expand "acceptable_polygon_2D")
                                 (("2"
                                   (flatten)
                                   (("2"
                                     (name
                                      "jj"
                                      "IF i>0 THEN i-1 ELSE N-1 ENDIF")
                                     (("2"
                                       (case "NOT prev = p(jj)")
                                       (("1"
                                         (expand "jj" 1)
                                         (("1" (propax) nil nil))
                                         nil)
                                        ("2"
                                         (replaces -1)
                                         (("2"
                                           (case "i<=jj")
                                           (("1"
                                             (inst - "i" "jj")
                                             (("1"
                                               (assert)
                                               (("1"
                                                 (ground)
                                                 (("1"
                                                   (lift-if)
                                                   (("1"
                                                     (ground)
                                                     nil
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil)
                                              ("2"
                                               (assert)
                                               (("2"
                                                 (lift-if)
                                                 (("2"
                                                   (ground)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil)
                                            ("2"
                                             (inst - "jj" "i")
                                             (("1" (assert) nil nil)
                                              ("2" (ground) nil nil)
                                              ("3"
                                               (lift-if)
                                               (("3" (ground) nil nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil)
                                        ("3"
                                         (assert)
                                         (("3"
                                           (lift-if)
                                           (("3" (ground) nil nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ((modifiable_to_size const-decl "bool" resolution nil)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (polygon_2D type-eq-decl nil acceptable_polygon nil)
               (below type-eq-decl nil naturalnumbers nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (< const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (/= const-decl "boolean" notequal nil)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (real nonempty-type-from-decl nil reals nil)
               (perpR_sub formula-decl nil perpendicular_2D vectors)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (minus_real_is_real application-judgement "real" reals
                nil)
               (proj_vect_nonzero application-judgement "Nz_vect2"
                resolution nil)
               (perpR const-decl "Vect2" perpendicular_2D vectors)
               (Vector type-eq-decl nil vectors_2D vectors)
               (sub_eq_zero formula-decl nil vectors_2D vectors)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (nice_polygon_2D const-decl "bool" polygon_contain nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (nil application-judgement "below(m)" mod nil)
               (acceptable_polygon_2D const-decl "bool"
                acceptable_polygon nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (IF const-decl "[boolean, T, T -> T]" if_def nil)
               (- const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (subrange type-eq-decl nil integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (<= const-decl "bool" reals nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (posreal_times_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (expand_polygon_2D subtype
               "perpendicular_2D.perpR((vectors_2D.-)(resolution.p(resolution.i), resolution.prev))"
               "Nz_vector")))
            (expand_polygon_2D_TCC6 0
             (expand_polygon_2D_TCC6-2 nil 3659275127
              ("" (skeep*)
               (("" (replaces -6)
                 (("" (hide -) (("" (grind) nil nil)) nil)) nil))
               nil)
              ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
                    real_defs nil)
               (posreal_div_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (int_abs_is_nonneg application-judgement
                "{j: nonneg_int | j >= i}" real_defs nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (expand_polygon_2D subtype
               "(vectors_2D.*(resolution.pv, resolution.R))" "nznum"))
             (expand_polygon_2D_TCC6-1 nil 3659182662
              ("" (skeep*)
               ((""
                 (case "FORALL (vv:Vect2): norm(vv) = norm(perpR(vv))")
                 (("1" (rewrite -1 1)
                   (("1" (replaces -5) (("1" (assert) nil nil)) nil))
                   nil)
                  ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                 nil))
               nil)
              ((perpR const-decl "Vect2" perpendicular_2D vectors)
               (norm const-decl "nnreal" vectors_2D vectors)
               (Vector type-eq-decl nil vectors_2D vectors)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (norm_zero formula-decl nil vectors_2D vectors)
               (* const-decl "real" vectors_2D vectors)
               (sqv const-decl "nnreal" vectors_2D vectors))
              nil
              (expand_polygon_2D subtype
               "(vectors_2D.*(resolution.pv, resolution.R))" "nznum")))
            (contract_polygon_2D_TCC1 0
             (contract_polygon_2D_TCC1-1 nil 3659256522
              ("" (subtype-tcc) nil nil)
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (< const-decl "bool" reals nil)
               (below type-eq-decl nil naturalnumbers nil)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (polygon_2D type-eq-decl nil acceptable_polygon nil)
               (modifiable_to_size const-decl "bool" resolution nil)
               (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
               (near_poly_edge const-decl "bool" acceptable_polygon
                nil)
               (acceptable_polygon_2D const-decl "bool"
                acceptable_polygon nil)
               (det const-decl "real" det_2D vectors)
               (counterclockwise_edges const-decl "bool"
                acceptable_polygon nil)
               (test_point_below const-decl "Vect2" acceptable_polygon
                nil)
               (definitely_outside_prelim const-decl "bool"
                polygon_contain nil)
               (winding_number const-decl
                "{ii: int | ii = winding_number_rec(N, p, s, N - 1) / 4}"
                polygon_contain nil)
               (definitely_outside const-decl "bool" polygon_contain
                nil)
               (nice_polygon_2D const-decl "bool" polygon_contain nil)
               (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
                    real_defs nil)
               (posreal_div_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (int_abs_is_nonneg application-judgement
                "{j: nonneg_int | j >= i}" real_defs nil)
               (posreal_plus_nnreal_is_posreal application-judgement
                "posreal" real_types nil)
               (rat_div_nzrat_is_rat application-judgement "rat"
                rationals nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (nnrat_div_posrat_is_nnrat application-judgement
                "nonneg_rat" rationals nil)
               (nonneg_floor_is_nat application-judgement "nat"
                floor_ceil nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (nil application-judgement "below(m)" mod nil)
               (posreal_times_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (real_div_nzreal_is_real application-judgement "real"
                reals nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (int_plus_int_is_int application-judgement "int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (* const-decl "real" vectors_2D vectors)
               (sqv const-decl "nnreal" vectors_2D vectors)
               (norm const-decl "nnreal" vectors_2D vectors)
               (perpR const-decl "Vect2" perpendicular_2D vectors)
               (* const-decl "Vector" vectors_2D vectors)
               (^ const-decl "Normalized" vectors_2D vectors)
               (real_times_real_is_real application-judgement "real"
                reals nil)
               (real_plus_real_is_real application-judgement "real"
                reals nil)
               (real_minus_real_is_real application-judgement "real"
                reals nil)
               (minus_real_is_real application-judgement "real" reals
                nil)
               (nzreal_div_nzreal_is_nzreal application-judgement
                "nzreal" real_types nil))
              nil
              (contract_polygon_2D subtype
               "(vectors_2D.*(resolution.pv, resolution.R))" "nznum")))
            (closest_edge_TCC1 0
             (closest_edge_TCC1-1 nil 3659288496
              ("" (subtype-tcc) nil nil)
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (< const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil naturalnumbers nil)
               (naturalnumber type-eq-decl nil naturalnumbers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil))
              nil
              (closest_edge subtype "resolution.next"
               "naturalnumbers.below(resolution.N)")))
            (closest_edge_TCC2 0
             (closest_edge_TCC2-1 nil 3659288496
              ("" (subtype-tcc) nil nil)
              ((real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (nnreal type-eq-decl nil real_types nil)
               (naturalnumber type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil naturalnumbers nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (< const-decl "bool" reals nil)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (> const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil)
               (* const-decl "real" vectors_2D vectors)
               (sqv const-decl "nnreal" vectors_2D vectors)
               (norm const-decl "nnreal" vectors_2D vectors)
               (real_times_real_is_real application-judgement "real"
                reals nil)
               (real_plus_real_is_real application-judgement "real"
                reals nil)
               (real_minus_real_is_real application-judgement "real"
                reals nil))
              nil
              (closest_edge subtype "resolution.nextce"
               "naturalnumbers.below(resolution.N)")))
            (closest_edge_TCC3 0
             (closest_edge_TCC3-1 nil 3659288496
              ("" (subtype-tcc) nil nil)
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (< const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil naturalnumbers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil))
              nil
              (closest_edge subtype
               "(number_fields.-)(resolution.i, 1)"
               "naturalnumbers.below(resolution.N)")))
            (closest_edge_TCC4 0
             (closest_edge_TCC4-1 nil 3659288496
              ("" (termination-tcc) nil nil) nil nil
              (closest_edge termination
               "resolution.closest_edge(resolution.N, resolution.p, resolution.BUFF, resolution.s)((number_fields.-)(resolution.i, 1))"
               "nil")))
            (closest_edge_def_TCC1 0
             (closest_edge_def_TCC1-1 nil 3659288496
              ("" (skeep*) (("" (lift-if) (("" (ground) nil nil)) nil))
               nil)
              ((nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (closest_edge_def subtype "resolution.nextj"
               "naturalnumbers.below(resolution.N)")))
            (closest_edge_def_TCC2 0
             (closest_edge_def_TCC2-1 nil 3659288496
              ("" (subtype-tcc) nil nil)
              ((below type-eq-decl nil naturalnumbers nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (< const-decl "bool" reals nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (> const-decl "bool" reals nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (>= const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (rat_div_nzrat_is_rat application-judgement "rat"
                rationals nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (naturalnumber type-eq-decl nil naturalnumbers nil)
               (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
               (near_poly_edge const-decl "bool" acceptable_polygon
                nil)
               (* const-decl "real" vectors_2D vectors)
               (sqv const-decl "nnreal" vectors_2D vectors)
               (norm const-decl "nnreal" vectors_2D vectors)
               (acceptable_polygon_2D const-decl "bool"
                acceptable_polygon nil)
               (det const-decl "real" det_2D vectors)
               (counterclockwise_edges const-decl "bool"
                acceptable_polygon nil)
               (test_point_below const-decl "Vect2" acceptable_polygon
                nil)
               (definitely_outside_prelim const-decl "bool"
                polygon_contain nil)
               (winding_number const-decl
                "{ii: int | ii = winding_number_rec(N, p, s, N - 1) / 4}"
                polygon_contain nil)
               (definitely_outside const-decl "bool" polygon_contain
                nil)
               (nice_polygon_2D const-decl "bool" polygon_contain nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (int_plus_int_is_int application-judgement "int"
                integers nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (real_minus_real_is_real application-judgement "real"
                reals nil)
               (real_times_real_is_real application-judgement "real"
                reals nil)
               (real_plus_real_is_real application-judgement "real"
                reals nil)
               (minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (posreal_times_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (nonneg_floor_is_nat application-judgement "nat"
                floor_ceil nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (real_div_nzreal_is_real application-judgement "real"
                reals nil))
              nil
              (closest_edge_def subtype "resolution.nextce"
               "naturalnumbers.below(resolution.N)")))
            (closest_edge_def 0
             (closest_edge_def-3 nil 3659354185
              ("" (skeep)
               (("" (name "ce" "closest_edge(N, p, BUFF, s)")
                 (("" (replace -1)
                   ((""
                     (case "NOT FORALL (kz:nat): kz<N IMPLIES ce(kz)<=kz")
                     (("1" (hide-all-but 1)
                       (("1" (induct "kz")
                         (("1" (expand "ce") (("1" (grind) nil nil))
                           nil)
                          ("2" (skosimp*)
                           (("2" (assert)
                             (("2" (expand "ce")
                               (("2"
                                 (expand "closest_edge" +)
                                 (("2"
                                   (lift-if)
                                   (("2"
                                     (ground)
                                     (("2"
                                       (lift-if)
                                       (("2" (ground) nil nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil)
                      ("2" (label "cele" -1)
                       (("2" (hide "cele")
                         (("2"
                           (name "F"
                                 "LAMBDA (i:nat): IF i>=N THEN 0 ELSE (LET nexti = (IF i<N-1 THEN i+1 ELSE 0 ENDIF),ci=closest_point(p(i), p(nexti), s, BUFF),thisdist=norm(s-ci) IN thisdist) ENDIF")
                           (("1"
                             (case "NOT (ce = (LAMBDA (ii:below(N)): IF ii=0 THEN 0 ELSIF F(ii)<F(ce(ii-1)) THEN ii ELSE ce(ii-1) ENDIF))")
                             (("1" (hide 2)
                               (("1"
                                 (hide -1)
                                 (("1"
                                   (decompose-equality +)
                                   (("1"
                                     (lift-if)
                                     (("1"
                                       (ground)
                                       (("1"
                                         (replaces -1)
                                         (("1"
                                           (hide -)
                                           (("1"
                                             (expand "ce")
                                             (("1" (grind) nil nil))
                                             nil))
                                           nil))
                                         nil)
                                        ("2"
                                         (hide -2)
                                         (("2"
                                           (expand "ce")
                                           (("2"
                                             (expand "closest_edge" +)
                                             (("2"
                                               (invoke
                                                (case "%1")
                                                (! 1 1 1))
                                               (("1"
                                                 (replaces -1)
                                                 nil
                                                 nil)
                                                ("2"
                                                 (hide 2)
                                                 (("2"
                                                   (case
                                                    "FORALL (kz:below(N)): (IF kz < N - 1 THEN p(kz+1) ELSE p(0) ENDIF)=p(mod(kz+1,N))")
                                                   (("1"
                                                     (rewrite -1)
                                                     (("1"
                                                       (rewrite -1)
                                                       (("1"
                                                         (name
                                                          "J"
                                                          "closest_edge(N, p, BUFF, s)(x!1 - 1)")
                                                         (("1"
                                                           (replaces
                                                            -1)
                                                           (("1"
                                                             (expand
                                                              "F")
                                                             (("1"
                                                               (assert)
                                                               (("1"
                                                                 (rewrite
                                                                  -1)
                                                                 (("1"
                                                                   (rewrite
                                                                    -1)
                                                                   nil
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil)
                                                    ("2"
                                                     (hide-all-but 1)
                                                     (("2"
                                                       (skeep*)
                                                       (("2"
                                                         (lift-if)
                                                         (("2"
                                                           (ground)
                                                           (("1"
                                                             (lemma
                                                              "mod_lt_nat")
                                                             (("1"
                                                               (inst?)
                                                               (("1"
                                                                 (assert)
                                                                 nil
                                                                 nil))
                                                               nil))
                                                             nil)
                                                            ("2"
                                                             (case
                                                              "NOT 1+kz=N")
                                                             (("1"
                                                               (assert)
                                                               nil
                                                               nil)
                                                              ("2"
                                                               (hide 1)
                                                               (("2"
                                                                 (replaces
                                                                  -1)
                                                                 (("2"
                                                                   (expand
                                                                    "mod")
                                                                   (("2"
                                                                     (case
                                                                      "floor(1)=1")
                                                                     (("1"
                                                                       (replaces
                                                                        -1)
                                                                       (("1"
                                                                         (assert)
                                                                         nil
                                                                         nil))
                                                                       nil)
                                                                      ("2"
                                                                       (assert)
                                                                       nil
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil)
                                                    ("3"
                                                     (hide 2)
                                                     (("3"
                                                       (skosimp*)
                                                       (("3"
                                                         (assert)
                                                         nil
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil)
                                                ("3" (ground) nil nil)
                                                ("4" (ground) nil nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil)
                                        ("3"
                                         (hide -1)
                                         (("3"
                                           (expand "ce")
                                           (("3"
                                             (expand
                                              "closest_edge"
                                              2
                                              1)
                                             (("3"
                                               (case
                                                "FORALL (kz:below(N)): (IF kz < N - 1 THEN p(kz+1) ELSE p(0) ENDIF)=p(mod(kz+1,N))")
                                               (("1"
                                                 (name
                                                  "J"
                                                  "closest_edge(N, p, BUFF, s)(x!1 - 1)")
                                                 (("1"
                                                   (replace -1)
                                                   (("1"
                                                     (rewrite -2)
                                                     (("1"
                                                       (rewrite -2)
                                                       (("1"
                                                         (lift-if)
                                                         (("1"
                                                           (assert)
                                                           (("1"
                                                             (ground)
                                                             (("1"
                                                               (expand
                                                                "F"
                                                                +)
                                                               (("1"
                                                                 (rewrite
                                                                  -3)
                                                                 (("1"
                                                                   (rewrite
                                                                    -3)
                                                                   nil
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil)
                                                ("2"
                                                 (hide 3)
                                                 (("2"
                                                   (hide-all-but 1)
                                                   (("2"
                                                     (skeep)
                                                     (("2"
                                                       (lift-if)
                                                       (("2"
                                                         (ground)
                                                         (("1"
                                                           (lemma
                                                            "mod_lt_nat")
                                                           (("1"
                                                             (inst?)
                                                             (("1"
                                                               (assert)
                                                               nil
                                                               nil))
                                                             nil))
                                                           nil)
                                                          ("2"
                                                           (case
                                                            "NOT 1+kz=N")
                                                           (("1"
                                                             (assert)
                                                             nil
                                                             nil)
                                                            ("2"
                                                             (replaces
                                                              -1)
                                                             (("2"
                                                               (expand
                                                                "mod")
                                                               (("2"
                                                                 (case
                                                                  "floor(1)=1")
                                                                 (("1"
                                                                   (replaces
                                                                    -1)
                                                                   (("1"
                                                                     (assert)
                                                                     nil
                                                                     nil))
                                                                   nil)
                                                                  ("2"
                                                                   (assert)
                                                                   nil
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil)
                                                ("3"
                                                 (hide 3)
                                                 (("3"
                                                   (skosimp*)
                                                   (("3"
                                                     (assert)
                                                     nil
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2"
                                     (skosimp*)
                                     (("2" (assert) nil nil))
                                     nil)
                                    ("3"
                                     (skosimp*)
                                     (("3" (assert) nil nil))
                                     nil))
                                   nil))
                                 nil))
                               nil)
                              ("2"
                               (case
                                "FORALL (ii,jj:nat): ii<N  AND jj<=ii IMPLIES F(jj)>=F(ce(ii))")
                               (("1"
                                 (hide (-2 -3))
                                 (("1"
                                   (inst - "i" "j")
                                   (("1"
                                     (skoletin +)
                                     (("1"
                                       (skoletin +)
                                       (("1"
                                         (skoletin +)
                                         (("1"
                                           (replaces -2)
                                           (("1"
                                             (skoletin +)
                                             (("1"
                                               (skoletin +)
                                               (("1"
                                                 (assert)
                                                 (("1"
                                                   (case
                                                    "NOT FORALL (jj:below(N)): LET nextjj = (IF jj<N-1 THEN 1+jj ELSE 0 ENDIF) IN norm(p(jj)-p(nextjj))>=BUFF")
                                                   (("1"
                                                     (hide-all-but
                                                      (-7 1))
                                                     (("1"
                                                       (skeep*)
                                                       (("1"
                                                         (skoletin)
                                                         (("1"
                                                           (expand
                                                            "nice_polygon_2D")
                                                           (("1"
                                                             (flatten)
                                                             (("1"
                                                               (hide
                                                                (-3
                                                                 -4))
                                                               (("1"
                                                                 (lemma
                                                                  "acceptable_polygon_2D_def")
                                                                 (("1"
                                                                   (inst?)
                                                                   (("1"
                                                                     (assert)
                                                                     (("1"
                                                                       (hide
                                                                        -3)
                                                                       (("1"
                                                                         (copy
                                                                          -2)
                                                                         (("1"
                                                                           (hide
                                                                            -3)
                                                                           (("1"
                                                                             (inst
                                                                              -
                                                                              "jj"
                                                                              "nextjj")
                                                                             (("1"
                                                                               (split
                                                                                -)
                                                                               (("1"
                                                                                 (lift-if)
                                                                                 (("1"
                                                                                   (flatten)
                                                                                   (("1"
                                                                                     (assert)
                                                                                     (("1"
                                                                                       (hide
                                                                                        (-2
                                                                                         -3))
                                                                                       (("1"
                                                                                         (split
                                                                                          -)
                                                                                         (("1"
                                                                                           (flatten)
                                                                                           (("1"
                                                                                             (expand
                                                                                              "near_poly_edge")
                                                                                             (("1"
                                                                                               (lemma
                                                                                                "near_edge_def")
                                                                                               (("1"
                                                                                                 (hide
                                                                                                  1)
                                                                                                 (("1"
                                                                                                   (inst?)
                                                                                                   (("1"
                                                                                                     (replaces
                                                                                                      -1)
                                                                                                     (("1"
                                                                                                       (inst
                                                                                                        +
                                                                                                        "p(nextjj)")
                                                                                                       (("1"
                                                                                                         (split
                                                                                                          +)
                                                                                                         (("1"
                                                                                                           (expand
                                                                                                            "on_segment_2D?")
                                                                                                           (("1"
                                                                                                             (inst
                                                                                                              +
                                                                                                              "0")
                                                                                                             (("1"
                                                                                                               (assert)
                                                                                                               nil
                                                                                                               nil))
                                                                                                             nil))
                                                                                                           nil)
                                                                                                          ("2"
                                                                                                           (rewrite
                                                                                                            "sq_ge"
                                                                                                            3
                                                                                                            :dir
                                                                                                            rl)
                                                                                                           (("2"
                                                                                                             (assert)
                                                                                                             (("2"
                                                                                                               (rewrite
                                                                                                                "sq_norm")
                                                                                                               (("2"
                                                                                                                 (assert)
                                                                                                                 (("2"
                                                                                                                   (hide-all-but
                                                                                                                    (1
                                                                                                                     3))
                                                                                                                   (("2"
                                                                                                                     (grind)
                                                                                                                     nil
                                                                                                                     nil))
                                                                                                                   nil))
                                                                                                                 nil))
                                                                                                               nil))
                                                                                                             nil))
                                                                                                           nil))
                                                                                                         nil))
                                                                                                       nil))
                                                                                                     nil)
                                                                                                    ("2"
                                                                                                     (lift-if)
                                                                                                     (("2"
                                                                                                       (ground)
                                                                                                       nil
                                                                                                       nil))
                                                                                                     nil))
                                                                                                   nil))
                                                                                                 nil))
                                                                                               nil))
                                                                                             nil))
                                                                                           nil)
                                                                                          ("2"
                                                                                           (ground)
                                                                                           (("1"
                                                                                             (expand
                                                                                              "mod")
                                                                                             (("1"
                                                                                               (replaces
                                                                                                -2)
                                                                                               (("1"
                                                                                                 (assert)
                                                                                                 (("1"
                                                                                                   (case
                                                                                                    "(1+jj)/N<1")
                                                                                                   (("1"
                                                                                                     (assert)
                                                                                                     nil
                                                                                                     nil)
                                                                                                    ("2"
                                                                                                     (cross-mult
                                                                                                      1)
                                                                                                     nil
                                                                                                     nil))
                                                                                                   nil))
                                                                                                 nil))
                                                                                               nil))
                                                                                             nil)
                                                                                            ("2"
                                                                                             (case
                                                                                              "NOT jj=N-1")
                                                                                             (("1"
                                                                                               (assert)
                                                                                               nil
                                                                                               nil)
                                                                                              ("2"
                                                                                               (replaces
                                                                                                -1)
                                                                                               (("2"
                                                                                                 (assert)
                                                                                                 (("2"
                                                                                                   (expand
                                                                                                    "mod")
                                                                                                   (("2"
                                                                                                     (assert)
                                                                                                     (("2"
                                                                                                       (lemma
                                                                                                        "floor_int")
                                                                                                       (("2"
                                                                                                         (rewrite
                                                                                                          -1)
                                                                                                         (("1"
                                                                                                           (assert)
                                                                                                           (("1"
                                                                                                             (replaces
                                                                                                              -2)
                                                                                                             (("1"
                                                                                                               (case
                                                                                                                "N/N=1")
                                                                                                               (("1"
                                                                                                                 (replaces
                                                                                                                  -1)
                                                                                                                 (("1"
                                                                                                                   (assert)
                                                                                                                   nil
                                                                                                                   nil))
                                                                                                                 nil)
                                                                                                                ("2"
                                                                                                                 (assert)
                                                                                                                 nil
                                                                                                                 nil))
                                                                                                               nil))
                                                                                                             nil))
                                                                                                           nil)
                                                                                                          ("2"
                                                                                                           (assert)
                                                                                                           (("2"
                                                                                                             (case
                                                                                                              "N/N=1")
                                                                                                             (("1"
                                                                                                               (replaces
                                                                                                                -1)
                                                                                                               (("1"
                                                                                                                 (assert)
                                                                                                                 nil
                                                                                                                 nil))
                                                                                                               nil)
                                                                                                              ("2"
                                                                                                               (assert)
                                                                                                               nil
                                                                                                               nil))
                                                                                                             nil))
                                                                                                           nil))
                                                                                                         nil))
                                                                                                       nil))
                                                                                                     nil))
                                                                                                   nil))
                                                                                                 nil))
                                                                                               nil))
                                                                                             nil))
                                                                                           nil))
                                                                                         nil))
                                                                                       nil))
                                                                                     nil))
                                                                                   nil))
                                                                                 nil)
                                                                                ("2"
                                                                                 (replaces
                                                                                  -1)
                                                                                 (("2"
                                                                                   (flatten)
                                                                                   (("2"
                                                                                     (case
                                                                                      "NOT jj=N-1")
                                                                                     (("1"
                                                                                       (assert)
                                                                                       nil
                                                                                       nil)
                                                                                      ("2"
                                                                                       (assert)
                                                                                       (("2"
                                                                                         (case
                                                                                          "NOT N = 1")
                                                                                         (("1"
                                                                                           (assert)
                                                                                           nil
                                                                                           nil)
                                                                                          ("2"
                                                                                           (replaces
                                                                                            -3)
                                                                                           (("2"
                                                                                             (case
                                                                                              "NOT acceptable_polygon_2D(N, p, BUFF)")
                                                                                             (("1"
                                                                                               (assert)
                                                                                               nil
                                                                                               nil)
                                                                                              ("2"
                                                                                               (expand
                                                                                                "acceptable_polygon_2D")
                                                                                               (("2"
                                                                                                 (propax)
                                                                                                 nil
                                                                                                 nil))
                                                                                               nil))
                                                                                             nil))
                                                                                           nil))
                                                                                         nil))
                                                                                       nil))
                                                                                     nil))
                                                                                   nil))
                                                                                 nil))
                                                                               nil)
                                                                              ("2"
                                                                               (lift-if)
                                                                               (("2"
                                                                                 (ground)
                                                                                 nil
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil)
                                                    ("2"
                                                     (inst-cp - "j")
                                                     (("2"
                                                       (assert)
                                                       (("2"
                                                         (split +)
                                                         (("1"
                                                           (lift-if)
                                                           (("1"
                                                             (ground)
                                                             nil
                                                             nil))
                                                           nil)
                                                          ("2"
                                                           (inst-cp
                                                            -
                                                            "ce(i)")
                                                           (("2"
                                                             (lift-if)
                                                             (("2"
                                                               (ground)
                                                               nil
                                                               nil))
                                                             nil))
                                                           nil)
                                                          ("3"
                                                           (reveal
                                                            "cele")
                                                           (("3"
                                                             (inst?)
                                                             (("3"
                                                               (assert)
                                                               nil
                                                               nil))
                                                             nil))
                                                           nil)
                                                          ("4"
                                                           (flatten)
                                                           (("4"
                                                             (assert)
                                                             (("4"
                                                               (expand
                                                                "F"
                                                                -)
                                                               (("4"
                                                                 (lift-if)
                                                                 (("4"
                                                                   (lift-if)
                                                                   (("4"
                                                                     (lift-if)
                                                                     (("4"
                                                                       (assert)
                                                                       (("4"
                                                                         (ground)
                                                                         nil
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil)
                                                    ("3"
                                                     (hide 2)
                                                     (("3"
                                                       (skosimp*)
                                                       (("3"
                                                         (lift-if)
                                                         (("3"
                                                           (ground)
                                                           nil
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil)
                                ("2"
                                 (hide 2)
                                 (("2"
                                   (induct "ii")
                                   (("1"
                                     (skeep)
                                     (("1"
                                       (assert)
                                       (("1"
                                         (case "ce(0)=0")
                                         (("1" (assert) nil nil)
                                          ("2"
                                           (hide-all-but 1)
                                           (("2"
                                             (expand "ce")
                                             (("2" (grind) nil nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2"
                                     (skolem 1 "k")
                                     (("2"
                                       (flatten)
                                       (("2"
                                         (skeep)
                                         (("2"
                                           (case "NOT jj=k+1")
                                           (("1"
                                             (inst - "jj")
                                             (("1"
                                               (assert)
                                               (("1"
                                                 (case
                                                  "F(ce(1+k))<=F(ce(k))")
                                                 (("1"
                                                   (assert)
                                                   nil
                                                   nil)
                                                  ("2"
                                                   (hide-all-but
                                                    (-2 1))
                                                   (("2"
                                                     (expand "ce")
                                                     (("2"
                                                       (expand
                                                        "closest_edge"
                                                        +
                                                        1)
                                                       (("2"
                                                         (lift-if)
                                                         (("2"
                                                           (lift-if)
                                                           (("2"
                                                             (assert)
                                                             (("2"
                                                               (lift-if)
                                                               (("2"
                                                                 (assert)
                                                                 (("2"
                                                                   (ground)
                                                                   (("1"
                                                                     (expand
                                                                      "F"
                                                                      +)
                                                                     (("1"
                                                                       (assert)
                                                                       nil
                                                                       nil))
                                                                     nil)
                                                                    ("2"
                                                                     (hide
                                                                      2)
                                                                     (("2"
                                                                       (reveal
                                                                        "cele")
                                                                       (("2"
                                                                         (inst
                                                                          -
                                                                          "k")
                                                                         (("2"
                                                                           (assert)
                                                                           nil
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil)
                                                                    ("3"
                                                                     (lift-if)
                                                                     (("3"
                                                                       (ground)
                                                                       (("1"
                                                                         (lift-if)
                                                                         (("1"
                                                                           (assert)
                                                                           (("1"
                                                                             (split)
                                                                             (("1"
                                                                               (flatten)
                                                                               (("1"
                                                                                 (assert)
                                                                                 (("1"
                                                                                   (expand
                                                                                    "F")
                                                                                   (("1"
                                                                                     (assert)
                                                                                     nil
                                                                                     nil))
                                                                                   nil))
                                                                                 nil))
                                                                               nil)
                                                                              ("2"
                                                                               (propax)
                                                                               nil
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil)
                                                                        ("2"
                                                                         (lift-if)
                                                                         (("2"
                                                                           (assert)
                                                                           (("2"
                                                                             (split)
                                                                             (("1"
                                                                               (flatten)
                                                                               (("1"
                                                                                 (expand
                                                                                  "F")
                                                                                 (("1"
                                                                                   (assert)
                                                                                   nil
                                                                                   nil))
                                                                                 nil))
                                                                               nil)
                                                                              ("2"
                                                                               (propax)
                                                                               nil
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil)
                                            ("2"
                                             (replace -1)
                                             (("2"
                                               (assert)
                                               (("2"
                                                 (hide -6)
                                                 (("2"
                                                   (replace -5 1)
                                                   (("2"
                                                     (assert)
                                                     (("2"
                                                       (lift-if)
                                                       (("2"
                                                         (ground)
                                                         nil
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil)
                              ("3" (hide 2)
                               (("3"
                                 (skosimp*)
                                 (("3" (ground) nil nil))
                                 nil))
                               nil)
                              ("4" (hide 2)
                               (("4"
                                 (skosimp*)
                                 (("4" (assert) nil nil))
                                 nil))
                               nil))
                             nil)
                            ("2" (hide 2)
                             (("2" (hide -) (("2" (grind) nil nil))
                               nil))
                             nil)
                            ("3" (hide 2)
                             (("3" (hide -) (("3" (grind) nil nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ((closest_edge def-decl "below(N)" resolution nil)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (polygon_2D type-eq-decl nil acceptable_polygon nil)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (below type-eq-decl nil naturalnumbers nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (< const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (>= const-decl "bool" reals nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (boolean nonempty-type-decl nil booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (<= const-decl "bool" reals nil)
               (pred type-eq-decl nil defined_types nil)
               (nat_induction formula-decl nil naturalnumbers nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (integer nonempty-type-from-decl nil integers nil)
               (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil
                      nil)
               (posint_times_posint_is_posint application-judgement
                "posint" integers nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (nonneg_floor_is_nat application-judgement "nat"
                floor_ceil nil)
               (mod_lt_nat formula-decl nil mod nil)
               (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
               (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
                    real_defs nil)
               (- const-decl "[numfield -> numfield]" number_fields
                  nil)
               (nonzero_integer nonempty-type-eq-decl nil integers nil)
               (/= const-decl "boolean" notequal nil)
               (nil application-judgement "below(m)" mod nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (TRUE const-decl "bool" booleans nil)
               (id const-decl "(bijective?[T, T])" identity nil)
               (bijective? const-decl "bool" functions nil)
               (IFF const-decl "[bool, bool -> bool]" booleans nil)
               (acceptable_polygon_2D_def formula-decl nil
                acceptable_polygon nil)
               (subrange type-eq-decl nil integers nil)
               (acceptable_polygon_2D const-decl "bool"
                acceptable_polygon nil)
               (near_poly_edge const-decl "bool" acceptable_polygon
                nil)
               (add_zero_right formula-decl nil vectors_2D vectors)
               (scal_0 formula-decl nil vectors_2D vectors)
               (scal_1 formula-decl nil vectors_2D vectors)
               (on_segment_2D? const-decl "bool" edge_proximity nil)
               (* const-decl "real" vectors_2D vectors)
               (sqv const-decl "nnreal" vectors_2D vectors)
               (sq const-decl "nonneg_real" sq reals)
               (posreal_times_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (real_times_real_is_real application-judgement "real"
                reals nil)
               (real_plus_real_is_real application-judgement "real"
                reals nil)
               (real_minus_real_is_real application-judgement "real"
                reals nil)
               (sq_norm formula-decl nil vectors_2D vectors)
               (sq_nz_pos application-judgement "posreal" sq reals)
               (sq_ge formula-decl nil sq reals)
               (near_edge_def formula-decl nil edge_proximity nil)
               (rat_minus_rat_is_rat application-judgement "rat"
                rationals nil)
               (posrat_times_posrat_is_posrat application-judgement
                "posrat" rationals nil)
               (floor_int formula-decl nil floor_ceil nil)
               (posrat_div_posrat_is_posrat application-judgement
                "posrat" rationals nil)
               (int_plus_int_is_int application-judgement "int"
                integers nil)
               (div_mult_pos_lt1 formula-decl nil real_props nil)
               (/ const-decl "[numfield, nznum -> numfield]"
                  number_fields nil)
               (nznum nonempty-type-eq-decl nil number_fields nil)
               (nice_polygon_2D const-decl "bool" polygon_contain nil)
               (IF const-decl "[boolean, T, T -> T]" if_def nil)
               (naturalnumber type-eq-decl nil naturalnumbers nil)
               (nnreal type-eq-decl nil real_types nil)
               (Vector type-eq-decl nil vectors_2D vectors)
               (norm const-decl "nnreal" vectors_2D vectors)
               (closest_point const-decl "Vect2" edge_proximity nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (- const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil))
              nil)
             (closest_edge_def-2 nil 3659353289
              ("" (skeep)
               (("" (name "ce" "closest_edge(N, p, BUFF, s)")
                 (("" (replace -1)
                   ((""
                     (name "F"
                           "LAMBDA (i:nat): IF i>=N THEN 0 ELSE (LET nexti = (IF i<N-1 THEN i+1 ELSE 0 ENDIF),ci=closest_point(p(i), p(nexti), s, BUFF),thisdist=norm(s-ci) IN thisdist) ENDIF")
                     (("1"
                       (case "NOT (ce = (LAMBDA (ii:below(N)): IF ii=0 THEN 0 ELSIF F(ii)<F(ce(ii-1)) THEN ii ELSE ce(ii-1) ENDIF))")
                       (("1" (hide 2)
                         (("1" (hide -1)
                           (("1" (decompose-equality +)
                             (("1" (lift-if)
                               (("1"
                                 (ground)
                                 (("1"
                                   (replaces -1)
                                   (("1"
                                     (hide -)
                                     (("1"
                                       (expand "ce")
                                       (("1" (grind) nil nil))
                                       nil))
                                     nil))
                                   nil)
                                  ("2"
                                   (hide -2)
                                   (("2"
                                     (expand "ce")
                                     (("2"
                                       (expand "closest_edge" +)
                                       (("2"
                                         (invoke (case "%1") (! 1 1 1))
                                         (("1" (replaces -1) nil nil)
                                          ("2"
                                           (hide 2)
                                           (("2"
                                             (case
                                              "FORALL (kz:below(N)): (IF kz < N - 1 THEN p(kz+1) ELSE p(0) ENDIF)=p(mod(kz+1,N))")
                                             (("1"
                                               (rewrite -1)
                                               (("1"
                                                 (rewrite -1)
                                                 (("1"
                                                   (name
                                                    "J"
                                                    "closest_edge(N, p, BUFF, s)(x!1 - 1)")
                                                   (("1"
                                                     (replaces -1)
                                                     (("1"
                                                       (expand "F")
                                                       (("1"
                                                         (assert)
                                                         (("1"
                                                           (rewrite -1)
                                                           (("1"
                                                             (rewrite
                                                              -1)
                                                             nil
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil)
                                              ("2"
                                               (hide-all-but 1)
                                               (("2"
                                                 (skeep*)
                                                 (("2"
                                                   (lift-if)
                                                   (("2"
                                                     (ground)
                                                     (("1"
                                                       (lemma
                                                        "mod_lt_nat")
                                                       (("1"
                                                         (inst?)
                                                         (("1"
                                                           (assert)
                                                           nil
                                                           nil))
                                                         nil))
                                                       nil)
                                                      ("2"
                                                       (case
                                                        "NOT 1+kz=N")
                                                       (("1"
                                                         (assert)
                                                         nil
                                                         nil)
                                                        ("2"
                                                         (hide 1)
                                                         (("2"
                                                           (replaces
                                                            -1)
                                                           (("2"
                                                             (expand
                                                              "mod")
                                                             (("2"
                                                               (case
                                                                "floor(1)=1")
                                                               (("1"
                                                                 (replaces
                                                                  -1)
                                                                 (("1"
                                                                   (assert)
                                                                   nil
                                                                   nil))
                                                                 nil)
                                                                ("2"
                                                                 (assert)
                                                                 nil
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil)
                                              ("3"
                                               (hide 2)
                                               (("3"
                                                 (skosimp*)
                                                 (("3"
                                                   (assert)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil)
                                          ("3" (ground) nil nil)
                                          ("4" (ground) nil nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil)
                                  ("3"
                                   (hide -1)
                                   (("3"
                                     (expand "ce")
                                     (("3"
                                       (expand "closest_edge" 2 1)
                                       (("3"
                                         (case
                                          "FORALL (kz:below(N)): (IF kz < N - 1 THEN p(kz+1) ELSE p(0) ENDIF)=p(mod(kz+1,N))")
                                         (("1"
                                           (name
                                            "J"
                                            "closest_edge(N, p, BUFF, s)(x!1 - 1)")
                                           (("1"
                                             (replace -1)
                                             (("1"
                                               (rewrite -2)
                                               (("1"
                                                 (rewrite -2)
                                                 (("1"
                                                   (lift-if)
                                                   (("1"
                                                     (assert)
                                                     (("1"
                                                       (ground)
                                                       (("1"
                                                         (expand "F" +)
                                                         (("1"
                                                           (rewrite -3)
                                                           (("1"
                                                             (rewrite
                                                              -3)
                                                             nil
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil)
                                          ("2"
                                           (hide 3)
                                           (("2"
                                             (hide-all-but 1)
                                             (("2"
                                               (skeep)
                                               (("2"
                                                 (lift-if)
                                                 (("2"
                                                   (ground)
                                                   (("1"
                                                     (lemma
                                                      "mod_lt_nat")
                                                     (("1"
                                                       (inst?)
                                                       (("1"
                                                         (assert)
                                                         nil
                                                         nil))
                                                       nil))
                                                     nil)
                                                    ("2"
                                                     (case
                                                      "NOT 1+kz=N")
                                                     (("1"
                                                       (assert)
                                                       nil
                                                       nil)
                                                      ("2"
                                                       (replaces -1)
                                                       (("2"
                                                         (expand "mod")
                                                         (("2"
                                                           (case
                                                            "floor(1)=1")
                                                           (("1"
                                                             (replaces
                                                              -1)
                                                             (("1"
                                                               (assert)
                                                               nil
                                                               nil))
                                                             nil)
                                                            ("2"
                                                             (assert)
                                                             nil
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil)
                                          ("3"
                                           (hide 3)
                                           (("3"
                                             (skosimp*)
                                             (("3" (assert) nil nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil)
                              ("2" (skosimp*) (("2" (assert) nil nil))
                               nil)
                              ("3" (skosimp*) (("3" (assert) nil nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2"
                         (case "FORALL (ii,jj:nat): ii<N  AND jj<=ii IMPLIES F(jj)>=F(ii)")
                         (("1" (hide (-2 -3))
                           (("1" (inst - "i" "j")
                             (("1" (skoletin +)
                               (("1"
                                 (skoletin +)
                                 (("1"
                                   (skoletin +)
                                   (("1"
                                     (replaces -2)
                                     (("1"
                                       (skoletin +)
                                       (("1"
                                         (skoletin +)
                                         (("1"
                                           (assert)
                                           (("1"
                                             (case
                                              "NOT FORALL (jj:below(N)): LET nextjj = (IF jj<N-1 THEN 1+jj ELSE 0 ENDIF) IN norm(p(jj)-p(nextjj))>BUFF")
                                             (("1"
                                               (hide-all-but (-7 1))
                                               (("1"
                                                 (skeep*)
                                                 (("1"
                                                   (skoletin)
                                                   (("1"
                                                     (expand
                                                      "nice_polygon_2D")
                                                     (("1"
                                                       (flatten)
                                                       (("1"
                                                         (hide (-3 -4))
                                                         (("1"
                                                           (expand
                                                            "acceptable_polygon_2D")
                                                           (("1"
                                                             (flatten)
                                                             (("1"
                                                               (inst
                                                                -
                                                                "jj"
                                                                "nextjj")
                                                               (("1"
                                                                 (split
                                                                  -)
                                                                 (("1"
                                                                   (lift-if)
                                                                   (("1"
                                                                     (ground)
                                                                     nil
                                                                     nil))
                                                                   nil)
                                                                  ("2"
                                                                   (flatten)
                                                                   (("2"
                                                                     (split
                                                                      -)
                                                                     (("1"
                                                                       (propax)
                                                                       nil
                                                                       nil)
                                                                      ("2"
                                                                       (flatten)
                                                                       (("2"
                                                                         (split
                                                                          -)
                                                                         (("1"
                                                                           (propax)
                                                                           nil
                                                                           nil)
                                                                          ("2"
                                                                           (flatten)
                                                                           (("2"
                                                                             (hide
                                                                              -1)
                                                                             (("2"
                                                                               (assert)
                                                                               (("2"
                                                                                 (invoke
                                                                                  (case
                                                                                   "NOT %1")
                                                                                  (!
                                                                                   1
                                                                                   1))
                                                                                 (("1"
                                                                                   (hide
                                                                                    2)
                                                                                   (("1"
                                                                                     (replaces
                                                                                      -1
                                                                                      1)
                                                                                     (("1"
                                                                                       (lift-if)
                                                                                       (("1"
                                                                                         (ground)
                                                                                         (("1"
                                                                                           (lemma
                                                                                            "mod_lt_nat")
                                                                                           (("1"
                                                                                             (inst?)
                                                                                             (("1"
                                                                                               (assert)
                                                                                               nil
                                                                                               nil))
                                                                                             nil))
                                                                                           nil)
                                                                                          ("2"
                                                                                           (expand
                                                                                            "mod")
                                                                                           (("2"
                                                                                             (case
                                                                                              "floor(1)=1")
                                                                                             (("1"
                                                                                               (assert)
                                                                                               (("1"
                                                                                                 (case
                                                                                                  "NOT 1+jj=N")
                                                                                                 (("1"
                                                                                                   (assert)
                                                                                                   nil
                                                                                                   nil)
                                                                                                  ("2"
                                                                                                   (replaces
                                                                                                    -1)
                                                                                                   (("2"
                                                                                                     (replaces
                                                                                                      -1)
                                                                                                     (("2"
                                                                                                       (assert)
                                                                                                       nil
                                                                                                       nil))
                                                                                                     nil))
                                                                                                   nil))
                                                                                                 nil))
                                                                                               nil)
                                                                                              ("2"
                                                                                               (assert)
                                                                                               nil
                                                                                               nil))
                                                                                             nil))
                                                                                           nil))
                                                                                         nil))
                                                                                       nil))
                                                                                     nil))
                                                                                   nil)
                                                                                  ("2"
                                                                                   (replace
                                                                                    -1
                                                                                    1
                                                                                    :dir
                                                                                    rl)
                                                                                   (("2"
                                                                                     (flatten)
                                                                                     (("2"
                                                                                       (assert)
                                                                                       (("2"
                                                                                         (hide
                                                                                          1)
                                                                                         (("2"
                                                                                           (expand
                                                                                            "near_poly_edge")
                                                                                           (("2"
                                                                                             (name
                                                                                              "Z"
                                                                                              "IF nextjj < N - 1 THEN p(1 + nextjj) ELSE p(0) ENDIF")
                                                                                             (("1"
                                                                                               (replaces
                                                                                                -1)
                                                                                               (("1"
                                                                                                 (lemma
                                                                                                  "near_edge_def")
                                                                                                 (("1"
                                                                                                   (inst?)
                                                                                                   (("1"
                                                                                                     (assert)
                                                                                                     (("1"
                                                                                                       (inst
                                                                                                        +
                                                                                                        "p(nextjj)")
                                                                                                       (("1"
                                                                                                         (split
                                                                                                          +)
                                                                                                         (("1"
                                                                                                           (expand
                                                                                                            "on_segment_2D?")
                                                                                                           (("1"
                                                                                                             (inst
                                                                                                              +
                                                                                                              "0")
                                                                                                             (("1"
                                                                                                               (assert)
                                                                                                               nil
                                                                                                               nil))
                                                                                                             nil))
                                                                                                           nil)
                                                                                                          ("2"
                                                                                                           (rewrite
                                                                                                            "sq_gt"
                                                                                                            +
                                                                                                            :dir
                                                                                                            rl)
                                                                                                           (("2"
                                                                                                             (rewrite
                                                                                                              "sq_norm")
                                                                                                             (("2"
                                                                                                               (case
                                                                                                                "FORALL (aa,bb:Vect2):sqv(aa-bb)=sqv(bb-aa)")
                                                                                                               (("1"
                                                                                                                 (rewrite
                                                                                                                  -1
                                                                                                                  1)
                                                                                                                 (("1"
                                                                                                                   (rewrite
                                                                                                                    "sq_times")
                                                                                                                   (("1"
                                                                                                                     (assert)
                                                                                                                     (("1"
                                                                                                                       (expand
                                                                                                                        "sq"
                                                                                                                        1
                                                                                                                        1)
                                                                                                                       (("1"
                                                                                                                         (assert)
                                                                                                                         nil
                                                                                                                         nil))
                                                                                                                       nil))
                                                                                                                     nil))
                                                                                                                   nil))
                                                                                                                 nil)
                                                                                                                ("2"
                                                                                                                 (hide-all-but
                                                                                                                  1)
                                                                                                                 (("2"
                                                                                                                   (grind)
                                                                                                                   nil
                                                                                                                   nil))
                                                                                                                 nil))
                                                                                                               nil))
                                                                                                             nil))
                                                                                                           nil))
                                                                                                         nil))
                                                                                                       nil))
                                                                                                     nil))
                                                                                                   nil))
                                                                                                 nil))
                                                                                               nil)
                                                                                              ("2"
                                                                                               (hide
                                                                                                2)
                                                                                               (("2"
                                                                                                 (ground)
                                                                                                 nil
                                                                                                 nil))
                                                                                               nil))
                                                                                             nil))
                                                                                           nil))
                                                                                         nil))
                                                                                       nil))
                                                                                     nil))
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("2"
                                                                 (grind)
                                                                 nil
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil)
                                              ("2"
                                               (inst-cp - "j")
                                               (("2"
                                                 (assert)
                                                 (("2"
                                                   (split +)
                                                   (("1"
                                                     (lift-if)
                                                     (("1"
                                                       (ground)
                                                       nil
                                                       nil))
                                                     nil)
                                                    ("2"
                                                     (inst-cp
                                                      -
                                                      "ce(i)")
                                                     (("2"
                                                       (lift-if)
                                                       (("2"
                                                         (ground)
                                                         nil
                                                         nil))
                                                       nil))
                                                     nil)
                                                    ("3"
                                                     (case
                                                      "FORALL (kz:nat): kz<N IMPLIES ce(kz)<=kz")
                                                     (("1"
                                                       (inst?)
                                                       (("1"
                                                         (assert)
                                                         nil
                                                         nil))
                                                       nil)
                                                      ("2"
                                                       (hide-all-but 1)
                                                       (("2"
                                                         (induct "kz")
                                                         (("1"
                                                           (expand
                                                            "ce")
                                                           (("1"
                                                             (grind)
                                                             nil
                                                             nil))
                                                           nil)
                                                          ("2"
                                                           (skosimp*)
                                                           (("2"
                                                             (assert)
                                                             (("2"
                                                               (expand
                                                                "ce")
                                                               (("2"
                                                                 (expand
                                                                  "closest_edge"
                                                                  +)
                                                                 (("2"
                                                                   (lift-if)
                                                                   (("2"
                                                                     (ground)
                                                                     nil
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil)
                                                    ("4"
                                                     (flatten)
                                                     (("4"
                                                       (assert)
                                                       (("4"
                                                         (expand "F" -)
                                                         (("4"
                                                           (lift-if)
                                                           (("4"
                                                             (lift-if)
                                                             (("4"
                                                               (lift-if)
                                                               (("4"
                                                                 (assert)
                                                                 (("4"
                                                                   (ground)
                                                                   (("1"
                                                                     (postpone)
                                                                     nil
                                                                     nil)
                                                                    ("2"
                                                                     (postpone)
                                                                     nil
                                                                     nil)
                                                                    ("3"
                                                                     (postpone)
                                                                     nil
                                                                     nil)
                                                                    ("4"
                                                                     (postpone)
                                                                     nil
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil)
                                              ("3" (postpone) nil nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("2" (postpone) nil nil))
                         nil)
                        ("3" (postpone) nil nil)
                        ("4" (postpone) nil nil))
                       nil)
                      ("2" (postpone) nil nil)
                      ("3" (postpone) nil nil))
                     nil))
                   nil))
                 nil))
               nil)
              nil nil)
             (closest_edge_def-1 nil 3659288543
              ("" (skeep)
               (("" (name "ce" "closest_edge(N, p, BUFF, s)")
                 (("" (replace -1)
                   ((""
                     (name "F"
                           "LAMBDA (i:nat): IF i>=N THEN 0 ELSE (LET nexti = (IF i<N-1 THEN i+1 ELSE 0 ENDIF),ci=closest_point(p(i), p(nexti), s, BUFF),thisdist=norm(s-ci) IN thisdist) ENDIF")
                     (("1"
                       (case "NOT (ce = (LAMBDA (ii:below(N)): IF ii=0 THEN 0 ELSIF F(ii)<F(ce(ii-1)) THEN ii ELSE ce(ii-1) ENDIF))")
                       (("1" (hide 2)
                         (("1" (hide -1)
                           (("1" (decompose-equality +)
                             (("1" (lift-if)
                               (("1"
                                 (ground)
                                 (("1"
                                   (replaces -1)
                                   (("1"
                                     (hide -)
                                     (("1"
                                       (expand "ce")
                                       (("1" (grind) nil nil))
                                       nil))
                                     nil))
                                   nil)
                                  ("2"
                                   (hide -2)
                                   (("2"
                                     (expand "ce")
                                     (("2"
                                       (expand "closest_edge" +)
                                       (("2"
                                         (invoke (case "%1") (! 1 1 1))
                                         (("1" (replaces -1) nil nil)
                                          ("2"
                                           (hide 2)
                                           (("2"
                                             (case
                                              "FORALL (kz:below(N)): (IF kz < N - 1 THEN p(kz+1) ELSE p(0) ENDIF)=p(mod(kz+1,N))")
                                             (("1"
                                               (rewrite -1)
                                               (("1"
                                                 (rewrite -1)
                                                 (("1"
                                                   (name
                                                    "J"
                                                    "closest_edge(N, p, BUFF, s)(x!1 - 1)")
                                                   (("1"
                                                     (replaces -1)
                                                     (("1"
                                                       (expand "F")
                                                       (("1"
                                                         (assert)
                                                         (("1"
                                                           (rewrite -1)
                                                           (("1"
                                                             (rewrite
                                                              -1)
                                                             nil
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil)
                                              ("2"
                                               (hide-all-but 1)
                                               (("2"
                                                 (skeep*)
                                                 (("2"
                                                   (lift-if)
                                                   (("2"
                                                     (ground)
                                                     (("1"
                                                       (lemma
                                                        "mod_lt_nat")
                                                       (("1"
                                                         (inst?)
                                                         (("1"
                                                           (assert)
                                                           nil
                                                           nil))
                                                         nil))
                                                       nil)
                                                      ("2"
                                                       (case
                                                        "NOT 1+kz=N")
                                                       (("1"
                                                         (assert)
                                                         nil
                                                         nil)
                                                        ("2"
                                                         (hide 1)
                                                         (("2"
                                                           (replaces
                                                            -1)
                                                           (("2"
                                                             (expand
                                                              "mod")
                                                             (("2"
                                                               (case
                                                                "floor(1)=1")
                                                               (("1"
                                                                 (replaces
                                                                  -1)
                                                                 (("1"
                                                                   (assert)
                                                                   nil
                                                                   nil))
                                                                 nil)
                                                                ("2"
                                                                 (assert)
                                                                 nil
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil)
                                              ("3"
                                               (hide 2)
                                               (("3"
                                                 (skosimp*)
                                                 (("3"
                                                   (assert)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil)
                                          ("3" (ground) nil nil)
                                          ("4" (ground) nil nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil)
                                  ("3"
                                   (hide -1)
                                   (("3"
                                     (expand "ce")
                                     (("3"
                                       (expand "closest_edge" 2 1)
                                       (("3"
                                         (case
                                          "FORALL (kz:below(N)): (IF kz < N - 1 THEN p(kz+1) ELSE p(0) ENDIF)=p(mod(kz+1,N))")
                                         (("1"
                                           (name
                                            "J"
                                            "closest_edge(N, p, BUFF, s)(x!1 - 1)")
                                           (("1"
                                             (replace -1)
                                             (("1"
                                               (rewrite -2)
                                               (("1"
                                                 (rewrite -2)
                                                 (("1"
                                                   (lift-if)
                                                   (("1"
                                                     (assert)
                                                     (("1"
                                                       (ground)
                                                       (("1"
                                                         (expand "F" +)
                                                         (("1"
                                                           (rewrite -3)
                                                           (("1"
                                                             (rewrite
                                                              -3)
                                                             nil
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil)
                                          ("2"
                                           (hide 3)
                                           (("2"
                                             (hide-all-but 1)
                                             (("2"
                                               (skeep)
                                               (("2"
                                                 (lift-if)
                                                 (("2"
                                                   (ground)
                                                   (("1"
                                                     (lemma
                                                      "mod_lt_nat")
                                                     (("1"
                                                       (inst?)
                                                       (("1"
                                                         (assert)
                                                         nil
                                                         nil))
                                                       nil))
                                                     nil)
                                                    ("2"
                                                     (case
                                                      "NOT 1+kz=N")
                                                     (("1"
                                                       (assert)
                                                       nil
                                                       nil)
                                                      ("2"
                                                       (replaces -1)
                                                       (("2"
                                                         (expand "mod")
                                                         (("2"
                                                           (case
                                                            "floor(1)=1")
                                                           (("1"
                                                             (replaces
                                                              -1)
                                                             (("1"
                                                               (assert)
                                                               nil
                                                               nil))
                                                             nil)
                                                            ("2"
                                                             (assert)
                                                             nil
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil)
                                          ("3"
                                           (hide 3)
                                           (("3"
                                             (skosimp*)
                                             (("3" (assert) nil nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil)
                              ("2" (skosimp*) (("2" (assert) nil nil))
                               nil)
                              ("3" (skosimp*) (("3" (assert) nil nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2"
                         (case "FORALL (ii,jj:nat): ii<N  AND jj<=ii IMPLIES F(jj)>=F(ii)")
                         (("1" (hide (-2 -3))
                           (("1" (inst - "i" "j")
                             (("1" (skoletin +)
                               (("1"
                                 (skoletin +)
                                 (("1"
                                   (skoletin +)
                                   (("1"
                                     (replaces -2)
                                     (("1"
                                       (skoletin +)
                                       (("1"
                                         (skoletin +)
                                         (("1"
                                           (assert)
                                           (("1"
                                             (case
                                              "NOT FORALL (jj:below(N)): LET nextjj = (IF jj<N-1 THEN 1+j ELSE 0 ENDIF) IN norm(p(jj)-p(nextjj))>BUFF")
                                             (("1"
                                               (hide-all-but (-7 1))
                                               (("1"
                                                 (skeep*)
                                                 (("1"
                                                   (skoletin)
                                                   (("1"
                                                     (expand
                                                      "nice_polygon_2D")
                                                     (("1"
                                                       (flatten)
                                                       (("1"
                                                         (hide (-3 -4))
                                                         (("1"
                                                           (expand
                                                            "acceptable_polygon_2D")
                                                           (("1"
                                                             (flatten)
                                                             (("1"
                                                               (inst
                                                                -
                                                                "jj"
                                                                "nextjj")
                                                               (("1"
                                                                 (split
                                                                  -)
                                                                 (("1"
                                                                   (lift-if)
                                                                   (("1"
                                                                     (postpone)
                                                                     nil
                                                                     nil))
                                                                   nil)
                                                                  ("2"
                                                                   (postpone)
                                                                   nil
                                                                   nil))
                                                                 nil)
                                                                ("2"
                                                                 (postpone)
                                                                 nil
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil)
                                              ("2" (postpone) nil nil)
                                              ("3" (postpone) nil nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("2" (postpone) nil nil))
                         nil)
                        ("3" (postpone) nil nil)
                        ("4" (postpone) nil nil))
                       nil)
                      ("2" (postpone) nil nil)
                      ("3" (postpone) nil nil))
                     nil))
                   nil))
                 nil))
               nil)
              nil shostak))
            (nice_polygon_points_distinct 0
             (nice_polygon_points_distinct-1 nil 3659360661
              ("" (skeep*)
               (("" (expand "nice_polygon_2D")
                 (("" (expand "acceptable_polygon_2D")
                   (("" (flatten)
                     (("" (hide (-3 -4))
                       (("" (case "i<=j")
                         (("1" (inst - "i" "j")
                           (("1" (assert)
                             (("1" (split -)
                               (("1" (propax) nil nil)
                                ("2"
                                 (flatten)
                                 (("2"
                                   (hide -1)
                                   (("2"
                                     (rewrite "sub_eq_zero")
                                     nil
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("2" (inst - "j" "i")
                           (("1" (assert)
                             (("1" (split -)
                               (("1" (propax) nil nil)
                                ("2"
                                 (flatten)
                                 (("2"
                                   (hide -1)
                                   (("2"
                                     (rewrite "sub_eq_zero")
                                     (("2" (assert) nil nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil)
                            ("2" (assert) nil nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ((nice_polygon_2D const-decl "bool" polygon_contain nil)
               (below type-eq-decl nil naturalnumbers nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (< const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (<= const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (polygon_2D type-eq-decl nil acceptable_polygon nil)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (Vector type-eq-decl nil vectors_2D vectors)
               (sub_eq_zero formula-decl nil vectors_2D vectors)
               (subrange type-eq-decl nil integers nil)
               (- const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (acceptable_polygon_2D const-decl "bool"
                acceptable_polygon nil)
               (nil application-judgement "below(m)" mod nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              shostak))
            (recovery_test_point_TCC1 0
             (recovery_test_point_TCC1-1 nil 3659373233
              ("" (subtype-tcc) nil nil) nil nil
              (recovery_test_point subtype
               "(number_fields.-)(resolution.N, 1)"
               "naturalnumbers.below(resolution.N)")))
            (recovery_test_point_TCC2 0
             (recovery_test_point_TCC2-1 nil 3659373233
              ("" (subtype-tcc) nil nil)
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (< const-decl "bool" reals nil)
               (below type-eq-decl nil naturalnumbers nil)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (polygon_2D type-eq-decl nil acceptable_polygon nil)
               (modifiable_to_size const-decl "bool" resolution nil)
               (/= const-decl "boolean" notequal nil)
               (nzint nonempty-type-eq-decl nil integers nil)
               (OR const-decl "[bool, bool -> bool]" booleans nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (- const-decl "[numfield -> numfield]" number_fields
                  nil)
               (Sign type-eq-decl nil sign reals)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (int_plus_int_is_int application-judgement "int"
                integers nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (real_minus_real_is_real application-judgement "real"
                reals nil)
               (real_times_real_is_real application-judgement "real"
                reals nil)
               (real_plus_real_is_real application-judgement "real"
                reals nil)
               (minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_div_nzreal_is_real application-judgement "real"
                reals nil)
               (posreal_times_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (nil application-judgement "below(m)" mod nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (nonneg_floor_is_nat application-judgement "nat"
                floor_ceil nil)
               (nnrat_div_posrat_is_nnrat application-judgement
                "nonneg_rat" rationals nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (rat_div_nzrat_is_rat application-judgement "rat"
                rationals nil)
               (posreal_plus_nnreal_is_posreal application-judgement
                "posreal" real_types nil)
               (nice_polygon_2D const-decl "bool" polygon_contain nil)
               (definitely_outside const-decl "bool" polygon_contain
                nil)
               (winding_number const-decl
                "{ii: int | ii = winding_number_rec(N, p, s, N - 1) / 4}"
                polygon_contain nil)
               (definitely_outside_prelim const-decl "bool"
                polygon_contain nil)
               (test_point_below const-decl "Vect2" acceptable_polygon
                nil)
               (counterclockwise_edges const-decl "bool"
                acceptable_polygon nil)
               (det const-decl "real" det_2D vectors)
               (acceptable_polygon_2D const-decl "bool"
                acceptable_polygon nil)
               (norm const-decl "nnreal" vectors_2D vectors)
               (sqv const-decl "nnreal" vectors_2D vectors)
               (* const-decl "real" vectors_2D vectors)
               (near_poly_edge const-decl "bool" acceptable_polygon
                nil)
               (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
               (naturalnumber type-eq-decl nil naturalnumbers nil))
              nil
              (recovery_test_point subtype "resolution.nexti"
               "naturalnumbers.below(resolution.N)")))
            (recovery_test_point_TCC3 0
             (recovery_test_point_TCC3-1 nil 3659373233
              ("" (skeep*)
               ((""
                 (case "FORALL (vv:Vect2): perpR(vv)=zero IMPLIES vv=zero")
                 (("1" (replaces -5)
                   (("1" (inst - "p(nexti)-p(i)")
                     (("1" (assert)
                       (("1" (rewrite "sub_eq_zero")
                         (("1" (typepred "p")
                           (("1" (expand "modifiable_to_size")
                             (("1" (flatten)
                               (("1"
                                 (hide -2)
                                 (("1"
                                   (expand "nice_polygon_2D")
                                   (("1"
                                     (expand "acceptable_polygon_2D")
                                     (("1"
                                       (flatten)
                                       (("1"
                                         (case "i<=nexti")
                                         (("1"
                                           (inst - "i")
                                           (("1"
                                             (inst - "nexti")
                                             (("1"
                                               (assert)
                                               (("1"
                                                 (lift-if)
                                                 (("1"
                                                   (ground)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil)
                                              ("2"
                                               (lift-if)
                                               (("2" (ground) nil nil))
                                               nil))
                                             nil))
                                           nil)
                                          ("2"
                                           (inst - "nexti")
                                           (("1"
                                             (inst - "i")
                                             (("1" (assert) nil nil)
                                              ("2"
                                               (lift-if)
                                               (("2" (ground) nil nil))
                                               nil))
                                             nil)
                                            ("2"
                                             (lift-if)
                                             (("2" (ground) nil nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil)
                  ("2" (hide -)
                   (("2" (skeep*)
                     (("2" (case "vv+zero = -(perpR(perpR(vv)))")
                       (("1" (assert)
                         (("1" (replaces -1 +)
                           (("1" (replaces -1) (("1" (assert) nil nil))
                             nil))
                           nil))
                         nil)
                        ("2" (hide-all-but 1) (("2" (grind) nil nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ((zero const-decl "Vector" vectors_2D vectors)
               (Vector type-eq-decl nil vectors_2D vectors)
               (perpR const-decl "Vect2" perpendicular_2D vectors)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (real nonempty-type-from-decl nil reals nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (< const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (below type-eq-decl nil naturalnumbers nil)
               (polygon_2D type-eq-decl nil acceptable_polygon nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (modifiable_to_size const-decl "bool" resolution nil)
               (naturalnumber type-eq-decl nil naturalnumbers nil)
               (sub_eq_zero formula-decl nil vectors_2D vectors)
               (posreal_times_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (nil application-judgement "below(m)" mod nil)
               (acceptable_polygon_2D const-decl "bool"
                acceptable_polygon nil)
               (<= const-decl "bool" reals nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (- const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (subrange type-eq-decl nil integers nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (nice_polygon_2D const-decl "bool" polygon_contain nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_plus_real_is_real application-judgement "real"
                reals nil)
               (minus_real_is_real application-judgement "real" reals
                nil)
               (comp_zero_y formula-decl nil vectors_2D vectors)
               (comp_zero_x formula-decl nil vectors_2D vectors)
               (add_zero_right formula-decl nil vectors_2D vectors)
               (neg_zero formula-decl nil vectors_2D vectors)
               (perpR_eq_zero formula-decl nil perpendicular_2D
                vectors)
               (+ const-decl "Vector" vectors_2D vectors)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (recovery_test_point subtype "resolution.dirvect"
               "Nz_vector")))
            (recovery_point_TCC1 0
             (recovery_point_TCC1-1 nil 3659373233
              ("" (skeep*)
               (("" (typepred "p")
                 (("" (hide (1 2 3 4))
                   (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
                 nil))
               nil)
              ((modifiable_to_size const-decl "bool" resolution nil)
               (polygon_2D type-eq-decl nil acceptable_polygon nil)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (below type-eq-decl nil naturalnumbers nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (< const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (> const-decl "bool" reals nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (>= const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (recovery_point subtype "resolution.neari"
               "naturalnumbers.below(resolution.N)")))
            (recovery_point_TCC2 0
             (recovery_point_TCC2-1 nil 3659373233
              ("" (skeep*) (("" (lift-if) (("" (ground) nil nil)) nil))
               nil)
              ((real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (recovery_point subtype "resolution.nearprevi"
               "naturalnumbers.below(resolution.N)")))
            (recovery_point_TCC3 0
             (recovery_point_TCC3-1 nil 3659373233
              ("" (skeep*) (("" (lift-if) (("" (ground) nil nil)) nil))
               nil)
              ((minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (recovery_point subtype "resolution.nearnexti"
               "naturalnumbers.below(resolution.N)")))
            (recovery_point_TCC4 0
             (recovery_point_TCC4-1 nil 3659373233
              ("" (skeep*)
               (("" (lemma "vectors_2D.sqv_eq_0")
                 (("" (inst - "pv") (("" (assert) nil nil)) nil)) nil))
               nil)
              ((sqv_eq_0 formula-decl nil vectors_2D vectors)
               (proj_vect_nonzero application-judgement "Nz_vect2"
                resolution nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real nonempty-type-from-decl nil reals nil)
               (Vector type-eq-decl nil vectors_2D vectors)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (recovery_point subtype "resolution.pv" "Nz_vector")))
            (recovery_point_TCC5 0
             (recovery_point_TCC5-1 nil 3659373233
              ("" (skeep*)
               (("" (hide +)
                 (("" (typepred "p")
                   (("" (expand "modifiable_to_size")
                     (("" (flatten)
                       (("" (hide -2)
                         (("" (expand "nice_polygon_2D")
                           (("" (flatten)
                             (("" (hide (-2 -3))
                               ((""
                                 (lemma "acceptable_polygon_2D_def")
                                 ((""
                                   (inst?)
                                   ((""
                                     (assert)
                                     ((""
                                       (inst - "nearprevi" "neari")
                                       (("1"
                                         (split -)
                                         (("1"
                                           (flatten)
                                           (("1"
                                             (hide (-2 -3))
                                             (("1"
                                               (assert)
                                               (("1"
                                                 (split -)
                                                 (("1"
                                                   (flatten)
                                                   (("1"
                                                     (case
                                                      "FORALL (vv:Vect2): perpR(vv)=zero IMPLIES vv=zero")
                                                     (("1"
                                                       (inst
                                                        -
                                                        "p(neari)-p(nearprevi)")
                                                       (("1"
                                                         (assert)
                                                         (("1"
                                                           (lemma
                                                            "sub_eq_zero")
                                                           (("1"
                                                             (inst?)
                                                             (("1"
                                                               (assert)
                                                               nil
                                                               nil)
                                                              ("2"
                                                               (lift-if)
                                                               (("2"
                                                                 (ground)
                                                                 nil
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil)
                                                        ("2"
                                                         (lift-if)
                                                         (("2"
                                                           (ground)
                                                           nil
                                                           nil))
                                                         nil))
                                                       nil)
                                                      ("2"
                                                       (hide-all-but 1)
                                                       (("2"
                                                         (skeep*)
                                                         (("2"
                                                           (case
                                                            "vv+zero = -(perpR(perpR(vv)))")
                                                           (("1"
                                                             (assert)
                                                             (("1"
                                                               (replaces
                                                                -1
                                                                +)
                                                               (("1"
                                                                 (replaces
                                                                  -1)
                                                                 (("1"
                                                                   (assert)
                                                                   nil
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil)
                                                            ("2"
                                                             (hide-all-but
                                                              1)
                                                             (("2"
                                                               (grind)
                                                               nil
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil)
                                                  ("2"
                                                   (replaces -7 1)
                                                   (("2"
                                                     (lift-if 1)
                                                     (("2"
                                                       (split 1)
                                                       (("1"
                                                         (flatten)
                                                         (("1"
                                                           (assert)
                                                           (("1"
                                                             (expand
                                                              "mod")
                                                             (("1"
                                                               (case
                                                                "neari/N<1")
                                                               (("1"
                                                                 (assert)
                                                                 nil
                                                                 nil)
                                                                ("2"
                                                                 (cross-mult
                                                                  1)
                                                                 (("2"
                                                                   (assert)
                                                                   (("2"
                                                                     (lift-if)
                                                                     (("2"
                                                                       (ground)
                                                                       nil
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil)
                                                        ("2"
                                                         (flatten)
                                                         (("2"
                                                           (assert)
                                                           (("2"
                                                             (expand
                                                              "mod"
                                                              +)
                                                             (("2"
                                                               (lemma
                                                                "floor_int")
                                                               (("2"
                                                                 (inst
                                                                  -
                                                                  "1")
                                                                 (("2"
                                                                   (replaces
                                                                    -1)
                                                                   (("2"
                                                                     (assert)
                                                                     nil
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil)
                                          ("2"
                                           (lift-if)
                                           (("2" (ground) nil nil))
                                           nil))
                                         nil)
                                        ("2"
                                         (lift-if)
                                         (("2" (ground) nil nil))
                                         nil)
                                        ("3"
                                         (lift-if)
                                         (("3" (ground) nil nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ((posreal_times_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (acceptable_polygon_2D_def formula-decl nil
                acceptable_polygon nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (proj_vect_nonzero application-judgement "Nz_vect2"
                resolution nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (perpR const-decl "Vect2" perpendicular_2D vectors)
               (Vector type-eq-decl nil vectors_2D vectors)
               (zero const-decl "Vector" vectors_2D vectors)
               (sub_eq_zero formula-decl nil vectors_2D vectors)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_plus_real_is_real application-judgement "real"
                reals nil)
               (minus_real_is_real application-judgement "real" reals
                nil)
               (comp_zero_y formula-decl nil vectors_2D vectors)
               (comp_zero_x formula-decl nil vectors_2D vectors)
               (add_zero_right formula-decl nil vectors_2D vectors)
               (neg_zero formula-decl nil vectors_2D vectors)
               (perpR_eq_zero formula-decl nil perpendicular_2D
                vectors)
               (+ const-decl "Vector" vectors_2D vectors)
               (integer nonempty-type-from-decl nil integers nil)
               (floor_int formula-decl nil floor_ceil nil)
               (nonneg_floor_is_nat application-judgement "nat"
                floor_ceil nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
               (div_mult_pos_lt1 formula-decl nil real_props nil)
               (posint_times_posint_is_posint application-judgement
                "posint" integers nil)
               (/ const-decl "[numfield, nznum -> numfield]"
                  number_fields nil)
               (nznum nonempty-type-eq-decl nil number_fields nil)
               (/= const-decl "boolean" notequal nil)
               (nnrat_div_posrat_is_nnrat application-judgement
                "nonneg_rat" rationals nil)
               (nil application-judgement "below(m)" mod nil)
               (int_plus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (subrange type-eq-decl nil integers nil)
               (naturalnumber type-eq-decl nil naturalnumbers nil)
               (- const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (<= const-decl "bool" reals nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (nice_polygon_2D const-decl "bool" polygon_contain nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (>= const-decl "bool" reals nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (> const-decl "bool" reals nil)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (< const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (below type-eq-decl nil naturalnumbers nil)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (polygon_2D type-eq-decl nil acceptable_polygon nil)
               (modifiable_to_size const-decl "bool" resolution nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (recovery_point subtype
               "perpendicular_2D.perpR((vectors_2D.-)(resolution.p(resolution.neari), resolution.p(resolution.nearprevi)))"
               "Nz_vector")))
            (recovery_point_TCC6 0
             (recovery_point_TCC6-1 nil 3659373233
              ("" (skeep*)
               (("" (replaces -14)
                 (("" (assert)
                   (("" (hide-all-but 5) (("" (grind) nil nil)) nil))
                   nil))
                 nil))
               nil)
              ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
                    real_defs nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (proj_vect_nonzero application-judgement "Nz_vect2"
                resolution nil)
               (int_abs_is_nonneg application-judgement
                "{j: nonneg_int | j >= i}" real_defs nil)
               (posreal_div_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (nzreal_times_nzreal_is_nzreal application-judgement
                "nzreal" real_types nil)
               (minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil
              (recovery_point subtype
               "(vectors_2D.*(resolution.pv, resolution.R))" "nznum")))
            (outside_recovery_point_def 0
             (outside_recovery_point_def-1 nil 3687787575
              ("" (skeep*)
               (("" (skoletin)
                 (("" (expand "outside_recovery_point")
                   (("" (expand "recovery_point" :assert? none)
                     (("" (eval-expr "1=-1")
                       (("" (replaces -1)
                         (("" (skoletin - :tcc-step (assert))
                           (("" (lift-if)
                             (("" (split -)
                               (("1" (flatten) nil nil)
                                ("2"
                                 (flatten)
                                 (("2"
                                   (split -)
                                   (("1"
                                     (flatten)
                                     (("1" (assert) nil nil))
                                     nil)
                                    ("2"
                                     (flatten)
                                     (("2"
                                       (hide (1 2))
                                       (("2"
                                         (skoletin
                                          -
                                          :tcc-step
                                          (assert))
                                         (("2"
                                           (name
                                            "nexti"
                                            "IF i < N - 1 THEN i + 1 ELSE 0 ENDIF")
                                           (("2"
                                             (replaces -1)
                                             (("2"
                                               (name
                                                "neari"
                                                "IF sqv(s - p(i)) <= sqv(s - p(nexti)) THEN i ELSE nexti ENDIF")
                                               (("1"
                                                 (name
                                                  "nearnexti"
                                                  "IF neari < N - 1 THEN neari + 1 ELSE 0 ENDIF")
                                                 (("1"
                                                   (assert)
                                                   (("1"
                                                     (replace -2)
                                                     (("1"
                                                       (with-tccs
                                                        (name
                                                         "pv"
                                                         "proj_vect(IF neari > 0 THEN p(neari - 1)
                                                          ELSE p(N - 1)
                                                          ENDIF,
                                                          IF sqv(s - p(i)) <= sqv(s - p(nexti))
                                                            THEN p(i)
                                                          ELSE p(nexti)
                                                          ENDIF,
                                                          IF neari < N - 1 THEN p(neari + 1)
                                                          ELSE p(0)
                                                          ENDIF,
                                                          BUFF)")
                                                        :tcc-step
                                                        (assert))
                                                       (("1"
                                                         (replaces -1)
                                                         (("1"
                                                           (with-tccs
                                                            (name
                                                             "G"
                                                             "perpR(IF sqv(s - p(i)) <= sqv(s - p(nexti))
                                                                    THEN p(i)
                                                                    ELSE p(nexti)
                                                                    ENDIF
                                                                    -
                                                                    IF neari > 0
                                                                    THEN p(neari - 1)
                                                                    ELSE p(N - 1)
                                                                    ENDIF)")
                                                            :tcc-step
                                                            (assert))
                                                           (("1"
                                                             (replaces
                                                              -1)
                                                             (("1"
                                                               (with-tccs
                                                                (name
                                                                 "H"
                                                                 "(IF det(IF neari < N - 1 THEN p(neari + 1) ELSE p(0) ENDIF -
                                                     IF sqv(s - p(i)) <= sqv(s - p(nexti)) THEN p(i)
                                                     ELSE p(nexti)
                                                     ENDIF,
                                                    IF sqv(s - p(i)) <= sqv(s - p(nexti)) THEN p(i)
                                                    ELSE p(nexti)
                                                    ENDIF
                                                     -
                                                     IF neari > 0 THEN p(neari - 1) ELSE p(N - 1) ENDIF)
                                                 <= 0
                                               THEN IF sqv(s - p(i)) <= sqv(s - p(nexti)) THEN p(i)
                                                    ELSE p(nexti)
                                                    ENDIF
                                                     + (1 * ResolBUFF) * ^(pv)
                                             ELSE IF sqv(s - p(i)) <= sqv(s - p(nexti)) THEN p(i)
                                                  ELSE p(nexti)
                                                  ENDIF
                                                   +
                                                   (IF abs(pv * ^(G)) <= (BUFF / 100) THEN 0
                                                    ELSE ((IF sqv(s - p(i)) <= sqv(s - p(nexti))
                                                             THEN p(i)
                                                           ELSE p(nexti)
                                                           ENDIF
                                                            + (1 * ResolBUFF) * ^(G)
                                                            - p(i))
                                                           * ^(G))
                                                          / (pv * ^(G))
                                                    ENDIF)
                                                    * pv
                                             ENDIF)")
                                                                :tcc-step
                                                                (assert))
                                                               (("1"
                                                                 (replaces
                                                                  -1)
                                                                 (("1"
                                                                   (lift-if)
                                                                   (("1"
                                                                     (ground)
                                                                     nil
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("2"
                                                                 (hide
                                                                  -3)
                                                                 (("2"
                                                                   (flatten)
                                                                   (("2"
                                                                     (replaces
                                                                      -1)
                                                                     (("2"
                                                                       (eval-expr
                                                                        "abs(0)")
                                                                       (("2"
                                                                         (assert)
                                                                         nil
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("3"
                                                                 (hide
                                                                  -3)
                                                                 (("3"
                                                                   (flatten)
                                                                   (("3"
                                                                     (expand
                                                                      "G"
                                                                      -1)
                                                                     (("3"
                                                                       (lift-if)
                                                                       (("3"
                                                                         (ground)
                                                                         (("1"
                                                                           (lift-if)
                                                                           (("1"
                                                                             (ground)
                                                                             (("1"
                                                                               (expand
                                                                                "neari")
                                                                               (("1"
                                                                                 (rewrite
                                                                                  "det_perpR")
                                                                                 (("1"
                                                                                   (replaces
                                                                                    -3)
                                                                                   (("1"
                                                                                     (assert)
                                                                                     nil
                                                                                     nil))
                                                                                   nil))
                                                                                 nil))
                                                                               nil)
                                                                              ("2"
                                                                               (rewrite
                                                                                "det_perpR")
                                                                               (("2"
                                                                                 (replaces
                                                                                  -1)
                                                                                 (("2"
                                                                                   (assert)
                                                                                   nil
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil)
                                                                          ("2"
                                                                           (rewrite
                                                                            "det_perpR")
                                                                           (("1"
                                                                             (replaces
                                                                              -4)
                                                                             (("1"
                                                                               (assert)
                                                                               nil
                                                                               nil))
                                                                             nil)
                                                                            ("2"
                                                                             (expand
                                                                              "nexti")
                                                                             (("2"
                                                                               (lift-if)
                                                                               (("2"
                                                                                 (ground)
                                                                                 nil
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil)
                                                                          ("3"
                                                                           (rewrite
                                                                            "det_perpR")
                                                                           (("3"
                                                                             (replaces
                                                                              -5)
                                                                             (("3"
                                                                               (assert)
                                                                               nil
                                                                               nil))
                                                                             nil))
                                                                           nil)
                                                                          ("4"
                                                                           (rewrite
                                                                            "det_perpR")
                                                                           (("4"
                                                                             (replaces
                                                                              -3)
                                                                             (("4"
                                                                               (assert)
                                                                               nil
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("4"
                                                                 (hide
                                                                  -3)
                                                                 (("4"
                                                                   (flatten)
                                                                   (("4"
                                                                     (assert)
                                                                     (("4"
                                                                       (expand
                                                                        "G"
                                                                        -1)
                                                                       (("4"
                                                                         (lift-if)
                                                                         (("4"
                                                                           (ground)
                                                                           (("1"
                                                                             (lift-if)
                                                                             (("1"
                                                                               (ground)
                                                                               (("1"
                                                                                 (expand
                                                                                  "neari")
                                                                                 (("1"
                                                                                   (rewrite
                                                                                    "det_perpR")
                                                                                   (("1"
                                                                                     (replaces
                                                                                      -3)
                                                                                     (("1"
                                                                                       (assert)
                                                                                       nil
                                                                                       nil))
                                                                                     nil))
                                                                                   nil))
                                                                                 nil)
                                                                                ("2"
                                                                                 (rewrite
                                                                                  "det_perpR")
                                                                                 (("2"
                                                                                   (replaces
                                                                                    -1)
                                                                                   (("2"
                                                                                     (assert)
                                                                                     nil
                                                                                     nil))
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil)
                                                                            ("2"
                                                                             (rewrite
                                                                              "det_perpR")
                                                                             (("1"
                                                                               (replaces
                                                                                -4)
                                                                               (("1"
                                                                                 (assert)
                                                                                 nil
                                                                                 nil))
                                                                               nil)
                                                                              ("2"
                                                                               (expand
                                                                                "nexti")
                                                                               (("2"
                                                                                 (lift-if)
                                                                                 (("2"
                                                                                   (ground)
                                                                                   nil
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil)
                                                                            ("3"
                                                                             (rewrite
                                                                              "det_perpR")
                                                                             (("3"
                                                                               (replaces
                                                                                -5)
                                                                               (("3"
                                                                                 (assert)
                                                                                 nil
                                                                                 nil))
                                                                               nil))
                                                                             nil)
                                                                            ("4"
                                                                             (rewrite
                                                                              "det_perpR")
                                                                             (("4"
                                                                               (replaces
                                                                                -3)
                                                                               (("4"
                                                                                 (assert)
                                                                                 nil
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("5"
                                                                 (hide
                                                                  -3)
                                                                 (("5"
                                                                   (flatten)
                                                                   (("5"
                                                                     (ground)
                                                                     (("5"
                                                                       (expand
                                                                        "neari")
                                                                       (("5"
                                                                         (lift-if)
                                                                         (("5"
                                                                           (ground)
                                                                           (("5"
                                                                             (expand
                                                                              "nexti")
                                                                             (("5"
                                                                               (lift-if)
                                                                               (("5"
                                                                                 (ground)
                                                                                 nil
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("6"
                                                                 (hide
                                                                  -3)
                                                                 (("6"
                                                                   (ground)
                                                                   nil
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil)
                                                            ("2"
                                                             (hide -3)
                                                             (("2"
                                                               (flatten)
                                                               (("2"
                                                                 (ground)
                                                                 (("2"
                                                                   (expand
                                                                    "neari")
                                                                   (("2"
                                                                     (lift-if)
                                                                     (("2"
                                                                       (ground)
                                                                       (("2"
                                                                         (expand
                                                                          "nexti")
                                                                         (("2"
                                                                           (lift-if)
                                                                           (("2"
                                                                             (ground)
                                                                             nil
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil)
                                                        ("2"
                                                         (hide -3)
                                                         (("2"
                                                           (ground)
                                                           nil
                                                           nil))
                                                         nil)
                                                        ("3"
                                                         (hide -3)
                                                         (("3"
                                                           (ground)
                                                           (("3"
                                                             (expand
                                                              "neari")
                                                             (("3"
                                                               (lift-if)
                                                               (("3"
                                                                 (ground)
                                                                 (("3"
                                                                   (expand
                                                                    "nexti")
                                                                   (("3"
                                                                     (lift-if)
                                                                     (("3"
                                                                       (ground)
                                                                       nil
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil)
                                                ("2"
                                                 (hide -1)
                                                 (("2"
                                                   (expand "nexti")
                                                   (("2"
                                                     (lift-if)
                                                     (("2"
                                                       (ground)
                                                       nil
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ((id const-decl "(bijective?[T, T])" identity nil)
               (bijective? const-decl "bool" functions nil)
               (IFF const-decl "[bool, bool -> bool]" booleans nil)
               (real nonempty-type-from-decl nil reals nil)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (< const-decl "bool" reals nil)
               (below type-eq-decl nil naturalnumbers nil)
               (polygon_2D type-eq-decl nil acceptable_polygon nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (modifiable_to_size const-decl "bool" resolution nil)
               (outside_recovery_point const-decl "Vect2" resolution
                nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (/= const-decl "boolean" notequal nil)
               (definitely_outside const-decl "bool" polygon_contain
                nil)
               (recovery_point const-decl "Vect2" resolution nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nz_nzv application-judgement "Nz_vector" vectors_2D
                vectors)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               nil (det_perpR formula-decl nil det_2D vectors)
               (dot_zero_right formula-decl nil vectors_2D vectors) nil
               nil
               (int_abs_is_nonneg application-judgement
                "{j: nonneg_int | j >= i}" real_defs nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (* const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (* const-decl "Vector" vectors_2D vectors)
               (+ const-decl "Vector" vectors_2D vectors)
               (/ const-decl "[numfield, nznum -> numfield]"
                  number_fields nil)
               (nznum nonempty-type-eq-decl nil number_fields nil)
               (* const-decl "real" vectors_2D vectors)
               (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
                    real_defs nil)
               (perpR const-decl "Vect2" perpendicular_2D vectors)
               (^ const-decl "Normalized" vectors_2D vectors)
               (Normalized type-eq-decl nil vectors_2D vectors)
               (norm const-decl "nnreal" vectors_2D vectors)
               (Nz_vector type-eq-decl nil vectors_2D vectors)
               (proj_vect const-decl "Nz_vect2" resolution nil)
               (Nz_vect2 type-eq-decl nil vectors_2D vectors)
               (zero const-decl "Vector" vectors_2D vectors)
               (det const-decl "real" det_2D vectors) nil
               (sqv const-decl "nnreal" vectors_2D vectors)
               (nnreal type-eq-decl nil real_types nil)
               (Vector type-eq-decl nil vectors_2D vectors)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (IF const-decl "[boolean, T, T -> T]" if_def nil)
               (closest_edge def-decl "below(N)" resolution nil)
               (near_any_edge_upto def-decl
                "{bb: bool | bb IFF EXISTS (j: upto(i)): near_poly_edge(N, p, s, BUFF, j)}"
                polygon_contain nil)
               (near_poly_edge const-decl "bool" acceptable_polygon
                nil)
               (upto nonempty-type-eq-decl nil naturalnumbers nil)
               (<= const-decl "bool" reals nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (- const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (recovery_test_point const-decl "Vect2" resolution nil)
               (Sign type-eq-decl nil sign reals)
               (OR const-decl "[bool, bool -> bool]" booleans nil)
               (nzint nonempty-type-eq-decl nil integers nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (proj_vect_nonzero application-judgement "Nz_vect2"
                resolution nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_div_nzreal_is_real application-judgement "real"
                reals nil)
               (posreal_times_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (posreal_div_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (FALSE const-decl "bool" booleans nil)
               (- const-decl "[numfield -> numfield]" number_fields
                  nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (TRUE const-decl "bool" booleans nil))
              nil))
            (inside_recovery_point_def 0
             (inside_recovery_point_def-3 nil 3687787660
              ("" (skeep*)
               (("" (skoletin)
                 (("" (expand "inside_recovery_point")
                   (("" (expand "recovery_point" :assert? none)
                     (("" (eval-expr "-1=1")
                       (("" (replaces -1)
                         (("" (skoletin - :tcc-step (assert))
                           (("" (lift-if)
                             (("" (split -)
                               (("1" (flatten) nil nil)
                                ("2"
                                 (flatten)
                                 (("2"
                                   (split -)
                                   (("1"
                                     (flatten)
                                     (("1" (assert) nil nil))
                                     nil)
                                    ("2"
                                     (flatten)
                                     (("2"
                                       (hide (1 2))
                                       (("2"
                                         (skoletin
                                          -
                                          :tcc-step
                                          (assert))
                                         (("2"
                                           (name
                                            "nexti"
                                            "IF i < N - 1 THEN i + 1 ELSE 0 ENDIF")
                                           (("2"
                                             (replaces -1)
                                             (("2"
                                               (name
                                                "neari"
                                                "IF sqv(s - p(i)) <= sqv(s - p(nexti)) THEN i ELSE nexti ENDIF")
                                               (("1"
                                                 (name
                                                  "nearnexti"
                                                  "IF neari < N - 1 THEN neari + 1 ELSE 0 ENDIF")
                                                 (("1"
                                                   (assert)
                                                   (("1"
                                                     (replace -2)
                                                     (("1"
                                                       (name
                                                        "pv"
                                                        "proj_vect(IF neari > 0 THEN p(neari - 1)
                                                                                                              ELSE p(N - 1)
                                                                                                              ENDIF,
                                                                                                              IF sqv(s - p(i)) <= sqv(s - p(nexti))
                                                                                                                THEN p(i)
                                                                                                              ELSE p(nexti)
                                                                                                              ENDIF,
                                                                                                              IF neari < N - 1 THEN p(neari + 1)
                                                                                                              ELSE p(0)
                                                                                                              ENDIF,
                                                                                                              BUFF)")
                                                       (("1"
                                                         (replaces -1)
                                                         (("1"
                                                           (name
                                                            "G"
                                                            "perpR(IF sqv(s - p(i)) <= sqv(s - p(nexti))
                                                                                                                                THEN p(i)
                                                                                                                                ELSE p(nexti)
                                                                                                                                ENDIF
                                                                                                                                -
                                                                                                                                IF neari > 0
                                                                                                                                THEN p(neari - 1)
                                                                                                                                ELSE p(N - 1)
                                                                                                                                ENDIF)")
                                                           (("1"
                                                             (replaces
                                                              -1)
                                                             (("1"
                                                               (name
                                                                "H"
                                                                "(IF NOT det
                                                   (IF neari < N - 1
                                                    THEN p(neari + 1)
                                                    ELSE p(0)
                                                    ENDIF
                                                    -
                                                    IF sqv(s - p(i)) <= sqv(s - p(nexti))
                                                    THEN p(i)
                                                    ELSE p(nexti)
                                                    ENDIF,
                                                    IF sqv(s - p(i)) <= sqv(s - p(nexti))
                                                    THEN p(i)
                                                    ELSE p(nexti)
                                                    ENDIF
                                                    -
                                                    IF neari > 0
                                                    THEN p(neari - 1)
                                                    ELSE p(N - 1)
                                                    ENDIF)
                                                   <=
                                                   0
                                              THEN IF sqv(s - p(i)) <= sqv(s - p(nexti))
                                                   THEN p(i)
                                                   ELSE p(nexti)
                                                   ENDIF
                                                   +
                                                   (-1 * ResolBUFF) * ^(pv)
                                            ELSE IF sqv(s - p(i)) <= sqv(s - p(nexti))
                                                   THEN p(i)
                                                 ELSE p(nexti)
                                                 ENDIF
                                                  +
                                                  (IF abs(pv * ^(G)) <= (BUFF / 100)
                                                   THEN 0
                                                   ELSE ((IF sqv(s - p(i))
                                                             <=
                                                             sqv(s - p(nexti))
                                                          THEN p(i)
                                                          ELSE p(nexti)
                                                          ENDIF
                                                          +
                                                          (-1 * ResolBUFF) * ^(G)
                                                          -
                                                          p(i))
                                                         *
                                                         ^(G))
                                                        /
                                                        (pv * ^(G))
                                                   ENDIF)
                                                   * pv
                                            ENDIF)")
                                                               (("1"
                                                                 (replaces
                                                                  -1)
                                                                 (("1"
                                                                   (lift-if)
                                                                   (("1"
                                                                     (ground)
                                                                     nil
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("2"
                                                                 (flatten)
                                                                 (("2"
                                                                   (assert)
                                                                   (("2"
                                                                     (hide
                                                                      -5)
                                                                     (("2"
                                                                       (replaces
                                                                        -2)
                                                                       (("2"
                                                                         (hide
                                                                          -1)
                                                                         (("2"
                                                                           (grind)
                                                                           nil
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("3"
                                                                 (flatten)
                                                                 (("3"
                                                                   (hide
                                                                    -5)
                                                                   (("3"
                                                                     (hide
                                                                      -1)
                                                                     (("3"
                                                                       (replaces
                                                                        -1)
                                                                       (("3"
                                                                         (assert)
                                                                         (("3"
                                                                           (expand
                                                                            "^"
                                                                            1)
                                                                           (("3"
                                                                             (grind)
                                                                             nil
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("4"
                                                                 (flatten)
                                                                 (("4"
                                                                   (hide
                                                                    -4)
                                                                   (("4"
                                                                     (expand
                                                                      "nexti")
                                                                     (("4"
                                                                       (hide
                                                                        -1)
                                                                       (("4"
                                                                         (lift-if)
                                                                         (("4"
                                                                           (ground)
                                                                           nil
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("5"
                                                                 (hide
                                                                  -3)
                                                                 (("5"
                                                                   (flatten)
                                                                   (("5"
                                                                     (hide
                                                                      -1)
                                                                     (("5"
                                                                       (expand
                                                                        "nexti"
                                                                        +)
                                                                       (("5"
                                                                         (lift-if)
                                                                         (("5"
                                                                           (ground)
                                                                           nil
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("6"
                                                                 (hide
                                                                  -3)
                                                                 (("6"
                                                                   (flatten)
                                                                   (("6"
                                                                     (hide
                                                                      -1)
                                                                     (("6"
                                                                       (expand
                                                                        "G")
                                                                       (("6"
                                                                         (case
                                                                          "FORALL (ii,jj:below(N)): p(ii)=p(jj) IMPLIES ii=jj")
                                                                         (("1"
                                                                           (lift-if
                                                                            -2)
                                                                           (("1"
                                                                             (lift-if
                                                                              -2)
                                                                             (("1"
                                                                               (lift-if
                                                                                -2)
                                                                               (("1"
                                                                                 (assert)
                                                                                 (("1"
                                                                                   (ground)
                                                                                   (("1"
                                                                                     (inst
                                                                                      -
                                                                                      "i"
                                                                                      "neari-1")
                                                                                     (("1"
                                                                                       (assert)
                                                                                       (("1"
                                                                                         (case
                                                                                          "NOT p(neari-1)-p(i)=perpR(perpR(p(i)-p(neari-1)))")
                                                                                         (("1"
                                                                                           (hide-all-but
                                                                                            1)
                                                                                           (("1"
                                                                                             (grind)
                                                                                             nil
                                                                                             nil))
                                                                                           nil)
                                                                                          ("2"
                                                                                           (replace
                                                                                            -3)
                                                                                           (("2"
                                                                                             (assert)
                                                                                             (("2"
                                                                                               (rewrite
                                                                                                "sub_eq_zero")
                                                                                               nil
                                                                                               nil))
                                                                                             nil))
                                                                                           nil))
                                                                                         nil))
                                                                                       nil))
                                                                                     nil)
                                                                                    ("2"
                                                                                     (inst
                                                                                      -
                                                                                      "i"
                                                                                      "N-1")
                                                                                     (("2"
                                                                                       (assert)
                                                                                       (("2"
                                                                                         (case
                                                                                          "NOT p(N-1)-p(i)=perpR(perpR(p(i)-p(N-1)))")
                                                                                         (("1"
                                                                                           (hide-all-but
                                                                                            1)
                                                                                           (("1"
                                                                                             (grind)
                                                                                             nil
                                                                                             nil))
                                                                                           nil)
                                                                                          ("2"
                                                                                           (replace
                                                                                            -2)
                                                                                           (("2"
                                                                                             (assert)
                                                                                             (("2"
                                                                                               (rewrite
                                                                                                "sub_eq_zero")
                                                                                               nil
                                                                                               nil))
                                                                                             nil))
                                                                                           nil))
                                                                                         nil))
                                                                                       nil))
                                                                                     nil)
                                                                                    ("3"
                                                                                     (inst
                                                                                      -
                                                                                      "nexti"
                                                                                      "neari-1")
                                                                                     (("3"
                                                                                       (assert)
                                                                                       (("3"
                                                                                         (case
                                                                                          "NOT p(neari-1)-p(nexti)=perpR(perpR(p(nexti)-p(neari-1)))")
                                                                                         (("1"
                                                                                           (hide-all-but
                                                                                            1)
                                                                                           (("1"
                                                                                             (grind)
                                                                                             nil
                                                                                             nil))
                                                                                           nil)
                                                                                          ("2"
                                                                                           (replaces
                                                                                            -3)
                                                                                           (("2"
                                                                                             (assert)
                                                                                             (("2"
                                                                                               (rewrite
                                                                                                "sub_eq_zero")
                                                                                               nil
                                                                                               nil))
                                                                                             nil))
                                                                                           nil))
                                                                                         nil))
                                                                                       nil))
                                                                                     nil)
                                                                                    ("4"
                                                                                     (inst
                                                                                      -
                                                                                      "nexti"
                                                                                      "N-1")
                                                                                     (("4"
                                                                                       (assert)
                                                                                       (("4"
                                                                                         (case
                                                                                          "NOT p(N-1)-p(nexti)=perpR(perpR(p(nexti)-p(N-1)))")
                                                                                         (("1"
                                                                                           (hide-all-but
                                                                                            1)
                                                                                           (("1"
                                                                                             (grind)
                                                                                             nil
                                                                                             nil))
                                                                                           nil)
                                                                                          ("2"
                                                                                           (replaces
                                                                                            -2)
                                                                                           (("2"
                                                                                             (assert)
                                                                                             (("2"
                                                                                               (rewrite
                                                                                                "sub_eq_zero")
                                                                                               nil
                                                                                               nil))
                                                                                             nil))
                                                                                           nil))
                                                                                         nil))
                                                                                       nil))
                                                                                     nil))
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil)
                                                                          ("2"
                                                                           (hide-all-but
                                                                            1)
                                                                           (("2"
                                                                             (typepred
                                                                              "p")
                                                                             (("2"
                                                                               (expand
                                                                                "modifiable_to_size")
                                                                               (("2"
                                                                                 (expand
                                                                                  "nice_polygon_2D")
                                                                                 (("2"
                                                                                   (flatten)
                                                                                   (("2"
                                                                                     (lemma
                                                                                      "acceptable_polygon_2D_def")
                                                                                     (("2"
                                                                                       (insteep
                                                                                        -)
                                                                                       (("2"
                                                                                         (assert)
                                                                                         (("2"
                                                                                           (skeep)
                                                                                           (("2"
                                                                                             (inst
                                                                                              -
                                                                                              "ii"
                                                                                              "jj")
                                                                                             (("2"
                                                                                               (assert)
                                                                                               nil
                                                                                               nil))
                                                                                             nil))
                                                                                           nil))
                                                                                         nil))
                                                                                       nil))
                                                                                     nil))
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("7"
                                                                 (hide
                                                                  -3)
                                                                 (("7"
                                                                   (flatten)
                                                                   (("7"
                                                                     (expand
                                                                      "nexti"
                                                                      2)
                                                                     (("7"
                                                                       (lift-if)
                                                                       (("7"
                                                                         (ground)
                                                                         nil
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("8"
                                                                 (hide
                                                                  -3)
                                                                 (("8"
                                                                   (flatten)
                                                                   (("8"
                                                                     (hide
                                                                      -1)
                                                                     (("8"
                                                                       (expand
                                                                        "nexti"
                                                                        1)
                                                                       (("8"
                                                                         (lift-if)
                                                                         (("8"
                                                                           (ground)
                                                                           nil
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("9"
                                                                 (hide
                                                                  -3)
                                                                 (("9"
                                                                   (flatten)
                                                                   (("9"
                                                                     (hide
                                                                      1)
                                                                     (("9"
                                                                       (lift-if)
                                                                       (("9"
                                                                         (expand
                                                                          "nexti"
                                                                          2)
                                                                         (("9"
                                                                           (lift-if)
                                                                           (("9"
                                                                             (ground)
                                                                             nil
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("10"
                                                                 (hide
                                                                  -3)
                                                                 (("10"
                                                                   (flatten)
                                                                   (("10"
                                                                     (hide
                                                                      1)
                                                                     (("10"
                                                                       (expand
                                                                        "nexti"
                                                                        1)
                                                                       (("10"
                                                                         (lift-if)
                                                                         (("10"
                                                                           (ground)
                                                                           nil
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("11"
                                                                 (hide
                                                                  -3)
                                                                 (("11"
                                                                   (flatten)
                                                                   (("11"
                                                                     (assert)
                                                                     nil
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil)
                                                        ("2"
                                                         (hide -3)
                                                         (("2"
                                                           (ground)
                                                           nil
                                                           nil))
                                                         nil)
                                                        ("3"
                                                         (hide -3)
                                                         (("3"
                                                           (flatten)
                                                           (("3"
                                                             (expand
                                                              "nexti"
                                                              2)
                                                             (("3"
                                                               (lift-if)
                                                               (("3"
                                                                 (assert)
                                                                 nil
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil)
                                                        ("4"
                                                         (hide -3)
                                                         (("4"
                                                           (expand
                                                            "neari")
                                                           (("4"
                                                             (lift-if)
                                                             (("4"
                                                               (ground)
                                                               (("4"
                                                                 (expand
                                                                  "nexti"
                                                                  2)
                                                                 (("4"
                                                                   (lift-if)
                                                                   (("4"
                                                                     (ground)
                                                                     nil
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil)
                                                ("2"
                                                 (hide -1)
                                                 (("2"
                                                   (expand "nexti" 1)
                                                   (("2"
                                                     (lift-if)
                                                     (("2"
                                                       (ground)
                                                       nil
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ((id const-decl "(bijective?[T, T])" identity nil)
               (bijective? const-decl "bool" functions nil)
               (IFF const-decl "[bool, bool -> bool]" booleans nil)
               (real nonempty-type-from-decl nil reals nil)
               (Vect2 type-eq-decl nil vectors_2D_def vectors)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (posreal nonempty-type-eq-decl nil real_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (< const-decl "bool" reals nil)
               (below type-eq-decl nil naturalnumbers nil)
               (polygon_2D type-eq-decl nil acceptable_polygon nil)
               (nonneg_real nonempty-type-eq-decl nil real_types nil)
               (modifiable_to_size const-decl "bool" resolution nil)
               (inside_recovery_point const-decl "Vect2" resolution
                nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (/= const-decl "boolean" notequal nil)
               (definitely_inside const-decl "bool" polygon_contain
                nil)
               (recovery_point const-decl "Vect2" resolution nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_le_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nz_nzv application-judgement "Nz_vector" vectors_2D
                vectors)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (minus_real_is_real application-judgement "real" reals
                nil)
               (real_minus_real_is_real application-judgement "real"
                reals nil)
               (perpR_eq_zero formula-decl nil perpendicular_2D
                vectors)
               (sub_eq_zero formula-decl nil vectors_2D vectors)
               (nice_polygon_2D const-decl "bool" polygon_contain nil)
               (acceptable_polygon_2D_def formula-decl nil
                acceptable_polygon nil)
               (nnreal_plus_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (subrange type-eq-decl nil integers nil)
               (posreal_times_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (comp_zero_x formula-decl nil vectors_2D vectors)
               (comp_zero_y formula-decl nil vectors_2D vectors)
               (sqrt_0 formula-decl nil sqrt reals)
               (nzrat_div_nzrat_is_nzrat application-judgement "nzrat"
                rationals nil)
               (real_times_real_is_real application-judgement "real"
                reals nil)
               (real_plus_real_is_real application-judgement "real"
                reals nil)
               (nzreal_div_nzreal_is_nzreal application-judgement
                "nzreal" real_types nil)
               (int_abs_is_nonneg application-judgement
                "{j: nonneg_int | j >= i}" real_defs nil)
               (* const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (* const-decl "Vector" vectors_2D vectors)
               (+ const-decl "Vector" vectors_2D vectors)
               (/ const-decl "[numfield, nznum -> numfield]"
                  number_fields nil)
               (nznum nonempty-type-eq-decl nil number_fields nil)
               (* const-decl "real" vectors_2D vectors)
               (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}"
                    real_defs nil)
               (perpR const-decl "Vect2" perpendicular_2D vectors)
               (^ const-decl "Normalized" vectors_2D vectors)
               (Normalized type-eq-decl nil vectors_2D vectors)
               (norm const-decl "nnreal" vectors_2D vectors)
               (Nz_vector type-eq-decl nil vectors_2D vectors)
               (proj_vect const-decl "Nz_vect2" resolution nil)
               (Nz_vect2 type-eq-decl nil vectors_2D vectors)
               (zero const-decl "Vector" vectors_2D vectors)
               (det const-decl "real" det_2D vectors)
               (sqv const-decl "nnreal" vectors_2D vectors)
               (nnreal type-eq-decl nil real_types nil)
               (Vector type-eq-decl nil vectors_2D vectors)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (IF const-decl "[boolean, T, T -> T]" if_def nil)
               (closest_edge def-decl "below(N)" resolution nil)
               (near_any_edge_upto def-decl
                "{bb: bool | bb IFF EXISTS (j: upto(i)): near_poly_edge(N, p, s, BUFF, j)}"
                polygon_contain nil)
               (near_poly_edge const-decl "bool" acceptable_polygon
                nil)
               (upto nonempty-type-eq-decl nil naturalnumbers nil)
               (<= const-decl "bool" reals nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (- const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (recovery_test_point const-decl "Vect2" resolution nil)
               (Sign type-eq-decl nil sign reals)
               (OR const-decl "[bool, bool -> bool]" booleans nil)
               (nzint nonempty-type-eq-decl nil integers nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (proj_vect_nonzero application-judgement "Nz_vect2"
                resolution nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_div_nzreal_is_real application-judgement "real"
                reals nil)
               (nzreal_times_nzreal_is_nzreal application-judgement
                "nzreal" real_types nil)
               (posreal_div_posreal_is_posreal application-judgement
                "posreal" real_types nil)
               (FALSE const-decl "bool" booleans nil)
               (- const-decl "[numfield -> numfield]" number_fields
                  nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (TRUE const-decl "bool" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              nil)
             (inside_recovery_point_def-2 nil 3687787632
              ("" (skeep*)
               (("" (skoletin)
                 (("" (expand "inside_recovery_point")
                   (("" (expand "recovery_point" :assert? none)
                     (("" (eval-expr "1=-1")
                       (("" (replaces -1)
                         (("" (skoletin -)
                           (("" (lift-if)
                             (("" (split -)
                               (("1" (flatten) nil)
                                ("2"
                                 (flatten)
                                 (("2"
                                   (split -)
                                   (("1"
                                     (flatten)
                                     (("1" (assert) nil)))
                                    ("2"
                                     (flatten)
                                     (("2"
                                       (hide (1 2))
                                       (("2"
                                         (skoletin -)
                                         (("2"
                                           (name
                                            "nexti"
                                            "IF i < N - 1 THEN i + 1 ELSE 0 ENDIF")
                                           (("2"
                                             (replaces -1)
                                             (("2"
                                               (name
                                                "neari"
                                                "IF sqv(s - p(i)) <= sqv(s - p(nexti)) THEN i ELSE nexti ENDIF")
                                               (("1"
                                                 (name
                                                  "nearnexti"
                                                  "IF neari < N - 1 THEN neari + 1 ELSE 0 ENDIF")
                                                 (("1"
                                                   (assert)
                                                   (("1"
                                                     (replace -2)
                                                     (("1"
                                                       (name
                                                        "pv"
                                                        "proj_vect(IF neari > 0 THEN p(neari - 1)
                                                                       ELSE p(N - 1)
                                                                       ENDIF,
                                                                       IF sqv(s - p(i)) <= sqv(s - p(nexti))
                                                                         THEN p(i)
                                                                       ELSE p(nexti)
                                                                       ENDIF,
                                                                       IF neari < N - 1 THEN p(neari + 1)
                                                                       ELSE p(0)
                                                                       ENDIF,
                                                                       BUFF)")
                                                       (("1"
                                                         (replaces -1)
                                                         (("1"
                                                           (name
                                                            "G"
                                                            "perpR(IF sqv(s - p(i)) <= sqv(s - p(nexti))
                                                                                   THEN p(i)
                                                                                   ELSE p(nexti)
                                                                                   ENDIF
                                                                                   -
                                                                                   IF neari > 0
                                                                                   THEN p(neari - 1)
                                                                                   ELSE p(N - 1)
                                                                                   ENDIF)")
                                                           (("1"
                                                             (replaces
                                                              -1)
                                                             (("1"
                                                               (name
                                                                "H"
                                                                "(IF det(IF neari < N - 1 THEN p(neari + 1) ELSE p(0) ENDIF -
                                                                    IF sqv(s - p(i)) <= sqv(s - p(nexti)) THEN p(i)
                                                                    ELSE p(nexti)
                                                                    ENDIF,
                                                                   IF sqv(s - p(i)) <= sqv(s - p(nexti)) THEN p(i)
                                                                   ELSE p(nexti)
                                                                   ENDIF
                                                                    -
                                                                    IF neari > 0 THEN p(neari - 1) ELSE p(N - 1) ENDIF)
                                                                <= 0
                                                              THEN IF sqv(s - p(i)) <= sqv(s - p(nexti)) THEN p(i)
                                                                   ELSE p(nexti)
                                                                   ENDIF
                                                                    + (1 * ResolBUFF) * ^(pv)
                                                            ELSE IF sqv(s - p(i)) <= sqv(s - p(nexti)) THEN p(i)
                                                                 ELSE p(nexti)
                                                                 ENDIF
                                                                  +
                                                                  (IF abs(pv * ^(G)) <= (BUFF / 100) THEN 0
                                                                   ELSE ((IF sqv(s - p(i)) <= sqv(s - p(nexti))
                                                                            THEN p(i)
                                                                          ELSE p(nexti)
                                                                          ENDIF
                                                                           + (1 * ResolBUFF) * ^(G)
                                                                           - p(i))
                                                                          * ^(G))
                                                                         / (pv * ^(G))
                                                                   ENDIF)
                                                                   * pv
                                                            ENDIF)")
                                                               (("1"
                                                                 (replaces
                                                                  -1)
                                                                 (("1"
                                                                   (lift-if)
                                                                   (("1"
                                                                     (ground)
                                                                     nil)))))
                                                                ("2"
                                                                 (flatten)
                                                                 (("2"
                                                                   (assert)
                                                                   (("2"
                                                                     (hide
                                                                      -4)
                                                                     (("2"
                                                                       (hide
                                                                        1)
                                                                       (("2"
                                                                         (replaces
                                                                          -1)
                                                                         (("2"
                                                                           (assert)
                                                                           (("2"
                                                                             (grind)
                                                                             nil)))))))))))))
                                                                ("3"
                                                                 (flatten)
                                                                 (("3"
                                                                   (hide
                                                                    -4)
                                                                   (("3"
                                                                     (hide
                                                                      1)
                                                                     (("3"
                                                                       (replaces
                                                                        -1)
                                                                       (("3"
                                                                         (assert)
                                                                         (("3"
                                                                           (expand
                                                                            "^"
                                                                            1)
                                                                           (("3"
                                                                             (grind)
                                                                             nil)))))))))))))
                                                                ("4"
                                                                 (flatten)
                                                                 (("4"
                                                                   (hide
                                                                    -3)
                                                                   (("4"
                                                                     (hide
                                                                      1)
                                                                     (("4"
                                                                       (lift-if)
                                                                       (("4"
                                                                         (ground)
                                                                         (("4"
                                                                           (expand
                                                                            "nexti")
                                                                           (("4"
                                                                             (lift-if)
                                                                             (("4"
                                                                               (ground)
                                                                               nil)))))))))))))))
                                                                ("5"
                                                                 (hide
                                                                  -3)
                                                                 (("5"
                                                                   (flatten)
                                                                   (("5"
                                                                     (hide
                                                                      1)
                                                                     (("5"
                                                                       (expand
                                                                        "nexti")
                                                                       (("5"
                                                                         (lift-if)
                                                                         (("5"
                                                                           (ground)
                                                                           nil)))))))))))
                                                                ("6"
                                                                 (hide
                                                                  -3)
                                                                 (("6"
                                                                   (flatten)
                                                                   (("6"
                                                                     (replaces
                                                                      -1)
                                                                     (("6"
                                                                       (assert)
                                                                       (("6"
                                                                         (expand
                                                                          "G"
                                                                          -1)
                                                                         (("6"
                                                                           (lift-if)
                                                                           (("6"
                                                                             (ground)
                                                                             (("1"
                                                                               (lift-if)
                                                                               (("1"
                                                                                 (ground)
                                                                                 (("1"
                                                                                   (expand
                                                                                    "neari")
                                                                                   (("1"
                                                                                     (rewrite
                                                                                      "det_perpR")
                                                                                     (("1"
                                                                                       (replaces
                                                                                        -3)
                                                                                       (("1"
                                                                                         (assert)
                                                                                         nil)))))))
                                                                                  ("2"
                                                                                   (rewrite
                                                                                    "det_perpR")
                                                                                   (("2"
                                                                                     (replaces
                                                                                      -1)
                                                                                     (("2"
                                                                                       (assert)
                                                                                       nil)))))))))
                                                                              ("2"
                                                                               (rewrite
                                                                                "det_perpR")
                                                                               (("2"
                                                                                 (replaces
                                                                                  -4)
                                                                                 (("2"
                                                                                   (assert)
                                                                                   nil)))))
                                                                              ("3"
                                                                               (rewrite
                                                                                "det_perpR")
                                                                               (("3"
                                                                                 (replaces
                                                                                  -5)
                                                                                 (("3"
                                                                                   (assert)
                                                                                   nil)))))
                                                                              ("4"
                                                                               (rewrite
                                                                                "det_perpR")
                                                                               (("4"
                                                                                 (replaces
                                                                                  -3)
                                                                                 (("4"
                                                                                   (assert)
                                                                                   nil)))))))))))))))))))
                                                                ("7"
                                                                 (flatten)
                                                                 (("7"
                                                                   (hide
                                                                    -3)
                                                                   (("7"
                                                                     (hide
                                                                      1)
                                                                     (("7"
                                                                       (expand
                                                                        "nexti")
                                                                       (("7"
                                                                         (lift-if)
                                                                         (("7"
                                                                           (ground)
                                                                           nil)))))))))))
                                                                ("8"
                                                                 (flatten)
                                                                 (("8"
                                                                   (hide
                                                                    -3)
                                                                   (("8"
                                                                     (hide
                                                                      1)
                                                                     (("8"
                                                                       (expand
                                                                        "nexti")
                                                                       (("8"
                                                                         (lift-if)
                                                                         (("8"
                                                                           (ground)
                                                                           nil)))))))))))
                                                                ("9"
                                                                 (hide
                                                                  -3)
                                                                 (("9"
                                                                   (flatten)
                                                                   (("9"
                                                                     (hide
                                                                      -1)
                                                                     (("9"
                                                                       (expand
                                                                        "nexti")
                                                                       (("9"
                                                                         (lift-if)
                                                                         (("9"
                                                                           (ground)
                                                                           nil)))))))))))
                                                                ("10"
                                                                 (hide
                                                                  -3)
                                                                 (("10"
                                                                   (flatten)
                                                                   (("10"
                                                                     (expand
                                                                      "nexti")
                                                                     (("10"
                                                                       (lift-if)
                                                                       (("10"
                                                                         (ground)
                                                                         nil)))))))))
                                                                ("11"
                                                                 (hide
                                                                  3)
                                                                 (("11"
                                                                   (hide
                                                                    -3)
                                                                   (("11"
                                                                     (ground)
                                                                     nil)))))))))))))
                                                        ("2"
                                                         (hide -3)
                                                         (("2"
                                                           (ground)
                                                           nil)))
                                                        ("3"
                                                         (hide -3)
                                                         (("3"
                                                           (ground)
                                                           (("3"
                                                             (expand
                                                              "nexti")
                                                             (("3"
                                                               (lift-if)
                                                               (("3"
                                                                 (ground)
                                                                 nil)))))))))
                                                        ("4"
                                                         (hide -3)
                                                         (("4"
                                                           (ground)
                                                           (("4"
                                                             (expand
                                                              "neari")
                                                             (("4"
                                                               (lift-if)
                                                               (("4"
                                                                 (ground)
                                                                 (("4"
                                                                   (expand
                                                                    "nexti")
                                                                   (("4"
                                                                     (lift-if)
                                                                     (("4"
                                                                       (ground)
                                                                       nil)))))))))))))))))))))))
                                                ("2"
                                                 (hide -1)
                                                 (("2"
                                                   (expand "nexti")
                                                   (("2"
                                                     (lift-if)
                                                     (("2"
                                                       (ground)
                                                       nil))))))))))))))))))))))))))))))))))))))))
               nil)
              nil nil)
             (inside_recovery_point_def-1 nil 3687787616
              ("" (skeep*)
               (("" (skoletin)
                 (("" (expand "outside_recovery_point")
                   (("" (expand "recovery_point" :assert? none)
                     (("" (eval-expr "1=-1")
                       (("" (replaces -1)
                         (("" (skoletin -)
                           (("" (lift-if)
                             (("" (split -)
                               (("1" (flatten) nil)
                                ("2"
                                 (flatten)
                                 (("2"
                                   (split -)
                                   (("1"
                                     (flatten)
                                     (("1" (assert) nil)))
                                    ("2"
                                     (flatten)
                                     (("2"
                                       (hide (1 2))
                                       (("2"
                                         (skoletin -)
                                         (("2"
                                           (name
                                            "nexti"
                                            "IF i < N - 1 THEN i + 1 ELSE 0 ENDIF")
                                           (("2"
                                             (replaces -1)
                                             (("2"
                                               (name
                                                "neari"
                                                "IF sqv(s - p(i)) <= sqv(s - p(nexti)) THEN i ELSE nexti ENDIF")
                                               (("1"
                                                 (name
                                                  "nearnexti"
                                                  "IF neari < N - 1 THEN neari + 1 ELSE 0 ENDIF")
                                                 (("1"
                                                   (assert)
                                                   (("1"
                                                     (replace -2)
                                                     (("1"
                                                       (name
                                                        "pv"
                                                        "proj_vect(IF neari > 0 THEN p(neari - 1)
                                                          ELSE p(N - 1)
                                                          ENDIF,
                                                          IF sqv(s - p(i)) <= sqv(s - p(nexti))
                                                            THEN p(i)
                                                          ELSE p(nexti)
                                                          ENDIF,
                                                          IF neari < N - 1 THEN p(neari + 1)
                                                          ELSE p(0)
                                                          ENDIF,
                                                          BUFF)")
                                                       (("1"
                                                         (replaces -1)
                                                         (("1"
                                                           (name
                                                            "G"
                                                            "perpR(IF sqv(s - p(i)) <= sqv(s - p(nexti))
                                                                    THEN p(i)
                                                                    ELSE p(nexti)
                                                                    ENDIF
                                                                    -
                                                                    IF neari > 0
                                                                    THEN p(neari - 1)
                                                                    ELSE p(N - 1)
                                                                    ENDIF)")
                                                           (("1"
                                                             (replaces
                                                              -1)
                                                             (("1"
                                                               (name
                                                                "H"
                                                                "(IF det(IF neari < N - 1 THEN p(neari + 1) ELSE p(0) ENDIF -
                                                     IF sqv(s - p(i)) <= sqv(s - p(nexti)) THEN p(i)
                                                     ELSE p(nexti)
                                                     ENDIF,
                                                    IF sqv(s - p(i)) <= sqv(s - p(nexti)) THEN p(i)
                                                    ELSE p(nexti)
                                                    ENDIF
                                                     -
                                                     IF neari > 0 THEN p(neari - 1) ELSE p(N - 1) ENDIF)
                                                 <= 0
                                               THEN IF sqv(s - p(i)) <= sqv(s - p(nexti)) THEN p(i)
                                                    ELSE p(nexti)
                                                    ENDIF
                                                     + (1 * ResolBUFF) * ^(pv)
                                             ELSE IF sqv(s - p(i)) <= sqv(s - p(nexti)) THEN p(i)
                                                  ELSE p(nexti)
                                                  ENDIF
                                                   +
                                                   (IF abs(pv * ^(G)) <= (BUFF / 100) THEN 0
                                                    ELSE ((IF sqv(s - p(i)) <= sqv(s - p(nexti))
                                                             THEN p(i)
                                                           ELSE p(nexti)
                                                           ENDIF
                                                            + (1 * ResolBUFF) * ^(G)
                                                            - p(i))
                                                           * ^(G))
                                                          / (pv * ^(G))
                                                    ENDIF)
                                                    * pv
                                             ENDIF)")
                                                               (("1"
                                                                 (replaces
                                                                  -1)
                                                                 (("1"
                                                                   (lift-if)
                                                                   (("1"
                                                                     (ground)
                                                                     nil)))))
                                                                ("2"
                                                                 (flatten)
                                                                 (("2"
                                                                   (assert)
                                                                   (("2"
                                                                     (hide
                                                                      -4)
                                                                     (("2"
                                                                       (hide
                                                                        1)
                                                                       (("2"
                                                                         (replaces
                                                                          -1)
                                                                         (("2"
                                                                           (assert)
                                                                           (("2"
                                                                             (grind)
                                                                             nil)))))))))))))
                                                                ("3"
                                                                 (flatten)
                                                                 (("3"
                                                                   (hide
                                                                    -4)
                                                                   (("3"
                                                                     (hide
                                                                      1)
                                                                     (("3"
                                                                       (replaces
                                                                        -1)
                                                                       (("3"
                                                                         (assert)
                                                                         (("3"
                                                                           (expand
                                                                            "^"
                                                                            1)
                                                                           (("3"
                                                                             (grind)
                                                                             nil)))))))))))))
                                                                ("4"
                                                                 (flatten)
                                                                 (("4"
                                                                   (hide
                                                                    -3)
                                                                   (("4"
                                                                     (hide
                                                                      1)
                                                                     (("4"
                                                                       (lift-if)
                                                                       (("4"
                                                                         (ground)
                                                                         (("4"
                                                                           (expand
                                                                            "nexti")
                                                                           (("4"
                                                                             (lift-if)
                                                                             (("4"
                                                                               (ground)
                                                                               nil)))))))))))))))
                                                                ("5"
                                                                 (hide
                                                                  -3)
                                                                 (("5"
                                                                   (flatten)
                                                                   (("5"
                                                                     (hide
                                                                      1)
                                                                     (("5"
                                                                       (expand
                                                                        "nexti")
                                                                       (("5"
                                                                         (lift-if)
                                                                         (("5"
                                                                           (ground)
                                                                           nil)))))))))))
                                                                ("6"
                                                                 (hide
                                                                  -3)
                                                                 (("6"
                                                                   (flatten)
                                                                   (("6"
                                                                     (replaces
                                                                      -1)
                                                                     (("6"
                                                                       (assert)
                                                                       (("6"
                                                                         (expand
                                                                          "G"
                                                                          -1)
                                                                         (("6"
                                                                           (lift-if)
                                                                           (("6"
                                                                             (ground)
                                                                             (("1"
                                                                               (lift-if)
                                                                               (("1"
                                                                                 (ground)
                                                                                 (("1"
                                                                                   (expand
                                                                                    "neari")
                                                                                   (("1"
                                                                                     (rewrite
                                                                                      "det_perpR")
                                                                                     (("1"
                                                                                       (replaces
                                                                                        -3)
                                                                                       (("1"
                                                                                         (assert)
                                                                                         nil)))))))
                                                                                  ("2"
                                                                                   (rewrite
                                                                                    "det_perpR")
                                                                                   (("2"
                                                                                     (replaces
                                                                                      -1)
                                                                                     (("2"
                                                                                       (assert)
                                                                                       nil)))))))))
                                                                              ("2"
                                                                               (rewrite
                                                                                "det_perpR")
                                                                               (("2"
                                                                                 (replaces
                                                                                  -4)
                                                                                 (("2"
                                                                                   (assert)
                                                                                   nil)))))
                                                                              ("3"
                                                                               (rewrite
                                                                                "det_perpR")
                                                                               (("3"
                                                                                 (replaces
                                                                                  -5)
                                                                                 (("3"
                                                                                   (assert)
                                                                                   nil)))))
                                                                              ("4"
                                                                               (rewrite
                                                                                "det_perpR")
                                                                               (("4"
                                                                                 (replaces
                                                                                  -3)
                                                                                 (("4"
                                                                                   (assert)
                                                                                   nil)))))))))))))))))))
                                                                ("7"
                                                                 (flatten)
                                                                 (("7"
                                                                   (hide
                                                                    -3)
                                                                   (("7"
                                                                     (hide
                                                                      1)
                                                                     (("7"
                                                                       (expand
                                                                        "nexti")
                                                                       (("7"
                                                                         (lift-if)
                                                                         (("7"
                                                                           (ground)
                                                                           nil)))))))))))
                                                                ("8"
                                                                 (flatten)
                                                                 (("8"
                                                                   (hide
                                                                    -3)
                                                                   (("8"
                                                                     (hide
                                                                      1)
                                                                     (("8"
                                                                       (expand
                                                                        "nexti")
                                                                       (("8"
                                                                         (lift-if)
                                                                         (("8"
                                                                           (ground)
                                                                           nil)))))))))))
                                                                ("9"
                                                                 (hide
                                                                  -3)
                                                                 (("9"
                                                                   (flatten)
                                                                   (("9"
                                                                     (hide
                                                                      -1)
                                                                     (("9"
                                                                       (expand
                                                                        "nexti")
                                                                       (("9"
                                                                         (lift-if)
                                                                         (("9"
                                                                           (ground)
                                                                           nil)))))))))))
                                                                ("10"
                                                                 (hide
                                                                  -3)
                                                                 (("10"
                                                                   (flatten)
                                                                   (("10"
                                                                     (expand
                                                                      "nexti")
                                                                     (("10"
                                                                       (lift-if)
                                                                       (("10"
                                                                         (ground)
                                                                         nil)))))))))
                                                                ("11"
                                                                 (hide
                                                                  3)
                                                                 (("11"
                                                                   (hide
                                                                    -3)
                                                                   (("11"
                                                                     (ground)
                                                                     nil)))))))))))))
                                                        ("2"
                                                         (hide -3)
                                                         (("2"
                                                           (ground)
                                                           nil)))
                                                        ("3"
                                                         (hide -3)
                                                         (("3"
                                                           (ground)
                                                           (("3"
                                                             (expand
                                                              "nexti")
                                                             (("3"
                                                               (lift-if)
                                                               (("3"
                                                                 (ground)
                                                                 nil)))))))))
                                                        ("4"
                                                         (hide -3)
                                                         (("4"
                                                           (ground)
                                                           (("4"
                                                             (expand
                                                              "neari")
                                                             (("4"
                                                               (lift-if)
                                                               (("4"
                                                                 (ground)
                                                                 (("4"
                                                                   (expand
                                                                    "nexti")
                                                                   (("4"
                                                                     (lift-if)
                                                                     (("4"
                                                                       (ground)
                                                                       nil)))))))))))))))))))))))
                                                ("2"
                                                 (hide -1)
                                                 (("2"
                                                   (expand "nexti")
                                                   (("2"
                                                     (lift-if)
                                                     (("2"
                                                       (ground)
                                                       nil))))))))))))))))))))))))))))))))))))))))
               nil)
              nil nil)))

