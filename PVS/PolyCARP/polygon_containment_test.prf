(polygon_containment_test
 (definitely_inside_test1 0
  (definitely_inside_test1-1 nil 3634636824 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (definitely_outside_test1 0
  (definitely_outside_test1-1 nil 3634642979
   ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (MyPoly_inside 0
  (MyPoly_inside-1 nil 3653411584 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (MyPolyTester_TCC1 0
  (MyPolyTester_TCC1-1 nil 3653413518 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (XNum const-decl "posnat" polygon_containment_test nil)
    (YNum const-decl "posnat" polygon_containment_test nil))
   nil
   (MyPolyTester subtype "polygon_containment_test.j"
                 "naturalnumbers.upto(polygon_containment_test.YNum)")))
 (MyPolyTester_TCC2 0
  (MyPolyTester_TCC2-1 nil 3653413518 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (XNum const-decl "posnat" polygon_containment_test nil)
    (YNum const-decl "posnat" polygon_containment_test nil))
   nil
   (MyPolyTester subtype
                 "(number_fields.-)(polygon_containment_test.j, 1)"
                 "naturalnumbers.upto(polygon_containment_test.XNum)")))
 (MyPolyTester_TCC3 0
  (MyPolyTester_TCC3-1 nil 3653413518 ("" (termination-tcc) nil nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (YNum const-decl "posnat" polygon_containment_test nil)
    (XNum const-decl "posnat" polygon_containment_test nil))
   nil
   (MyPolyTester termination
                 "polygon_containment_test.MyPolyTester(polygon_containment_test.i, (number_fields.-)(polygon_containment_test.j, 1))"
                 "nil")))
 (MyPolyTester_TCC4 0
  (MyPolyTester_TCC4-1 nil 3653413518 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (XNum const-decl "posnat" polygon_containment_test nil)
    (YNum const-decl "posnat" polygon_containment_test nil))
   nil
   (MyPolyTester subtype
                 "(number_fields.-)(polygon_containment_test.i, 1)"
                 "naturalnumbers.upto(polygon_containment_test.XNum)")))
 (MyPolyTester_TCC5 0
  (MyPolyTester_TCC5-1 nil 3653413518 ("" (subtype-tcc) nil nil)
   ((XNum const-decl "posnat" polygon_containment_test nil)
    (YNum const-decl "posnat" polygon_containment_test nil))
   nil
   (MyPolyTester subtype "polygon_containment_test.YNum"
                 "naturalnumbers.upto(polygon_containment_test.XNum)")))
 (MyPolyTester_TCC6 0
  (MyPolyTester_TCC6-1 nil 3653413518 ("" (termination-tcc) nil nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (YNum const-decl "posnat" polygon_containment_test nil)
    (XNum const-decl "posnat" polygon_containment_test nil))
   nil
   (MyPolyTester termination
                 "polygon_containment_test.MyPolyTester((number_fields.-)(polygon_containment_test.i, 1), polygon_containment_test.YNum)"
                 "nil")))
 (MyPolyTester_tr_TCC1 0
  (MyPolyTester_tr_TCC1-1 nil 3794671245 ("" (subtype-tcc) nil nil) nil
   nil
   (MyPolyTester_tr subtype "polygon_containment_test.j"
                    "naturalnumbers.upto(polygon_containment_test.YNum)")))
 (MyPolyTester_tr_TCC2 0
  (MyPolyTester_tr_TCC2-1 nil 3794671245 ("" (subtype-tcc) nil nil) nil
   nil
   (MyPolyTester_tr subtype "polygon_containment_test.j"
                    "naturalnumbers.upto(polygon_containment_test.YNum)")))
 (MyPolyTester_def_TCC1 0
  (MyPolyTester_def_TCC1-1 nil 3653413867 ("" (subtype-tcc) nil nil)
   ((XNum const-decl "posnat" polygon_containment_test nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (MyPolyTester_def subtype "polygon_containment_test.XNum"
    "naturalnumbers.upto(polygon_containment_test.XNum)")))
 (MyPolyTester_def_TCC2 0
  (MyPolyTester_def_TCC2-1 nil 3653413867 ("" (subtype-tcc) nil nil)
   ((YNum const-decl "posnat" polygon_containment_test nil)
    (XNum const-decl "posnat" polygon_containment_test nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (MyPolyTester_def subtype "polygon_containment_test.YNum"
    "naturalnumbers.upto(polygon_containment_test.XNum)")))
 (MyPolyTester_def 0
  (MyPolyTester_def-1 nil 3653413869 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (MyPolyTester_tr_def 0
  (MyPolyTester_tr_def-1 nil 3794671248 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (CompleteTester_def 0
  (CompleteTester_def-1 nil 3653739663 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (CompleteTester_tr_def 0
  (CompleteTester_tr_def-1 nil 3794673865 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)))

