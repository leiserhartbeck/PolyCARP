(winding_number__full_iterative__ui
 (uint32_TCC1 0
  (uint32_TCC1-1 nil 3750063108 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil))
 (max_int32_TCC1 0
  (max_int32_TCC1-1 nil 3750062571 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (min_int32_TCC1 0
  (min_int32_TCC1-1 nil 3750063108 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (plus_TCC1 0
  (plus_TCC1-1 nil 3750062571 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int32 type-eq-decl nil winding_number__full_iterative__ui nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max_int32 const-decl "int32" winding_number__full_iterative__ui
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil))
 (plus_TCC2 0
  (plus_TCC2-1 nil 3750062571 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int32 type-eq-decl nil winding_number__full_iterative__ui nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min_int32 const-decl "int32" winding_number__full_iterative__ui
     nil)
    (max_int32 const-decl "int32" winding_number__full_iterative__ui
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil))
 (plus_TCC3 0
  (plus_TCC3-1 nil 3750063108 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int32 type-eq-decl nil winding_number__full_iterative__ui nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min_int32 const-decl "int32" winding_number__full_iterative__ui
     nil)
    (max_int32 const-decl "int32" winding_number__full_iterative__ui
     nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil))
 (quadrant_TCC1 0
  (quadrant_TCC1-1 nil 3750062571 ("" (subtype-tcc) nil nil)
   ((unb_double type-eq-decl nil ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rndmaxismax_j application-judgement
     "CanonicRoundingFun[2](b, isMax?(b))" ieee754dp "float/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rndminismin_j application-judgement
     "CanonicRoundingFun[2](b, isMin?(b))" ieee754dp "float/")
    (rndeclosest_j application-judgement
     "CanonicRoundingFun[2](b, EvenClosest?(b))" ieee754dp "float/")
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Fbounded? const-decl "bool" float "float/")
    (Fnormal? const-decl "bool" float "float/")
    (Fsubnormal? const-decl "bool" float "float/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (<= const-decl "bool" float "float/")
    (Fle? const-decl "bool" float "float/")
    (Fminus const-decl "float" float "float/")
    (zero_dp const-decl "unb_double" winding_number__full_iterative__ui
     nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (RND_Max const-decl "(Fcanonic?(b))" float "float/")
    (Fopp const-decl "float" float "float/")
    (FtoR const-decl "real" float "float/")
    (RND_Min const-decl "(Fcanonic?(b))" float "float/")
    (vNum const-decl "posnat" float "float/")
    (^ const-decl "real" exponentiation nil)
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nil application-judgement "above(n)" exp2 nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (quadrant_TCC2 0
  (quadrant_TCC2-1 nil 3750062571 ("" (subtype-tcc) nil nil)
   ((unb_double type-eq-decl nil ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Fsubnormal? const-decl "bool" float "float/")
    (Fnormal? const-decl "bool" float "float/")
    (Fbounded? const-decl "bool" float "float/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rndeclosest_j application-judgement
     "CanonicRoundingFun[2](b, EvenClosest?(b))" ieee754dp "float/")
    (rndminismin_j application-judgement
     "CanonicRoundingFun[2](b, isMin?(b))" ieee754dp "float/")
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rndmaxismax_j application-judgement
     "CanonicRoundingFun[2](b, isMax?(b))" ieee754dp "float/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (<= const-decl "bool" float "float/")
    (Fle? const-decl "bool" float "float/")
    (Fminus const-decl "float" float "float/")
    (zero_dp const-decl "unb_double" winding_number__full_iterative__ui
     nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (RND_Max const-decl "(Fcanonic?(b))" float "float/")
    (Fopp const-decl "float" float "float/")
    (FtoR const-decl "real" float "float/")
    (RND_Min const-decl "(Fcanonic?(b))" float "float/")
    (vNum const-decl "posnat" float "float/")
    (^ const-decl "real" exponentiation nil)
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nil application-judgement "above(n)" exp2 nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (quadrant_TCC3 0
  (quadrant_TCC3-1 nil 3750062571 ("" (subtype-tcc) nil nil)
   ((unb_double type-eq-decl nil ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Fsubnormal? const-decl "bool" float "float/")
    (Fnormal? const-decl "bool" float "float/")
    (Fbounded? const-decl "bool" float "float/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rndeclosest_j application-judgement
     "CanonicRoundingFun[2](b, EvenClosest?(b))" ieee754dp "float/")
    (rndminismin_j application-judgement
     "CanonicRoundingFun[2](b, isMin?(b))" ieee754dp "float/")
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rndmaxismax_j application-judgement
     "CanonicRoundingFun[2](b, isMax?(b))" ieee754dp "float/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (<= const-decl "bool" float "float/")
    (Fle? const-decl "bool" float "float/")
    (Fminus const-decl "float" float "float/")
    (zero_dp const-decl "unb_double" winding_number__full_iterative__ui
     nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (RND_Max const-decl "(Fcanonic?(b))" float "float/")
    (Fopp const-decl "float" float "float/")
    (FtoR const-decl "real" float "float/")
    (RND_Min const-decl "(Fcanonic?(b))" float "float/")
    (vNum const-decl "posnat" float "float/")
    (^ const-decl "real" exponentiation nil)
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nil application-judgement "above(n)" exp2 nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (quadrant_TCC4 0
  (quadrant_TCC4-1 nil 3750062571 ("" (subtype-tcc) nil nil)
   ((unb_double type-eq-decl nil ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Fsubnormal? const-decl "bool" float "float/")
    (Fnormal? const-decl "bool" float "float/")
    (Fbounded? const-decl "bool" float "float/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rndeclosest_j application-judgement
     "CanonicRoundingFun[2](b, EvenClosest?(b))" ieee754dp "float/")
    (rndminismin_j application-judgement
     "CanonicRoundingFun[2](b, isMin?(b))" ieee754dp "float/")
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rndmaxismax_j application-judgement
     "CanonicRoundingFun[2](b, isMax?(b))" ieee754dp "float/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (<= const-decl "bool" float "float/")
    (Fle? const-decl "bool" float "float/")
    (Fminus const-decl "float" float "float/")
    (zero_dp const-decl "unb_double" winding_number__full_iterative__ui
     nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (RND_Max const-decl "(Fcanonic?(b))" float "float/")
    (Fopp const-decl "float" float "float/")
    (FtoR const-decl "real" float "float/")
    (RND_Min const-decl "(Fcanonic?(b))" float "float/")
    (vNum const-decl "posnat" float "float/")
    (^ const-decl "real" exponentiation nil)
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nil application-judgement "above(n)" exp2 nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (winding_number_contrib_TCC1 0
  (winding_number_contrib_TCC1-1 nil 3750062571
   ("" (skeep*) (("" (eval-formula) nil nil)) nil)
   ((bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (winding_number_contrib_TCC2 0
  (winding_number_contrib_TCC2-1 nil 3750062571
   ("" (skeep*) (("" (eval-formula 2) nil nil)) nil)
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (winding_number_contrib_TCC3 0
  (winding_number_contrib_TCC3-1 nil 3750062571
   ("" (skeep*) (("" (eval-formula 3) nil nil)) nil)
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (winding_number_contrib_TCC4 0
  (winding_number_contrib_TCC4-1 nil 3750062571
   ("" (skeep*) (("" (eval-formula 4) nil nil)) nil)
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (winding_number_contrib_TCC5 0
  (winding_number_contrib_TCC5-1 nil 3750062571
   ("" (skeep*) (("" (eval-formula 5) nil nil)) nil)
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (winding_number_for_TCC1 0
  (winding_number_for_TCC1-1 nil 3750062571 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil winding_number__full_iterative__ui nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil))
 (winding_number_for_TCC2 0
  (winding_number_for_TCC2-1 nil 3750062571 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil winding_number__full_iterative__ui nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil))
 (winding_number_for_TCC3 0
  (winding_number_for_TCC3-1 nil 3750062571 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)) nil))
 (winding_number_for_TCC4 0
  (winding_number_for_TCC4-1 nil 3750062571 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil winding_number__full_iterative__ui nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil))
 (winding_number_TCC1 0
  (winding_number_TCC1-1 nil 3750062571 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)) nil))
 (winding_number_TCC2 0
  (winding_number_TCC2-1 nil 3750064466
   ("" (skeep)
    (("" (typepred "ndiv(winding_number_for(N, p, s, N - 1), 4)")
      (("" (grind-reals) nil nil)) nil))
    nil)
   ((ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (winding_number_for const-decl "int32"
     winding_number__full_iterative__ui nil)
    (int32 type-eq-decl nil winding_number__full_iterative__ui nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (polygon_2D_fp type-eq-decl nil winding_number__full_iterative__ui
     nil)
    (Vect2_fp type-eq-decl nil winding_number__full_iterative__ui nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (uint32 type-eq-decl nil winding_number__full_iterative__ui nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil)))

